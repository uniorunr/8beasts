!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=154)}([function(t,e,n){var r=n(2),i=n(19),o=n(11),a=n(12),s=n(20),u=function(t,e,n){var c,l,h,f,p=t&u.F,d=t&u.G,y=t&u.S,v=t&u.P,g=t&u.B,m=d?r:y?r[e]||(r[e]={}):(r[e]||{}).prototype,_=d?i:i[e]||(i[e]={}),b=_.prototype||(_.prototype={});for(c in d&&(n=e),n)h=((l=!p&&m&&void 0!==m[c])?m:n)[c],f=g&&l?s(h,r):v&&"function"==typeof h?s(Function.call,h):h,m&&a(m,c,h,t&u.U),_[c]!=h&&o(_,c,f),v&&b[c]!=h&&(b[c]=h)};r.core=i,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},function(t,e,n){var r=n(4);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(55)("wks"),i=n(35),o=n(2).Symbol,a="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=a&&o[t]||(a?o:i)("Symbol."+t))}).store=r},function(t,e,n){var r=n(22),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e,n){t.exports=!n(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(1),i=n(99),o=n(24),a=Object.defineProperty;e.f=n(7)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(25);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var r=n(8),i=n(34);t.exports=n(7)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(2),i=n(11),o=n(15),a=n(35)("src"),s=Function.toString,u=(""+s).split("toString");n(19).inspectSource=function(t){return s.call(t)},(t.exports=function(t,e,n,s){var c="function"==typeof n;c&&(o(n,"name")||i(n,"name",e)),t[e]!==n&&(c&&(o(n,a)||i(n,a,t[e]?""+t[e]:u.join(String(e)))),t===r?t[e]=n:s?t[e]?t[e]=n:i(t,e,n):(delete t[e],i(t,e,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||s.call(this)})},function(t,e,n){var r=n(0),i=n(3),o=n(25),a=/"/g,s=function(t,e,n,r){var i=String(o(t)),s="<"+e;return""!==n&&(s+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),s+">"+i+"</"+e+">"};t.exports=function(t,e){var n={};n[t]=e(s),r(r.P+r.F*i(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",n)}},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),o=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(o).concat([i]).join("\n")}var a;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];null!=o&&(r[o]=!0)}for(i=0;i<t.length;i++){var a=t[i];null!=a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(51),i=n(25);t.exports=function(t){return r(i(t))}},function(t,e,n){var r=n(52),i=n(34),o=n(16),a=n(24),s=n(15),u=n(99),c=Object.getOwnPropertyDescriptor;e.f=n(7)?c:function(t,e){if(t=o(t),e=a(e,!0),u)try{return c(t,e)}catch(t){}if(s(t,e))return i(!r.f.call(t,e),t[e])}},function(t,e,n){var r=n(15),i=n(9),o=n(74)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e){var n=t.exports={version:"2.6.0"};"number"==typeof __e&&(__e=n)},function(t,e,n){var r=n(10);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){"use strict";var r=n(3);t.exports=function(t,e){return!!t&&r(function(){e?t.call(null,function(){},1):t.call(null)})}},function(t,e,n){var r=n(4);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(0),i=n(19),o=n(3);t.exports=function(t,e){var n=(i.Object||{})[t]||Object[t],a={};a[t]=e(n),r(r.S+r.F*o(function(){n(1)}),"Object",a)}},function(t,e,n){var r=n(20),i=n(51),o=n(9),a=n(6),s=n(90);t.exports=function(t,e){var n=1==t,u=2==t,c=3==t,l=4==t,h=6==t,f=5==t||h,p=e||s;return function(e,s,d){for(var y,v,g=o(e),m=i(g),_=r(s,d,3),b=a(m.length),w=0,E=n?p(e,b):u?p(e,0):void 0;b>w;w++)if((f||w in m)&&(v=_(y=m[w],w,g),t))if(n)E[w]=v;else if(v)switch(t){case 3:return!0;case 5:return y;case 6:return w;case 2:E.push(y)}else if(l)return!1;return h?-1:c||l?l:E}}},function(t){t.exports={englishWords:[{word:"cat",translation:["кот","кошка","котик"],type:"animal"},{word:"dog",translation:["собака","пес","собачка"],type:"animal"},{word:"bird",translation:["птица","птичка"],type:"animal"},{word:"apple",translation:["яблоко","яблочко"],type:"food"},{word:"pear",translation:["груша","грушка"],type:"food"},{word:"orange",translation:["апельсин","апельсинчик"],type:"food"},{word:"banana",translation:["банан","бананчик"],type:"food"},{word:"lemon",translation:["лимон","лимончик"],type:"food"},{word:"pineapple",translation:["ананас"],type:"food"},{word:"grapes",translation:["виноград","виноградины","виноградинки"],type:"food"},{word:"kiwi",translation:["киви"],type:"food"},{word:"carrot",translation:["морковь","морковка"],type:"food"},{word:"Onion",translation:["лук","луковица"],type:"food"},{word:"Garlic",translation:["чеснок"],type:"food"},{word:"Tomato",translation:["помидор","томат"],type:"food"},{word:"pepper",translation:["перец","перчик"],type:"food"},{word:"Potato",translation:["картошка","картофель"],type:"food"},{word:"Cucumber",translation:["огурец","огурчик"],type:"food"},{word:"Snake",translation:["змея","змейка"],type:"animal"},{word:"Kitten",translation:["котенок","котеночек"],type:"animal"},{word:"Puppy",translation:["щенок","щеночек"],type:"animal"},{word:"Rabbit",translation:["кролик"],type:"animal"},{word:"fish",translation:["рыба","рыбка"],type:"animal"},{word:"Goat",translation:["коза","козел","козлик"],type:"animal"},{word:"Pig",translation:["свинья","поросенок"],type:"animal"},{word:"Sheep",translation:["овца","овечка","баран"],type:"animal"},{word:"Horse",translation:["лошадь","конь","лошадка"],type:"animal"},{word:"Cow",translation:["коровка","корова"],type:"animal"},{word:"Goose",translation:["гусь","гусыня"],type:"animal"},{word:"Chicken",translation:["курица","цыпленок"],type:"animal"},{word:"Duck",translation:["утка","уточка"],type:"animal"},{word:"Fox",translation:["лиса","лисичка","лис"],type:"animal"},{word:"Wolf",translation:["волк","волчица"],type:"animal"},{word:"bear",translation:["медведь","медведица"],type:"animal"},{word:"Elephant",translation:["слон","слониха"],type:"animal"},{word:"Tiger",translation:["тигр","тигрица"],type:"animal"},{word:"Crocodile",translation:["крокодил","крокодилица"],type:"animal"},{word:"Giraffe",translation:["жираф","жирафчик"],type:"animal"},{word:"Car",translation:["машина","автомобиль"],type:"vehicle"},{word:"Taxi",translation:["такси"],type:"vehicle"},{word:"Bus",translation:["автобус"],type:"vehicle"},{word:"Train",translation:["поезд","состав"],type:"vehicle"},{word:"Plane",translation:["самолет","самолетик"],type:"vehicle"},{word:"bike",translation:["велосипед","мотоцикл"],type:"vehicle"},{word:"ship",translation:["корабль","судно"],type:"vehicle"},{word:"Doctor",translation:["доктор","врач","медик"],type:"profession"},{word:"Vet",translation:["ветеринар"],type:"profession"},{word:"Teacher",translation:["учитель","учительница"],type:"profession"},{word:"Policeman",translation:["полицейский","милиционер"],type:"profession"},{word:"Firefighter",translation:["пожарный","пожарник"],type:"profession"},{word:"Artist",translation:["художник","художница"],type:"profession"},{word:"Scientist",translation:["ученый"],type:"profession"},{word:"Hairdresser",translation:["парикмахер"],type:"profession"},{word:"Plumber",translation:["водопроводчик","сантехник"],type:"profession"},{word:"Chef",translation:["повар","шеф-повар"],type:"profession"},{word:"Bedroom",translation:["спальня","спальная комната"],type:"home"},{word:"Kitchen",translation:["кухня","кухонька"],type:"home"},{word:"Bathroom",translation:["ванная","ванна","ванная комната"],type:"home"},{word:"Garage",translation:["гараж"],type:"home"},{word:"Head",translation:["голова","головка"],type:"human"},{word:"Hair",translation:["волосы"],type:"human"},{word:"Eyes",translation:["глаза"],type:"human"},{word:"Nose",translation:["нос","носик"],type:"human"},{word:"Teeth",translation:["зубы","зубки"],type:"human"},{word:"Lips",translation:["губы","губки"],type:"human"},{word:"Ears",translation:["уши","ушки"],type:"human"},{word:"Neck",translation:["шея","шеюшка"],type:"human"},{word:"Shoulders",translation:["плечи","плечики"],type:"human"},{word:"Leg",translation:["нога","ножка"],type:"human"},{word:"Feet",translation:["стопы","ноги"],type:"human"},{word:"grandmother",translation:["бабушка","бабуля"],type:"family"},{word:"brother",translation:["брат","братишка"],type:"family"},{word:"grandson",translation:["внук","внучок"],type:"family"},{word:"granddaughter",translation:["внучка","внученька"],type:"family"},{word:"grandfather",translation:["дедушка","дедуля"],type:"family"},{word:"daughter",translation:["дочка","доченька"],type:"family"},{word:"uncle",translation:["дядя"],type:"family"},{word:"wife",translation:["жена","супруга"],type:"family"},{word:"mother",translation:["мама","мамуля","мать"],type:"family"},{word:"husband",translation:["муж","супруг"],type:"family"},{word:"father",translation:["папа","отец"],type:"family"},{word:"kid",translation:["ребенок"],type:"family"},{word:"parents",translation:["родители","родные"],type:"family"},{word:"family",translation:["семья","семейка"],type:"family"},{word:"sister",translation:["сестра","сестричка"],type:"family"},{word:"son",translation:["сын","сынок"],type:"family"},{word:"aunt",translation:["тетя","тетушка"],type:"family"}],types:["animal","food","vehicle","profession","home","human","family"]}},function(t,e,n){"use strict";if(n(7)){var r=n(32),i=n(2),o=n(3),a=n(0),s=n(66),u=n(98),c=n(20),l=n(41),h=n(34),f=n(11),p=n(43),d=n(22),y=n(6),v=n(127),g=n(37),m=n(24),_=n(15),b=n(46),w=n(4),E=n(9),S=n(87),C=n(38),x=n(18),T=n(39).f,k=n(89),P=n(35),O=n(5),I=n(27),A=n(56),N=n(54),R=n(92),D=n(48),F=n(61),M=n(40),L=n(91),j=n(116),q=n(8),W=n(17),U=q.f,B=W.f,H=i.RangeError,V=i.TypeError,Q=i.Uint8Array,z=Array.prototype,Y=u.ArrayBuffer,G=u.DataView,K=I(0),X=I(2),$=I(3),J=I(4),Z=I(5),tt=I(6),et=A(!0),nt=A(!1),rt=R.values,it=R.keys,ot=R.entries,at=z.lastIndexOf,st=z.reduce,ut=z.reduceRight,ct=z.join,lt=z.sort,ht=z.slice,ft=z.toString,pt=z.toLocaleString,dt=O("iterator"),yt=O("toStringTag"),vt=P("typed_constructor"),gt=P("def_constructor"),mt=s.CONSTR,_t=s.TYPED,bt=s.VIEW,wt=I(1,function(t,e){return Tt(N(t,t[gt]),e)}),Et=o(function(){return 1===new Q(new Uint16Array([1]).buffer)[0]}),St=!!Q&&!!Q.prototype.set&&o(function(){new Q(1).set({})}),Ct=function(t,e){var n=d(t);if(n<0||n%e)throw H("Wrong offset!");return n},xt=function(t){if(w(t)&&_t in t)return t;throw V(t+" is not a typed array!")},Tt=function(t,e){if(!(w(t)&&vt in t))throw V("It is not a typed array constructor!");return new t(e)},kt=function(t,e){return Pt(N(t,t[gt]),e)},Pt=function(t,e){for(var n=0,r=e.length,i=Tt(t,r);r>n;)i[n]=e[n++];return i},Ot=function(t,e,n){U(t,e,{get:function(){return this._d[n]}})},It=function(t){var e,n,r,i,o,a,s=E(t),u=arguments.length,l=u>1?arguments[1]:void 0,h=void 0!==l,f=k(s);if(null!=f&&!S(f)){for(a=f.call(s),r=[],e=0;!(o=a.next()).done;e++)r.push(o.value);s=r}for(h&&u>2&&(l=c(l,arguments[2],2)),e=0,n=y(s.length),i=Tt(this,n);n>e;e++)i[e]=h?l(s[e],e):s[e];return i},At=function(){for(var t=0,e=arguments.length,n=Tt(this,e);e>t;)n[t]=arguments[t++];return n},Nt=!!Q&&o(function(){pt.call(new Q(1))}),Rt=function(){return pt.apply(Nt?ht.call(xt(this)):xt(this),arguments)},Dt={copyWithin:function(t,e){return j.call(xt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return J(xt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return L.apply(xt(this),arguments)},filter:function(t){return kt(this,X(xt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Z(xt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(xt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){K(xt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return nt(xt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(xt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ct.apply(xt(this),arguments)},lastIndexOf:function(t){return at.apply(xt(this),arguments)},map:function(t){return wt(xt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return st.apply(xt(this),arguments)},reduceRight:function(t){return ut.apply(xt(this),arguments)},reverse:function(){for(var t,e=xt(this).length,n=Math.floor(e/2),r=0;r<n;)t=this[r],this[r++]=this[--e],this[e]=t;return this},some:function(t){return $(xt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return lt.call(xt(this),t)},subarray:function(t,e){var n=xt(this),r=n.length,i=g(t,r);return new(N(n,n[gt]))(n.buffer,n.byteOffset+i*n.BYTES_PER_ELEMENT,y((void 0===e?r:g(e,r))-i))}},Ft=function(t,e){return kt(this,ht.call(xt(this),t,e))},Mt=function(t){xt(this);var e=Ct(arguments[1],1),n=this.length,r=E(t),i=y(r.length),o=0;if(i+e>n)throw H("Wrong length!");for(;o<i;)this[e+o]=r[o++]},Lt={entries:function(){return ot.call(xt(this))},keys:function(){return it.call(xt(this))},values:function(){return rt.call(xt(this))}},jt=function(t,e){return w(t)&&t[_t]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},qt=function(t,e){return jt(t,e=m(e,!0))?h(2,t[e]):B(t,e)},Wt=function(t,e,n){return!(jt(t,e=m(e,!0))&&w(n)&&_(n,"value"))||_(n,"get")||_(n,"set")||n.configurable||_(n,"writable")&&!n.writable||_(n,"enumerable")&&!n.enumerable?U(t,e,n):(t[e]=n.value,t)};mt||(W.f=qt,q.f=Wt),a(a.S+a.F*!mt,"Object",{getOwnPropertyDescriptor:qt,defineProperty:Wt}),o(function(){ft.call({})})&&(ft=pt=function(){return ct.call(this)});var Ut=p({},Dt);p(Ut,Lt),f(Ut,dt,Lt.values),p(Ut,{slice:Ft,set:Mt,constructor:function(){},toString:ft,toLocaleString:Rt}),Ot(Ut,"buffer","b"),Ot(Ut,"byteOffset","o"),Ot(Ut,"byteLength","l"),Ot(Ut,"length","e"),U(Ut,yt,{get:function(){return this[_t]}}),t.exports=function(t,e,n,u){var c=t+((u=!!u)?"Clamped":"")+"Array",h="get"+t,p="set"+t,d=i[c],g=d||{},m=d&&x(d),_=!d||!s.ABV,E={},S=d&&d.prototype,k=function(t,n){U(t,n,{get:function(){return function(t,n){var r=t._d;return r.v[h](n*e+r.o,Et)}(this,n)},set:function(t){return function(t,n,r){var i=t._d;u&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),i.v[p](n*e+i.o,r,Et)}(this,n,t)},enumerable:!0})};_?(d=n(function(t,n,r,i){l(t,d,c,"_d");var o,a,s,u,h=0,p=0;if(w(n)){if(!(n instanceof Y||"ArrayBuffer"==(u=b(n))||"SharedArrayBuffer"==u))return _t in n?Pt(d,n):It.call(d,n);o=n,p=Ct(r,e);var g=n.byteLength;if(void 0===i){if(g%e)throw H("Wrong length!");if((a=g-p)<0)throw H("Wrong length!")}else if((a=y(i)*e)+p>g)throw H("Wrong length!");s=a/e}else s=v(n),o=new Y(a=s*e);for(f(t,"_d",{b:o,o:p,l:a,e:s,v:new G(o)});h<s;)k(t,h++)}),S=d.prototype=C(Ut),f(S,"constructor",d)):o(function(){d(1)})&&o(function(){new d(-1)})&&F(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=n(function(t,n,r,i){var o;return l(t,d,c),w(n)?n instanceof Y||"ArrayBuffer"==(o=b(n))||"SharedArrayBuffer"==o?void 0!==i?new g(n,Ct(r,e),i):void 0!==r?new g(n,Ct(r,e)):new g(n):_t in n?Pt(d,n):It.call(d,n):new g(v(n))}),K(m!==Function.prototype?T(g).concat(T(m)):T(g),function(t){t in d||f(d,t,g[t])}),d.prototype=S,r||(S.constructor=d));var P=S[dt],O=!!P&&("values"==P.name||null==P.name),I=Lt.values;f(d,vt,!0),f(S,_t,c),f(S,bt,!0),f(S,gt,d),(u?new d(1)[yt]==c:yt in S)||U(S,yt,{get:function(){return c}}),E[c]=d,a(a.G+a.W+a.F*(d!=g),E),a(a.S,c,{BYTES_PER_ELEMENT:e}),a(a.S+a.F*o(function(){g.of.call(d,1)}),c,{from:It,of:At}),"BYTES_PER_ELEMENT"in S||f(S,"BYTES_PER_ELEMENT",e),a(a.P,c,Dt),M(c),a(a.P+a.F*St,c,{set:Mt}),a(a.P+a.F*!O,c,Lt),r||S.toString==ft||(S.toString=ft),a(a.P+a.F*o(function(){new d(1).slice()}),c,{slice:Ft}),a(a.P+a.F*(o(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!o(function(){S.toLocaleString.call([1,2])})),c,{toLocaleString:Rt}),D[c]=O?P:I,r||O||f(S,dt,I)}}else t.exports=function(){}},function(t,e,n){var r=n(122),i=n(0),o=n(55)("metadata"),a=o.store||(o.store=new(n(125))),s=function(t,e,n){var i=a.get(t);if(!i){if(!n)return;a.set(t,i=new r)}var o=i.get(e);if(!o){if(!n)return;i.set(e,o=new r)}return o};t.exports={store:a,map:s,has:function(t,e,n){var r=s(e,n,!1);return void 0!==r&&r.has(t)},get:function(t,e,n){var r=s(e,n,!1);return void 0===r?void 0:r.get(t)},set:function(t,e,n,r){s(n,r,!0).set(t,e)},keys:function(t,e){var n=s(t,e,!1),r=[];return n&&n.forEach(function(t,e){r.push(e)}),r},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){i(i.S,"Reflect",t)}}},function(t,e,n){var r=n(35)("meta"),i=n(4),o=n(15),a=n(8).f,s=0,u=Object.isExtensible||function(){return!0},c=!n(3)(function(){return u(Object.preventExtensions({}))}),l=function(t){a(t,r,{value:{i:"O"+ ++s,w:{}}})},h=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!u(t))return"F";if(!e)return"E";l(t)}return t[r].i},getWeak:function(t,e){if(!o(t,r)){if(!u(t))return!0;if(!e)return!1;l(t)}return t[r].w},onFreeze:function(t){return c&&h.NEED&&u(t)&&!o(t,r)&&l(t),t}}},function(t,e){t.exports=!1},function(t,e,n){var r=n(5)("unscopables"),i=Array.prototype;null==i[r]&&n(11)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e,n){var r=n(101),i=n(75);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e,n){var r=n(22),i=Math.max,o=Math.min;t.exports=function(t,e){return(t=r(t))<0?i(t+e,0):o(t,e)}},function(t,e,n){var r=n(1),i=n(102),o=n(75),a=n(74)("IE_PROTO"),s=function(){},u=function(){var t,e=n(72)("iframe"),r=o.length;for(e.style.display="none",n(76).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),u=t.F;r--;)delete u.prototype[o[r]];return u()};t.exports=Object.create||function(t,e){var n;return null!==t?(s.prototype=r(t),n=new s,s.prototype=null,n[a]=t):n=u(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(101),i=n(75).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e,n){"use strict";var r=n(2),i=n(8),o=n(7),a=n(5)("species");t.exports=function(t){var e=r[t];o&&e&&!e[a]&&i.f(e,a,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,e,n){var r=n(20),i=n(114),o=n(87),a=n(1),s=n(6),u=n(89),c={},l={};(e=t.exports=function(t,e,n,h,f){var p,d,y,v,g=f?function(){return t}:u(t),m=r(n,h,e?2:1),_=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(o(g)){for(p=s(t.length);p>_;_++)if((v=e?m(a(d=t[_])[0],d[1]):m(t[_]))===c||v===l)return v}else for(y=g.call(t);!(d=y.next()).done;)if((v=i(y,m,d.value,e))===c||v===l)return v}).BREAK=c,e.RETURN=l},function(t,e,n){var r=n(12);t.exports=function(t,e,n){for(var i in e)r(t,i,e[i],n);return t}},function(t,e,n){"use strict";(function(t){if(n(155),n(351),n(352),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var e="defineProperty";function r(t,n,r){t[n]||Object[e](t,n,{writable:!0,configurable:!0,value:r})}r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&r(Array,t,Function.call.bind([][t]))})}).call(this,n(50))},function(t,e,n){var r=n(8).f,i=n(15),o=n(5)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},function(t,e,n){var r=n(21),i=n(5)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:o?r(e):"Object"==(a=r(e))&&"function"==typeof e.callee?"Arguments":a}},function(t,e,n){var r=n(0),i=n(25),o=n(3),a=n(78),s="["+a+"]",u=RegExp("^"+s+s+"*"),c=RegExp(s+s+"*$"),l=function(t,e,n){var i={},s=o(function(){return!!a[t]()||"​"!="​"[t]()}),u=i[t]=s?e(h):a[t];n&&(i[n]=u),r(r.P+r.F*s,"String",i)},h=l.trim=function(t,e){return t=String(i(t)),1&e&&(t=t.replace(u,"")),2&e&&(t=t.replace(c,"")),t};t.exports=l},function(t,e){t.exports={}},function(t,e,n){var r=n(4);t.exports=function(t,e){if(!r(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(21);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){"use strict";var r=n(1);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){var r=n(1),i=n(10),o=n(5)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||null==(n=r(a)[o])?e:i(n)}},function(t,e,n){var r=n(19),i=n(2),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(32)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){var r=n(16),i=n(6),o=n(37);t.exports=function(t){return function(e,n,a){var s,u=r(e),c=i(u.length),l=o(a,c);if(t&&n!=n){for(;c>l;)if((s=u[l++])!=s)return!0}else for(;c>l;l++)if((t||l in u)&&u[l]===n)return t||l||0;return!t&&-1}}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(21);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(22),i=n(25);t.exports=function(t){return function(e,n){var o,a,s=String(i(e)),u=r(n),c=s.length;return u<0||u>=c?t?"":void 0:(o=s.charCodeAt(u))<55296||o>56319||u+1===c||(a=s.charCodeAt(u+1))<56320||a>57343?t?s.charAt(u):o:t?s.slice(u,u+2):a-56320+(o-55296<<10)+65536}}},function(t,e,n){var r=n(4),i=n(21),o=n(5)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},function(t,e,n){var r=n(5)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var o=[7],a=o[r]();a.next=function(){return{done:n=!0}},o[r]=function(){return a},t(o)}catch(t){}return n}},function(t,e,n){"use strict";var r=n(46),i=RegExp.prototype.exec;t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var o=n.call(t,e);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},function(t,e,n){"use strict";n(118);var r=n(12),i=n(11),o=n(3),a=n(25),s=n(5),u=n(93),c=s("species"),l=!o(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),h=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();t.exports=function(t,e,n){var f=s(t),p=!o(function(){var e={};return e[f]=function(){return 7},7!=""[t](e)}),d=p?!o(function(){var e=!1,n=/a/;return n.exec=function(){return e=!0,null},"split"===t&&(n.constructor={},n.constructor[c]=function(){return n}),n[f](""),!e}):void 0;if(!p||!d||"replace"===t&&!l||"split"===t&&!h){var y=/./[f],v=n(a,f,""[t],function(t,e,n,r,i){return e.exec===u?p&&!i?{done:!0,value:y.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}}),g=v[0],m=v[1];r(String.prototype,t,g),i(RegExp.prototype,f,2==e?function(t,e){return m.call(t,this,e)}:function(t){return m.call(t,this)})}}},function(t,e,n){var r=n(2).navigator;t.exports=r&&r.userAgent||""},function(t,e,n){"use strict";var r=n(2),i=n(0),o=n(12),a=n(43),s=n(31),u=n(42),c=n(41),l=n(4),h=n(3),f=n(61),p=n(45),d=n(79);t.exports=function(t,e,n,y,v,g){var m=r[t],_=m,b=v?"set":"add",w=_&&_.prototype,E={},S=function(t){var e=w[t];o(w,t,"delete"==t?function(t){return!(g&&!l(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(g&&!l(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!l(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if("function"==typeof _&&(g||w.forEach&&!h(function(){(new _).entries().next()}))){var C=new _,x=C[b](g?{}:-0,1)!=C,T=h(function(){C.has(1)}),k=f(function(t){new _(t)}),P=!g&&h(function(){for(var t=new _,e=5;e--;)t[b](e,e);return!t.has(-0)});k||((_=e(function(e,n){c(e,_,t);var r=d(new m,e,_);return null!=n&&u(n,v,r[b],r),r})).prototype=w,w.constructor=_),(T||P)&&(S("delete"),S("has"),v&&S("get")),(P||x)&&S(b),g&&w.clear&&delete w.clear}else _=y.getConstructor(e,t,v,b),a(_.prototype,n),s.NEED=!0;return p(_,t),E[t]=_,i(i.G+i.W+i.F*(_!=m),E),g||y.setStrong(_,t,v),_}},function(t,e,n){for(var r,i=n(2),o=n(11),a=n(35),s=a("typed_array"),u=a("view"),c=!(!i.ArrayBuffer||!i.DataView),l=c,h=0,f="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");h<9;)(r=i[f[h++]])?(o(r.prototype,s,!0),o(r.prototype,u,!0)):l=!1;t.exports={ABV:c,CONSTR:l,TYPED:s,VIEW:u}},function(t,e,n){"use strict";t.exports=n(32)||!n(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete n(2)[t]})},function(t,e,n){"use strict";var r=n(0);t.exports=function(t){r(r.S,t,{of:function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},function(t,e,n){"use strict";var r=n(0),i=n(10),o=n(20),a=n(42);t.exports=function(t){r(r.S,t,{from:function(t){var e,n,r,s,u=arguments[1];return i(this),(e=void 0!==u)&&i(u),null==t?new this:(n=[],e?(r=0,s=o(u,arguments[2],2),a(t,!1,function(t){n.push(s(t,r++))})):a(t,!1,n.push,n),new this(n))}})}},function(t,e,n){t.exports=n.p+"images/2a701388a5f82a314976f955c53282d7-torch.png"},function(t,e,n){"use strict";n(375);var r,i=(r=n(136))&&"object"==typeof r&&"default"in r?r.default:r;t.exports=i},function(t,e,n){var r=n(4),i=n(2).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,e,n){var r=n(2),i=n(19),o=n(32),a=n(100),s=n(8).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:a.f(t)})}},function(t,e,n){var r=n(55)("keys"),i=n(35);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(2).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(4),i=n(1),o=function(t,e){if(i(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=n(20)(Function.call,n(17).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return o(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:o}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,n){var r=n(4),i=n(77).set;t.exports=function(t,e,n){var o,a=e.constructor;return a!==n&&"function"==typeof a&&(o=a.prototype)!==n.prototype&&r(o)&&i&&i(t,o),t}},function(t,e,n){"use strict";var r=n(22),i=n(25);t.exports=function(t){var e=String(i(this)),n="",o=r(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(e+=e))1&o&&(n+=e);return n}},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e){var n=Math.expm1;t.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:n},function(t,e,n){"use strict";var r=n(32),i=n(0),o=n(12),a=n(11),s=n(48),u=n(84),c=n(45),l=n(18),h=n(5)("iterator"),f=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,n,d,y,v,g){u(n,e,d);var m,_,b,w=function(t){if(!f&&t in x)return x[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},E=e+" Iterator",S="values"==y,C=!1,x=t.prototype,T=x[h]||x["@@iterator"]||y&&x[y],k=T||w(y),P=y?S?w("entries"):k:void 0,O="Array"==e&&x.entries||T;if(O&&(b=l(O.call(new t)))!==Object.prototype&&b.next&&(c(b,E,!0),r||"function"==typeof b[h]||a(b,h,p)),S&&T&&"values"!==T.name&&(C=!0,k=function(){return T.call(this)}),r&&!g||!f&&!C&&x[h]||a(x,h,k),s[e]=k,s[E]=p,y)if(m={values:S?k:w("values"),keys:v?k:w("keys"),entries:P},g)for(_ in m)_ in x||o(x,_,m[_]);else i(i.P+i.F*(f||C),e,m);return m}},function(t,e,n){"use strict";var r=n(38),i=n(34),o=n(45),a={};n(11)(a,n(5)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(a,{next:i(1,n)}),o(t,e+" Iterator")}},function(t,e,n){var r=n(60),i=n(25);t.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(i(t))}},function(t,e,n){var r=n(5)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,n){var r=n(48),i=n(5)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,e,n){"use strict";var r=n(8),i=n(34);t.exports=function(t,e,n){e in t?r.f(t,e,i(0,n)):t[e]=n}},function(t,e,n){var r=n(46),i=n(5)("iterator"),o=n(48);t.exports=n(19).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,e,n){var r=n(245);t.exports=function(t,e){return new(r(t))(e)}},function(t,e,n){"use strict";var r=n(9),i=n(37),o=n(6);t.exports=function(t){for(var e=r(this),n=o(e.length),a=arguments.length,s=i(a>1?arguments[1]:void 0,n),u=a>2?arguments[2]:void 0,c=void 0===u?n:i(u,n);c>s;)e[s++]=t;return e}},function(t,e,n){"use strict";var r=n(33),i=n(117),o=n(48),a=n(16);t.exports=n(83)(Array,"Array",function(t,e){this._t=a(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,e,n){"use strict";var r,i,o=n(53),a=RegExp.prototype.exec,s=String.prototype.replace,u=a,c=(r=/a/,i=/b*/g,a.call(r,"a"),a.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),l=void 0!==/()??/.exec("")[1];(c||l)&&(u=function(t){var e,n,r,i,u=this;return l&&(n=new RegExp("^"+u.source+"$(?!\\s)",o.call(u))),c&&(e=u.lastIndex),r=a.call(u,t),c&&r&&(u.lastIndex=u.global?r.index+r[0].length:e),l&&r&&r.length>1&&s.call(r[0],n,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)}),r}),t.exports=u},function(t,e,n){"use strict";var r=n(59)(!0);t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},function(t,e,n){var r,i,o,a=n(20),s=n(107),u=n(76),c=n(72),l=n(2),h=l.process,f=l.setImmediate,p=l.clearImmediate,d=l.MessageChannel,y=l.Dispatch,v=0,g={},m=function(){var t=+this;if(g.hasOwnProperty(t)){var e=g[t];delete g[t],e()}},_=function(t){m.call(t.data)};f&&p||(f=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return g[++v]=function(){s("function"==typeof t?t:Function(t),e)},r(v),v},p=function(t){delete g[t]},"process"==n(21)(h)?r=function(t){h.nextTick(a(m,t,1))}:y&&y.now?r=function(t){y.now(a(m,t,1))}:d?(o=(i=new d).port2,i.port1.onmessage=_,r=a(o.postMessage,o,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(r=function(t){l.postMessage(t+"","*")},l.addEventListener("message",_,!1)):r="onreadystatechange"in c("script")?function(t){u.appendChild(c("script")).onreadystatechange=function(){u.removeChild(this),m.call(t)}}:function(t){setTimeout(a(m,t,1),0)}),t.exports={set:f,clear:p}},function(t,e,n){var r=n(2),i=n(95).set,o=r.MutationObserver||r.WebKitMutationObserver,a=r.process,s=r.Promise,u="process"==n(21)(a);t.exports=function(){var t,e,n,c=function(){var r,i;for(u&&(r=a.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(u)n=function(){a.nextTick(c)};else if(!o||r.navigator&&r.navigator.standalone)if(s&&s.resolve){var l=s.resolve(void 0);n=function(){l.then(c)}}else n=function(){i.call(r,c)};else{var h=!0,f=document.createTextNode("");new o(c).observe(f,{characterData:!0}),n=function(){f.data=h=!h}}return function(r){var i={fn:r,next:void 0};e&&(e.next=i),t||(t=i,n()),e=i}}},function(t,e,n){"use strict";var r=n(10);function i(t){var e,n;this.promise=new t(function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r}),this.resolve=r(e),this.reject=r(n)}t.exports.f=function(t){return new i(t)}},function(t,e,n){"use strict";var r=n(2),i=n(7),o=n(32),a=n(66),s=n(11),u=n(43),c=n(3),l=n(41),h=n(22),f=n(6),p=n(127),d=n(39).f,y=n(8).f,v=n(91),g=n(45),m="prototype",_="Wrong index!",b=r.ArrayBuffer,w=r.DataView,E=r.Math,S=r.RangeError,C=r.Infinity,x=b,T=E.abs,k=E.pow,P=E.floor,O=E.log,I=E.LN2,A=i?"_b":"buffer",N=i?"_l":"byteLength",R=i?"_o":"byteOffset";function D(t,e,n){var r,i,o,a=new Array(n),s=8*n-e-1,u=(1<<s)-1,c=u>>1,l=23===e?k(2,-24)-k(2,-77):0,h=0,f=t<0||0===t&&1/t<0?1:0;for((t=T(t))!=t||t===C?(i=t!=t?1:0,r=u):(r=P(O(t)/I),t*(o=k(2,-r))<1&&(r--,o*=2),(t+=r+c>=1?l/o:l*k(2,1-c))*o>=2&&(r++,o/=2),r+c>=u?(i=0,r=u):r+c>=1?(i=(t*o-1)*k(2,e),r+=c):(i=t*k(2,c-1)*k(2,e),r=0));e>=8;a[h++]=255&i,i/=256,e-=8);for(r=r<<e|i,s+=e;s>0;a[h++]=255&r,r/=256,s-=8);return a[--h]|=128*f,a}function F(t,e,n){var r,i=8*n-e-1,o=(1<<i)-1,a=o>>1,s=i-7,u=n-1,c=t[u--],l=127&c;for(c>>=7;s>0;l=256*l+t[u],u--,s-=8);for(r=l&(1<<-s)-1,l>>=-s,s+=e;s>0;r=256*r+t[u],u--,s-=8);if(0===l)l=1-a;else{if(l===o)return r?NaN:c?-C:C;r+=k(2,e),l-=a}return(c?-1:1)*r*k(2,l-e)}function M(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function L(t){return[255&t]}function j(t){return[255&t,t>>8&255]}function q(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function W(t){return D(t,52,8)}function U(t){return D(t,23,4)}function B(t,e,n){y(t[m],e,{get:function(){return this[n]}})}function H(t,e,n,r){var i=p(+n);if(i+e>t[N])throw S(_);var o=t[A]._b,a=i+t[R],s=o.slice(a,a+e);return r?s:s.reverse()}function V(t,e,n,r,i,o){var a=p(+n);if(a+e>t[N])throw S(_);for(var s=t[A]._b,u=a+t[R],c=r(+i),l=0;l<e;l++)s[u+l]=c[o?l:e-l-1]}if(a.ABV){if(!c(function(){b(1)})||!c(function(){new b(-1)})||c(function(){return new b,new b(1.5),new b(NaN),"ArrayBuffer"!=b.name})){for(var Q,z=(b=function(t){return l(this,b),new x(p(t))})[m]=x[m],Y=d(x),G=0;Y.length>G;)(Q=Y[G++])in b||s(b,Q,x[Q]);o||(z.constructor=b)}var K=new w(new b(2)),X=w[m].setInt8;K.setInt8(0,2147483648),K.setInt8(1,2147483649),!K.getInt8(0)&&K.getInt8(1)||u(w[m],{setInt8:function(t,e){X.call(this,t,e<<24>>24)},setUint8:function(t,e){X.call(this,t,e<<24>>24)}},!0)}else b=function(t){l(this,b,"ArrayBuffer");var e=p(t);this._b=v.call(new Array(e),0),this[N]=e},w=function(t,e,n){l(this,w,"DataView"),l(t,b,"DataView");var r=t[N],i=h(e);if(i<0||i>r)throw S("Wrong offset!");if(i+(n=void 0===n?r-i:f(n))>r)throw S("Wrong length!");this[A]=t,this[R]=i,this[N]=n},i&&(B(b,"byteLength","_l"),B(w,"buffer","_b"),B(w,"byteLength","_l"),B(w,"byteOffset","_o")),u(w[m],{getInt8:function(t){return H(this,1,t)[0]<<24>>24},getUint8:function(t){return H(this,1,t)[0]},getInt16:function(t){var e=H(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=H(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return M(H(this,4,t,arguments[1]))},getUint32:function(t){return M(H(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return F(H(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return F(H(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){V(this,1,t,L,e)},setUint8:function(t,e){V(this,1,t,L,e)},setInt16:function(t,e){V(this,2,t,j,e,arguments[2])},setUint16:function(t,e){V(this,2,t,j,e,arguments[2])},setInt32:function(t,e){V(this,4,t,q,e,arguments[2])},setUint32:function(t,e){V(this,4,t,q,e,arguments[2])},setFloat32:function(t,e){V(this,4,t,U,e,arguments[2])},setFloat64:function(t,e){V(this,8,t,W,e,arguments[2])}});g(b,"ArrayBuffer"),g(w,"DataView"),s(w[m],a.VIEW,!0),e.ArrayBuffer=b,e.DataView=w},function(t,e,n){t.exports=!n(7)&&!n(3)(function(){return 7!=Object.defineProperty(n(72)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){e.f=n(5)},function(t,e,n){var r=n(15),i=n(16),o=n(56)(!1),a=n(74)("IE_PROTO");t.exports=function(t,e){var n,s=i(t),u=0,c=[];for(n in s)n!=a&&r(s,n)&&c.push(n);for(;e.length>u;)r(s,n=e[u++])&&(~o(c,n)||c.push(n));return c}},function(t,e,n){var r=n(8),i=n(1),o=n(36);t.exports=n(7)?Object.defineProperties:function(t,e){i(t);for(var n,a=o(e),s=a.length,u=0;s>u;)r.f(t,n=a[u++],e[n]);return t}},function(t,e,n){var r=n(16),i=n(39).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(r(t))}},function(t,e,n){"use strict";var r=n(36),i=n(57),o=n(52),a=n(9),s=n(51),u=Object.assign;t.exports=!u||n(3)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=u({},t)[n]||Object.keys(u({},e)).join("")!=r})?function(t,e){for(var n=a(t),u=arguments.length,c=1,l=i.f,h=o.f;u>c;)for(var f,p=s(arguments[c++]),d=l?r(p).concat(l(p)):r(p),y=d.length,v=0;y>v;)h.call(p,f=d[v++])&&(n[f]=p[f]);return n}:u},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,n){"use strict";var r=n(10),i=n(4),o=n(107),a=[].slice,s={};t.exports=Function.bind||function(t){var e=r(this),n=a.call(arguments,1),u=function(){var r=n.concat(a.call(arguments));return this instanceof u?function(t,e,n){if(!(e in s)){for(var r=[],i=0;i<e;i++)r[i]="a["+i+"]";s[e]=Function("F,a","return new F("+r.join(",")+")")}return s[e](t,n)}(e,r.length,r):o(e,r,t)};return i(e.prototype)&&(u.prototype=e.prototype),u}},function(t,e){t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e,n){var r=n(2).parseInt,i=n(47).trim,o=n(78),a=/^[-+]?0[xX]/;t.exports=8!==r(o+"08")||22!==r(o+"0x16")?function(t,e){var n=i(String(t),3);return r(n,e>>>0||(a.test(n)?16:10))}:r},function(t,e,n){var r=n(2).parseFloat,i=n(47).trim;t.exports=1/r(n(78)+"-0")!=-1/0?function(t){var e=i(String(t),3),n=r(e);return 0===n&&"-"==e.charAt(0)?-0:n}:r},function(t,e,n){var r=n(21);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(e);return+t}},function(t,e,n){var r=n(4),i=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,n){var r=n(81),i=Math.pow,o=i(2,-52),a=i(2,-23),s=i(2,127)*(2-a),u=i(2,-126);t.exports=Math.fround||function(t){var e,n,i=Math.abs(t),c=r(t);return i<u?c*(i/u/a+1/o-1/o)*u*a:(n=(e=(1+a/o)*i)-(e-i))>s||n!=n?c*(1/0):c*n}},function(t,e,n){var r=n(1);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){var o=t.return;throw void 0!==o&&r(o.call(t)),e}}},function(t,e,n){var r=n(10),i=n(9),o=n(51),a=n(6);t.exports=function(t,e,n,s,u){r(e);var c=i(t),l=o(c),h=a(c.length),f=u?h-1:0,p=u?-1:1;if(n<2)for(;;){if(f in l){s=l[f],f+=p;break}if(f+=p,u?f<0:h<=f)throw TypeError("Reduce of empty array with no initial value")}for(;u?f>=0:h>f;f+=p)f in l&&(s=e(s,l[f],f,c));return s}},function(t,e,n){"use strict";var r=n(9),i=n(37),o=n(6);t.exports=[].copyWithin||function(t,e){var n=r(this),a=o(n.length),s=i(t,a),u=i(e,a),c=arguments.length>2?arguments[2]:void 0,l=Math.min((void 0===c?a:i(c,a))-u,a-s),h=1;for(u<s&&s<u+l&&(h=-1,u+=l-1,s+=l-1);l-- >0;)u in n?n[s]=n[u]:delete n[s],s+=h,u+=h;return n}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){"use strict";var r=n(93);n(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,e,n){n(7)&&"g"!=/./g.flags&&n(8).f(RegExp.prototype,"flags",{configurable:!0,get:n(53)})},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,n){var r=n(1),i=n(4),o=n(97);t.exports=function(t,e){if(r(t),i(e)&&e.constructor===t)return e;var n=o.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){"use strict";var r=n(123),i=n(49);t.exports=n(65)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=r.getEntry(i(this,"Map"),t);return e&&e.v},set:function(t,e){return r.def(i(this,"Map"),0===t?0:t,e)}},r,!0)},function(t,e,n){"use strict";var r=n(8).f,i=n(38),o=n(43),a=n(20),s=n(41),u=n(42),c=n(83),l=n(117),h=n(40),f=n(7),p=n(31).fastKey,d=n(49),y=f?"_s":"size",v=function(t,e){var n,r=p(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n};t.exports={getConstructor:function(t,e,n,c){var l=t(function(t,r){s(t,l,e,"_i"),t._t=e,t._i=i(null),t._f=void 0,t._l=void 0,t[y]=0,null!=r&&u(r,n,t[c],t)});return o(l.prototype,{clear:function(){for(var t=d(this,e),n=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];t._f=t._l=void 0,t[y]=0},delete:function(t){var n=d(this,e),r=v(n,t);if(r){var i=r.n,o=r.p;delete n._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),n._f==r&&(n._f=i),n._l==r&&(n._l=o),n[y]--}return!!r},forEach:function(t){d(this,e);for(var n,r=a(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!v(d(this,e),t)}}),f&&r(l.prototype,"size",{get:function(){return d(this,e)[y]}}),l},def:function(t,e,n){var r,i,o=v(t,e);return o?o.v=n:(t._l=o={i:i=p(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[y]++,"F"!==i&&(t._i[i]=o)),t},getEntry:v,setStrong:function(t,e,n){c(t,e,function(t,n){this._t=d(t,e),this._k=n,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?l(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,l(1))},n?"entries":"values",!n,!0),h(e)}}},function(t,e,n){"use strict";var r=n(123),i=n(49);t.exports=n(65)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},function(t,e,n){"use strict";var r,i=n(27)(0),o=n(12),a=n(31),s=n(104),u=n(126),c=n(4),l=n(3),h=n(49),f=a.getWeak,p=Object.isExtensible,d=u.ufstore,y={},v=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},g={get:function(t){if(c(t)){var e=f(t);return!0===e?d(h(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return u.def(h(this,"WeakMap"),t,e)}},m=t.exports=n(65)("WeakMap",v,g,u,!0,!0);l(function(){return 7!=(new m).set((Object.freeze||Object)(y),7).get(y)})&&(s((r=u.getConstructor(v,"WeakMap")).prototype,g),a.NEED=!0,i(["delete","has","get","set"],function(t){var e=m.prototype,n=e[t];o(e,t,function(e,i){if(c(e)&&!p(e)){this._f||(this._f=new r);var o=this._f[t](e,i);return"set"==t?this:o}return n.call(this,e,i)})}))},function(t,e,n){"use strict";var r=n(43),i=n(31).getWeak,o=n(1),a=n(4),s=n(41),u=n(42),c=n(27),l=n(15),h=n(49),f=c(5),p=c(6),d=0,y=function(t){return t._l||(t._l=new v)},v=function(){this.a=[]},g=function(t,e){return f(t.a,function(t){return t[0]===e})};v.prototype={get:function(t){var e=g(this,t);if(e)return e[1]},has:function(t){return!!g(this,t)},set:function(t,e){var n=g(this,t);n?n[1]=e:this.a.push([t,e])},delete:function(t){var e=p(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,o){var c=t(function(t,r){s(t,c,e,"_i"),t._t=e,t._i=d++,t._l=void 0,null!=r&&u(r,n,t[o],t)});return r(c.prototype,{delete:function(t){if(!a(t))return!1;var n=i(t);return!0===n?y(h(this,e)).delete(t):n&&l(n,this._i)&&delete n[this._i]},has:function(t){if(!a(t))return!1;var n=i(t);return!0===n?y(h(this,e)).has(t):n&&l(n,this._i)}}),c},def:function(t,e,n){var r=i(o(e),!0);return!0===r?y(t).set(e,n):r[t._i]=n,t},ufstore:y}},function(t,e,n){var r=n(22),i=n(6);t.exports=function(t){if(void 0===t)return 0;var e=r(t),n=i(e);if(e!==n)throw RangeError("Wrong length!");return n}},function(t,e,n){var r=n(39),i=n(57),o=n(1),a=n(2).Reflect;t.exports=a&&a.ownKeys||function(t){var e=r.f(o(t)),n=i.f;return n?e.concat(n(t)):e}},function(t,e,n){"use strict";var r=n(58),i=n(4),o=n(6),a=n(20),s=n(5)("isConcatSpreadable");t.exports=function t(e,n,u,c,l,h,f,p){for(var d,y,v=l,g=0,m=!!f&&a(f,p,3);g<c;){if(g in u){if(d=m?m(u[g],g,n):u[g],y=!1,i(d)&&(y=void 0!==(y=d[s])?!!y:r(d)),y&&h>0)v=t(e,n,d,o(d.length),v,h-1)-1;else{if(v>=9007199254740991)throw TypeError();e[v]=d}v++}g++}return v}},function(t,e,n){var r=n(6),i=n(80),o=n(25);t.exports=function(t,e,n,a){var s=String(o(t)),u=s.length,c=void 0===n?" ":String(n),l=r(e);if(l<=u||""==c)return s;var h=l-u,f=i.call(c,Math.ceil(h/c.length));return f.length>h&&(f=f.slice(0,h)),a?f+s:s+f}},function(t,e,n){var r=n(36),i=n(16),o=n(52).f;t.exports=function(t){return function(e){for(var n,a=i(e),s=r(a),u=s.length,c=0,l=[];u>c;)o.call(a,n=s[c++])&&l.push(t?[n,a[n]]:a[n]);return l}}},function(t,e,n){var r=n(46),i=n(133);t.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},function(t,e,n){var r=n(42);t.exports=function(t,e){var n=[];return r(t,!1,n.push,n,e),n}},function(t,e){t.exports=Math.scale||function(t,e,n,r,i){return 0===arguments.length||t!=t||e!=e||n!=n||r!=r||i!=i?NaN:t===1/0||t===-1/0?t:(t-e)*(i-r)/(n-e)+r}},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,c=[],l=!1,h=-1;function f(){l&&u&&(l=!1,u.length?c=u.concat(c):h=-1,c.length&&p())}function p(){if(!l){var t=s(f);l=!0;for(var e=c.length;e;){for(u=c,c=[];++h<e;)u&&u[h].run();h=-1,e=c.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function y(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new d(t,e)),1!==c.length||l||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(137),i=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o="[DEFAULT]",a=[],s=function(){function t(t,e,n){this.firebase_=n,this.isDeleted_=!1,this.services_={},this.name_=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled||!1,this.options_=r.deepCopy(t),this.INTERNAL={getUid:function(){return null},getToken:function(){return Promise.resolve(null)},addAuthTokenListener:function(t){a.push(t),setTimeout(function(){return t(null)},0)},removeAuthTokenListener:function(t){a=a.filter(function(e){return e!==t})}}}return Object.defineProperty(t.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this._automaticDataCollectionEnabled},set:function(t){this.checkDestroyed_(),this._automaticDataCollectionEnabled=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!0,configurable:!0}),t.prototype.delete=function(){var t=this;return new Promise(function(e){t.checkDestroyed_(),e()}).then(function(){t.firebase_.INTERNAL.removeApp(t.name_);var e=[];return Object.keys(t.services_).forEach(function(n){Object.keys(t.services_[n]).forEach(function(r){e.push(t.services_[n][r])})}),Promise.all(e.map(function(t){return t.INTERNAL.delete()}))}).then(function(){t.isDeleted_=!0,t.services_={}})},t.prototype._getService=function(t,e){if(void 0===e&&(e=o),this.checkDestroyed_(),this.services_[t]||(this.services_[t]={}),!this.services_[t][e]){var n=e!==o?e:void 0,r=this.firebase_.INTERNAL.factories[t](this,this.extendApp.bind(this),n);this.services_[t][e]=r}return this.services_[t][e]},t.prototype.extendApp=function(t){var e=this;r.deepExtend(this,t),t.INTERNAL&&t.INTERNAL.addAuthTokenListener&&(a.forEach(function(t){e.INTERNAL.addAuthTokenListener(t)}),a=[])},t.prototype.checkDestroyed_=function(){this.isDeleted_&&u("app-deleted",{name:this.name_})},t}();function u(t,e){throw c.create(t,e)}s.prototype.name&&s.prototype.options||s.prototype.delete||console.log("dc");var c=new r.ErrorFactory("app","Firebase",{"no-app":"No Firebase App '{$name}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$name}","duplicate-app":"Firebase App named '{$name}' already exists","app-deleted":"Firebase App named '{$name}' already deleted","duplicate-service":"Firebase service named '{$name}' already registered","sa-not-supported":"Initializing the Firebase SDK with a service account is only allowed in a Node.js environment. On client devices, you should instead initialize the SDK with an api key and auth domain","invalid-app-argument":"firebase.{$name}() takes either no argument or a Firebase App instance."}),l=function t(){var e={},n={},a={},c={__esModule:!0,initializeApp:function(t,n){if(void 0===n&&(n={}),"object"!=typeof n||null===n){var r=n;n={name:r}}var a=n;void 0===a.name&&(a.name=o);var l=a.name;"string"==typeof l&&l||u("bad-app-name",{name:l+""}),i(e,l)&&u("duplicate-app",{name:l});var h=new s(t,a,c);return e[l]=h,f(h,"create"),h},app:l,apps:null,Promise:Promise,SDK_VERSION:"5.5.9",INTERNAL:{registerService:function(t,e,i,o,f){n[t]&&u("duplicate-service",{name:t}),n[t]=e,o&&(a[t]=o,h().forEach(function(t){o("create",t)}));var p=function(e){return void 0===e&&(e=l()),"function"!=typeof e[t]&&u("invalid-app-argument",{name:t}),e[t]()};return void 0!==i&&r.deepExtend(p,i),c[t]=p,s.prototype[t]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return this._getService.bind(this,t).apply(this,f?e:[])},p},createFirebaseNamespace:t,extendNamespace:function(t){r.deepExtend(c,t)},createSubscribe:r.createSubscribe,ErrorFactory:r.ErrorFactory,removeApp:function(t){f(e[t],"delete"),delete e[t]},factories:n,useAsService:p,Promise:Promise,deepExtend:r.deepExtend}};function l(t){return i(e,t=t||o)||u("no-app",{name:t}),e[t]}function h(){return Object.keys(e).map(function(t){return e[t]})}function f(t,e){Object.keys(n).forEach(function(n){var r=p(t,n);null!==r&&a[r]&&a[r](e,t)})}function p(t,e){if("serverAuth"===e)return null;var n=e;return t.options,n}return r.patchProperty(c,"default",c),Object.defineProperty(c,"apps",{get:h}),r.patchProperty(l,"App",s),c}();e.firebase=l,e.default=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(379),i={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},o=function(t,e){if(!t)throw a(e)},a=function(t){return new Error("Firebase Database ("+i.SDK_VERSION+") INTERNAL ASSERT FAILED: "+t)},s=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):55296==(64512&i)&&r+1<t.length&&56320==(64512&t.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&t.charCodeAt(++r)),e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e},u={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],i=0;i<t.length;i+=3){var o=t[i],a=i+1<t.length,s=a?t[i+1]:0,u=i+2<t.length,c=u?t[i+2]:0,l=o>>2,h=(3&o)<<4|s>>4,f=(15&s)<<2|c>>6,p=63&c;u||(p=64,a||(f=64)),r.push(n[l],n[h],n[f],n[p])}return r.join("")},encodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(s(t),e)},decodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){for(var e=[],n=0,r=0;n<t.length;){var i=t[n++];if(i<128)e[r++]=String.fromCharCode(i);else if(i>191&&i<224){var o=t[n++];e[r++]=String.fromCharCode((31&i)<<6|63&o)}else if(i>239&&i<365){var a=((7&i)<<18|(63&(o=t[n++]))<<12|(63&(s=t[n++]))<<6|63&t[n++])-65536;e[r++]=String.fromCharCode(55296+(a>>10)),e[r++]=String.fromCharCode(56320+(1023&a))}else{o=t[n++];var s=t[n++];e[r++]=String.fromCharCode((15&i)<<12|(63&o)<<6|63&s)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray:function(t,e){this.init_();for(var n=e?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],i=0;i<t.length;){var o=n[t.charAt(i++)],a=i<t.length?n[t.charAt(i)]:0,s=++i<t.length?n[t.charAt(i)]:64,u=++i<t.length?n[t.charAt(i)]:64;if(++i,null==o||null==a||null==s||null==u)throw Error();var c=o<<2|a>>4;if(r.push(c),64!=s){var l=a<<4&240|s>>2;if(r.push(l),64!=u){var h=s<<6&192|u;r.push(h)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}},c=function(t){try{return u.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};function l(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(var n in e)e.hasOwnProperty(n)&&(t[n]=l(t[n],e[n]));return t}var h=function(){function t(){var t=this;this.promise=new Promise(function(e,n){t.resolve=e,t.reject=n})}return t.prototype.wrapCallback=function(t){var e=this;return function(n,r){n?e.reject(n):e.resolve(r),"function"==typeof t&&(e.promise.catch(function(){}),1===t.length?t(n):t(n,r))}},t}(),f=function(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""},p="FirebaseError",d=Error.captureStackTrace;var y=function(){return function(t,e){if(this.code=t,this.message=e,d)d(this,v.prototype.create);else try{throw Error.apply(this,arguments)}catch(t){this.name=p,Object.defineProperty(this,"stack",{get:function(){return t.stack}})}}}();y.prototype=Object.create(Error.prototype),y.prototype.constructor=y,y.prototype.name=p;var v=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n,this.pattern=/\{\$([^}]+)}/g}return t.prototype.create=function(t,e){void 0===e&&(e={});var n,r=this.errors[t],i=this.service+"/"+t;n=void 0===r?"Error":r.replace(this.pattern,function(t,n){var r=e[n];return void 0!==r?r.toString():"<"+n+"?>"}),n=this.serviceName+": "+n+" ("+i+").";var o=new y(i,n);for(var a in e)e.hasOwnProperty(a)&&"_"!==a.slice(-1)&&(o[a]=e[a]);return o},t}();function g(t){return JSON.parse(t)}var m=function(t){var e={},n={},r={},i="";try{var o=t.split(".");e=g(c(o[0])||""),n=g(c(o[1])||""),i=o[2],r=n.d||{},delete n.d}catch(t){}return{header:e,claims:n,data:r,signature:i}},_=function(t,e){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])},b=function(t,e){return _(e,function(e,n){t[e]=n}),t},w=function(t,e,n){for(var r in t)if(e.call(n,t[r],r,t))return r},E=function(t){function e(){var e=t.call(this)||this;e.chain_=[],e.buf_=[],e.W_=[],e.pad_=[],e.inbuf_=0,e.total_=0,e.blockSize=64,e.pad_[0]=128;for(var n=1;n<e.blockSize;++n)e.pad_[n]=0;return e.reset(),e}return r.__extends(e,t),e.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},e.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var r=0;r<16;r++)n[r]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(r=0;r<16;r++)n[r]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,a,s=this.chain_[0],u=this.chain_[1],c=this.chain_[2],l=this.chain_[3],h=this.chain_[4];for(r=0;r<80;r++){r<40?r<20?(o=l^u&(c^l),a=1518500249):(o=u^c^l,a=1859775393):r<60?(o=u&c|l&(u|c),a=2400959708):(o=u^c^l,a=3395469782);i=(s<<5|s>>>27)+o+h+a+n[r]&4294967295;h=l,l=c,c=4294967295&(u<<30|u>>>2),u=s,s=i}this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+l&4294967295,this.chain_[4]=this.chain_[4]+h&4294967295},e.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<e;){if(0==o)for(;r<=n;)this.compress_(t,r),r+=this.blockSize;if("string"==typeof t){for(;r<e;)if(i[o]=t.charCodeAt(r),++r,++o==this.blockSize){this.compress_(i),o=0;break}}else for(;r<e;)if(i[o]=t[r],++r,++o==this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=e}},e.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)t[r]=this.chain_[n]>>i&255,++r;return t},e}(function(){return function(){this.blockSize=-1}}());var S=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then(function(){t(n)}).catch(function(t){n.error(t)})}return t.prototype.next=function(t){this.forEachObserver(function(e){e.next(t)})},t.prototype.error=function(t){this.forEachObserver(function(e){e.error(t)}),this.close(t)},t.prototype.complete=function(){this.forEachObserver(function(t){t.complete()}),this.close()},t.prototype.subscribe=function(t,e,n){var r,i=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=0,r=e;n<r.length;n++){var i=r[n];if(i in t&&"function"==typeof t[i])return!0}return!1}(t,["next","error","complete"])?t:{next:t,error:e,complete:n}).next&&(r.next=C),void 0===r.error&&(r.error=C),void 0===r.complete&&(r.complete=C);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then(function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(t){}}),this.observers.push(r),o},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then(function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}})},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then(function(){e.observers=void 0,e.onNoObservers=void 0}))},t}();function C(){}function x(t,e,n){var r="";switch(e){case 1:r=n?"first":"First";break;case 2:r=n?"second":"Second";break;case 3:r=n?"third":"Third";break;case 4:r=n?"fourth":"Fourth";break;default:throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}var i=t+" failed: ";return i+=r+" argument "}e.assert=o,e.assertionError=a,e.base64=u,e.base64Decode=c,e.base64Encode=function(t){var e=s(t);return u.encodeByteArray(e,!0)},e.CONSTANTS=i,e.deepCopy=function(t){return l(void 0,t)},e.deepExtend=l,e.patchProperty=function(t,e,n){t[e]=n},e.Deferred=h,e.getUA=f,e.isMobileCordova=function(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(f())},e.isNodeSdk=function(){return!0===i.NODE_CLIENT||!0===i.NODE_ADMIN},e.isReactNative=function(){return"object"==typeof navigator&&"ReactNative"===navigator.product},e.ErrorFactory=v,e.FirebaseError=y,e.patchCapture=function(t){var e=d;return d=t,e},e.jsonEval=g,e.stringify=function(t){return JSON.stringify(t)},e.decode=m,e.isAdmin=function(t){var e=m(t).claims;return"object"==typeof e&&!0===e.admin},e.issuedAtTime=function(t){var e=m(t).claims;return"object"==typeof e&&e.hasOwnProperty("iat")?e.iat:null},e.isValidFormat=function(t){var e=m(t).claims;return!!e&&"object"==typeof e&&e.hasOwnProperty("iat")},e.isValidTimestamp=function(t){var e,n,r=m(t).claims,i=Math.floor((new Date).getTime()/1e3);return"object"==typeof r&&(r.hasOwnProperty("nbf")?e=r.nbf:r.hasOwnProperty("iat")&&(e=r.iat),n=r.hasOwnProperty("exp")?r.exp:e+86400),i&&e&&n&&i>=e&&i<=n},e.clone=function(t){return b({},t)},e.contains=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.every=function(t,e){for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&!e(n,t[n]))return!1;return!0},e.extend=b,e.findKey=w,e.findValue=function(t,e,n){var r=w(t,e,n);return r&&t[r]},e.forEach=_,e.getAnyKey=function(t){for(var e in t)return e},e.getCount=function(t){var e=0;for(var n in t)e++;return e},e.getValues=function(t){var e=[],n=0;for(var r in t)e[n++]=t[r];return e},e.isEmpty=function(t){for(var e in t)return!1;return!0},e.isNonNullObject=function(t){return"object"==typeof t&&null!==t},e.map=function(t,e,n){var r={};for(var i in t)r[i]=e.call(n,t[i],i,t);return r},e.safeGet=function(t,e){if(Object.prototype.hasOwnProperty.call(t,e))return t[e]},e.querystring=function(t){var e=[];return _(t,function(t,n){Array.isArray(n)?n.forEach(function(n){e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))}):e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))}),e.length?"&"+e.join("&"):""},e.querystringDecode=function(t){var e={};return t.replace(/^\?/,"").split("&").forEach(function(t){if(t){var n=t.split("=");e[n[0]]=n[1]}}),e},e.Sha1=E,e.async=function(t,e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Promise.resolve(!0).then(function(){t.apply(void 0,n)}).catch(function(t){e&&e(t)})}},e.createSubscribe=function(t,e){var n=new S(t,e);return n.subscribe.bind(n)},e.errorPrefix=x,e.validateArgCount=function(t,e,n,r){var i;if(r<e?i="at least "+e:r>n&&(i=0===n?"none":"no more than "+n),i)throw new Error(t+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+i+".")},e.validateCallback=function(t,e,n,r){if((!r||n)&&"function"!=typeof n)throw new Error(x(t,e,r)+"must be a valid function.")},e.validateContextObject=function(t,e,n,r){if((!r||n)&&("object"!=typeof n||null===n))throw new Error(x(t,e,r)+"must be a valid context object.")},e.validateNamespace=function(t,e,n,r){if((!r||n)&&"string"!=typeof n)throw new Error(x(t,e,r)+"must be a valid firebase namespace.")},e.stringLength=function(t){for(var e=0,n=0;n<t.length;n++){var r=t.charCodeAt(n);r<128?e++:r<2048?e+=2:r>=55296&&r<=56319?(e+=4,n++):e+=3}return e},e.stringToByteArray=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);if(i>=55296&&i<=56319){var a=i-55296;o(++r<t.length,"Surrogate pair missing trail surrogate."),i=65536+(a<<10)+(t.charCodeAt(r)-56320)}i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):i<65536?(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e}},function(t,e,n){t.exports=n.p+"images/879d23250d98bc7c4b0fae6b8f1556c3-landing_page_wizzard.png"},function(t,e,n){t.exports=n.p+"images/9e3fdc969d8d61163f21c51d8bb951c2-screenshot1.png"},function(t,e,n){t.exports=n.p+"images/7a465fa12eb289991a891ce6500ec668-screenshot2.png"},function(t,e,n){t.exports=n.p+"images/afb736f435fd4eccc8896c1408660a02-screenshot3.png"},function(t,e,n){t.exports=n.p+"images/d7593dd2654a7b38a7cb7ed8d5b21272-screenshot4.png"},function(t,e,n){t.exports=n.p+"images/3e60f9aca362b08e492856f4cc0db335-wizard_sprite.png"},function(t,e,n){t.exports=n.p+"images/f88f5072979dcfdfe83d60374ce46dd3-minotaur_sprite.png"},function(t,e,n){t.exports=n.p+"images/80db3ceb84d6028c5383d387be7deb57-skull.png"},function(t,e,n){t.exports=n.p+"images/3d5d266bab160bb5df9989a3a57b99d1-chest.png"},function(t,e,n){t.exports=n.p+"sounds/2e8e48b3ccb8c1c5acf66da3533cb8fe-john_maus_-_believer_minimized.mp3"},function(t,e,n){t.exports=n.p+"sounds/0502bf4e41d1e7dddcd6fdec8a95a39e-wizzard_attack.wav"},function(t,e,n){t.exports=n.p+"sounds/c42bc872f9fdd0acab5a4ef7235d9a4c-wizzard_heal.wav"},function(t,e,n){t.exports=n.p+"sounds/9e6b155a917246d66c51fc9c0e69d785-monster_attack.wav"},function(t,e,n){t.exports=n.p+"sounds/1700bfcd0915febe13c8ab4967ce71af-monster_death.wav"},function(t,e,n){t.exports=n.p+"sounds/c026dd3601410b923608e31969bbe7da-wizzard_death.wav"},function(t,e,n){var r,i;
/**!
 * Sortable
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
/**!
 * Sortable
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
!function(o){"use strict";void 0===(i="function"==typeof(r=o)?r.call(e,n,e,t):r)||(t.exports=i)}(function(){"use strict";if("undefined"==typeof window||!window.document)return function(){throw new Error("Sortable.js requires a window with a document")};var t,e,n,r,i,o,a,s,u,c,l,h,f,p,d,y,v,g,m,_,b,w,E,S,C,x=[],T=!1,k=!1,P=!1,O=/\s+/g,I="Sortable"+(new Date).getTime(),A=window,N=A.document,R=A.parseInt,D=A.setTimeout,F=A.jQuery||A.Zepto,M=A.Polymer,L={capture:!1,passive:!1},j="draggable"in N.createElement("div"),q=!navigator.userAgent.match(/(?:Trident.*rv[ :]?11\.|msie)/i)&&((S=N.createElement("x")).style.cssText="pointer-events:auto","auto"===S.style.pointerEvents),W=!1,U=!1,B=Math.abs,H=Math.min,V=[],Q=[],z=function(t,e){var n=it(t),r=R(n.width),i=lt(t,0,e),o=lt(t,1,e),a=i&&it(i),s=o&&it(o),u=a&&R(a.marginLeft)+R(a.marginRight)+i.getBoundingClientRect().width,c=s&&R(s.marginLeft)+R(s.marginRight)+o.getBoundingClientRect().width;return"flex"===n.display?"column"===n.flexDirection||"column-reverse"===n.flexDirection?"vertical":"horizontal":i&&("block"===a.display||"grid"===a.display||u>=r&&"none"===n.float||o&&"none"===n.float&&u+c>r)?"vertical":"horizontal"},Y=function(t,e){if(!t||!t.getBoundingClientRect)return A;var n=t,r=!1;do{if(n.clientWidth<n.scrollWidth||n.clientHeight<n.scrollHeight){var i=it(n);if(n.clientWidth<n.scrollWidth&&("auto"==i.overflowX||"scroll"==i.overflowX)||n.clientHeight<n.scrollHeight&&("auto"==i.overflowY||"scroll"==i.overflowY)){if(!n||!n.getBoundingClientRect||n===N.body)return A;if(r||e)return n;r=!0}}}while(n=n.parentNode);return A},G=yt(function(t,e,n,r){if(e.scroll){var i,o,a,l,h=n?n[I]:window,f=e.scrollSensitivity,p=e.scrollSpeed,d=t.clientX,y=t.clientY,v=window.innerWidth,g=window.innerHeight,_=!1;u!==n&&(K(),s=e.scroll,c=e.scrollFn,!0===s&&(s=Y(n,!0),u=s));var b=0,w=s;do{var E;if(w&&w!==A?(o=it(E=w),i=w.getBoundingClientRect(),a=E.clientWidth<E.scrollWidth&&("auto"==o.overflowX||"scroll"==o.overflowX)&&(B(i.right-d)<=f)-(B(i.left-d)<=f),l=E.clientHeight<E.scrollHeight&&("auto"==o.overflowY||"scroll"==o.overflowY)&&(B(i.bottom-y)<=f)-(B(i.top-y)<=f)):w===A&&(E=A,a=(v-d<=f)-(d<=f),l=(g-y<=f)-(y<=f)),!x[b])for(var S=0;S<=b;S++)x[S]||(x[S]={});x[b].vx==a&&x[b].vy==l&&x[b].el===E||(x[b].el=E,x[b].vx=a,x[b].vy=l,clearInterval(x[b].pid),!E||0==a&&0==l||(_=!0,x[b].pid=setInterval(function(){r&&0===this.layer&&J.active._emulateDragOver(!0);var e=x[this.layer].vy?x[this.layer].vy*p:0,n=x[this.layer].vx?x[this.layer].vx*p:0;"function"==typeof c&&"continue"!==c.call(h,n,e,t,m,x[this.layer].el)||(x[this.layer].el===A?A.scrollTo(A.pageXOffset+n,A.pageYOffset+e):(x[this.layer].el.scrollTop+=e,x[this.layer].el.scrollLeft+=n))}.bind({layer:b}),24))),b++}while(e.bubbleScroll&&w!==A&&(w=Y(w,!1)));T=_}},30),K=function(){x.forEach(function(t){clearInterval(t.pid)}),x=[]},X=function(t){function e(t,e){return function(n,r,i,o){var a;if(null==t&&e)a=!0;else if(null==t||!1===t)a=!1;else if(e&&"clone"===t)a=t;else if("function"==typeof t)a=t(n,r,i,o);else{var s=(e?n:r).options.group.name;a=!0===t||"string"==typeof t&&t===s||t.join&&t.indexOf(s)>-1}return a||n.options.group.name&&r.options.group.name&&n.options.group.name===r.options.group.name}}var n={},r=t.group;r&&"object"==typeof r||(r={name:r}),n.name=r.name,n.checkPull=e(r.pull,!0),n.checkPut=e(r.put),n.revertClone=r.revertClone,t.group=n},$=function(e){t&&t.parentNode[I]&&t.parentNode[I]._computeIsAligned(e)};function J(t,e){if(!t||!t.nodeType||1!==t.nodeType)throw"Sortable: `el` must be HTMLElement, and not "+{}.toString.call(t);this.el=t,this.options=e=vt({},e),t[I]=this;var n={group:null,sort:!0,disabled:!1,store:null,handle:null,scroll:!0,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0,draggable:/[uo]l/i.test(t.nodeName)?"li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,setData:function(t,e){t.setData("Text",e.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,touchStartThreshold:R(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:!1!==J.supportPointer&&("PointerEvent"in window||window.navigator&&"msPointerEnabled"in window.navigator)};for(var r in n)!(r in e)&&(e[r]=n[r]);for(var i in"direction"in e||(e.direction=function(){return z(t,e)}),X(e),null==e.invertedSwapThreshold&&(e.invertedSwapThreshold=e.swapThreshold),this)"_"===i.charAt(0)&&"function"==typeof this[i]&&(this[i]=this[i].bind(this));this.nativeDraggable=!e.forceFallback&&j,et(t,"mousedown",this._onTapStart),et(t,"touchstart",this._onTapStart),e.supportPointer&&et(t,"pointerdown",this._onTapStart),this.nativeDraggable&&(et(t,"dragover",this),et(t,"dragenter",this)),Q.push(this._onDragOver),e.store&&e.store.get&&this.sort(e.store.get(this)||[])}function Z(t,e,n,r){if(t){n=n||N;do{if(">*"===e&&t.parentNode===n||dt(t,e)||r&&t===n)return t;if(t===n)break}while(t=tt(t))}return null}function tt(t){return t.host&&t!==N&&t.host.nodeType?t.host:t.parentNode}function et(t,e,n){t.addEventListener(e,n,L)}function nt(t,e,n){t.removeEventListener(e,n,L)}function rt(t,e,n){if(t&&e)if(t.classList)t.classList[n?"add":"remove"](e);else{var r=(" "+t.className+" ").replace(O," ").replace(" "+e+" "," ");t.className=(r+(n?" "+e:"")).replace(O," ")}}function it(t,e,n){var r=t&&t.style;if(r){if(void 0===n)return N.defaultView&&N.defaultView.getComputedStyle?n=N.defaultView.getComputedStyle(t,""):t.currentStyle&&(n=t.currentStyle),void 0===e?n:n[e];e in r||(e="-webkit-"+e),r[e]=n+("string"==typeof n?"":"px")}}function ot(t,e,n){if(t){var r=t.getElementsByTagName(e),i=0,o=r.length;if(n)for(;i<o;i++)n(r[i],i);return r}return[]}function at(t,e,n,i,o,a,s,u,c){var l,h=(t=t||e[I]).options,f="on"+n.charAt(0).toUpperCase()+n.substr(1);window.CustomEvent?l=new CustomEvent(n,{bubbles:!0,cancelable:!0}):(l=N.createEvent("Event")).initEvent(n,!0,!0),l.to=o||e,l.from=a||e,l.item=i||e,l.clone=r,l.oldIndex=s,l.newIndex=u,l.originalEvent=c,e.dispatchEvent(l),h[f]&&h[f].call(t,l)}function st(t,e,n,r,i,o,a,s){var u,c,l=t[I],h=l.options.onMove;return window.CustomEvent?u=new CustomEvent("move",{bubbles:!0,cancelable:!0}):(u=N.createEvent("Event")).initEvent("move",!0,!0),u.to=e,u.from=t,u.dragged=n,u.draggedRect=r,u.related=i||e,u.relatedRect=o||e.getBoundingClientRect(),u.willInsertAfter=s,u.originalEvent=a,t.dispatchEvent(u),h&&(c=h.call(l,u,a)),c}function ut(t){t.draggable=!1}function ct(){W=!1}function lt(e,r,i){for(var o=0,a=0,s=e.children;a<s.length;){if("none"!==s[a].style.display&&s[a]!==n&&s[a]!==t&&Z(s[a],i.draggable,e,!1)){if(o===r)return s[a];o++}a++}return null}function ht(t){var e=t.lastElementChild;return e===n&&(e=t.children[t.childElementCount-2]),e||null}function ft(t){for(var e=t.tagName+t.className+t.src+t.href+t.textContent,n=e.length,r=0;n--;)r+=e.charCodeAt(n);return r.toString(36)}function pt(t,e){var n=0;if(!t||!t.parentNode)return-1;for(;t&&(t=t.previousElementSibling);)"TEMPLATE"===t.nodeName.toUpperCase()||">*"!==e&&!dt(t,e)||n++;return n}function dt(t,e){if(t)try{if(t.matches)return t.matches(e);if(t.msMatchesSelector)return t.msMatchesSelector(e)}catch(t){return!1}return!1}function yt(t,e){return function(){if(!C){var n=arguments,r=this;C=D(function(){1===n.length?t.call(r,n[0]):t.apply(r,n),C=void 0},e)}}}function vt(t,e){if(t&&e)for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}function gt(t){return M&&M.dom?M.dom(t).cloneNode(!0):F?F(t).clone(!0)[0]:t.cloneNode(!0)}function mt(t){return D(t,0)}function _t(t){return clearTimeout(t)}function bt(t){J.active&&t.cancelable&&t.preventDefault()}return J.prototype={constructor:J,_isAligned:!0,_computeIsAligned:function(e,n){var r,i,o,a,s,u,c;U||t&&t.parentNode===this.el&&(!0!==n&&!1!==n&&(n=!!Z(e.target,null,t,!0)),this._isAligned=!T&&(n||this._isAligned&&(r=e.clientX,i=e.clientY,this.el,o=this._getDirection(e,null),this.options,a=E||t.getBoundingClientRect(),s="vertical"===o?a.left:a.top,u="vertical"===o?a.right:a.bottom,s<(c="vertical"===o?r:i)&&c<u)),U=!0,D(function(){U=!1},30))},_getDirection:function(e,n){return"function"==typeof this.options.direction?this.options.direction.call(this,e,n,t):this.options.direction},_onTapStart:function(e){var n,r=this,i=this.el,o=this.options,s=o.preventOnFilter,u=e.type,c=e.touches&&e.touches[0],l=(c||e).target,h=e.target.shadowRoot&&(e.path&&e.path[0]||e.composedPath&&e.composedPath()[0])||l,f=o.filter;if(function(t){V.length=0;var e=t.getElementsByTagName("input"),n=e.length;for(;n--;){var r=e[n];r.checked&&V.push(r)}}(i),!t&&!(/mousedown|pointerdown/.test(u)&&0!==e.button||o.disabled)&&!h.isContentEditable&&(l=Z(l,o.draggable,i,!0))&&a!==l){if(n=pt(l,o.draggable),"function"==typeof f){if(f.call(this,e,l,this))return at(r,h,"filter",l,i,i,n),void(s&&e.cancelable&&e.preventDefault())}else if(f&&(f=f.split(",").some(function(t){if(t=Z(h,t.trim(),i,!1))return at(r,t,"filter",l,i,i,n),!0})))return void(s&&e.cancelable&&e.preventDefault());o.handle&&!Z(h,o.handle,i,!1)||this._prepareDragStart(e,c,l,n)}},_handleAutoScroll:function(e,n){if(t&&this.options.scroll){var r=e.clientX,i=e.clientY,o=N.elementFromPoint(r,i),a=this;if(n||window.navigator&&window.navigator.userAgent.toLowerCase().indexOf("firefox")>-1){G(e,a.options,o,!0);var s=Y(o,!0);!T||d&&r===y&&i===v||(d&&clearInterval(d),d=setInterval(function(){if(t){var n=Y(N.elementFromPoint(r,i),!0);n!==s&&(s=n,K(),G(e,a.options,s,!0))}},10),y=r,v=i)}else{if(!a.options.bubbleScroll||Y(o,!0)===window)return void K();G(e,a.options,Y(o,!1))}}},_prepareDragStart:function(n,r,s,u){var c,h=this,p=h.el,d=h.options,y=p.ownerDocument;s&&!t&&s.parentNode===p&&(g=n,i=p,e=(t=s).parentNode,o=t.nextSibling,a=s,f=d.group,l=u,this._lastX=(r||n).clientX,this._lastY=(r||n).clientY,t.style["will-change"]="all",c=function(){h._disableDelayedDrag(),t.draggable=h.nativeDraggable,h._triggerDragStart(n,r),at(h,i,"choose",t,i,i,l),rt(t,d.chosenClass,!0)},d.ignore.split(",").forEach(function(e){ot(t,e.trim(),ut)}),et(y,"mouseup",h._onDrop),et(y,"touchend",h._onDrop),et(y,"touchcancel",h._onDrop),d.supportPointer&&et(y,"pointercancel",h._onDrop),d.delay?(et(y,"mouseup",h._disableDelayedDrag),et(y,"touchend",h._disableDelayedDrag),et(y,"touchcancel",h._disableDelayedDrag),et(y,"mousemove",h._delayedDragTouchMoveHandler),et(y,"touchmove",h._delayedDragTouchMoveHandler),d.supportPointer&&et(y,"pointermove",h._delayedDragTouchMoveHandler),h._dragStartTimer=D(c.bind(h),d.delay)):c())},_delayedDragTouchMoveHandler:function(t){var e=t.touches?t.touches[0]:t;H(B(e.clientX-this._lastX),B(e.clientY-this._lastY))>=this.options.touchStartThreshold&&this._disableDelayedDrag()},_disableDelayedDrag:function(){var t=this.el.ownerDocument;clearTimeout(this._dragStartTimer),nt(t,"mouseup",this._disableDelayedDrag),nt(t,"touchend",this._disableDelayedDrag),nt(t,"touchcancel",this._disableDelayedDrag),nt(t,"mousemove",this._delayedDragTouchMoveHandler),nt(t,"touchmove",this._delayedDragTouchMoveHandler),nt(t,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(e,n){(n=n||("touch"==e.pointerType?e:null))?(g={target:t,clientX:n.clientX,clientY:n.clientY},this._onDragStart(g,"touch")):this.nativeDraggable?(et(t,"dragend",this),et(i,"dragstart",this._onDragStart)):this._onDragStart(g,!0);try{N.selection?mt(function(){N.selection.empty()}):window.getSelection().removeAllRanges()}catch(t){}},_dragStarted:function(){if(i&&t){this.nativeDraggable&&(et(N,"dragover",this._handleAutoScroll),et(N,"dragover",$));var e=this.options;rt(t,e.dragClass,!1),rt(t,e.ghostClass,!0),it(t,"transform",""),J.active=this,this._isAligned=!0,at(this,i,"start",t,i,i,l)}else this._nulling()},_emulateDragOver:function(e){if(m){if(this._lastX===m.clientX&&this._lastY===m.clientY&&!e)return;this._lastX=m.clientX,this._lastY=m.clientY,q||it(n,"display","none");for(var r=N.elementFromPoint(m.clientX,m.clientY),i=r,o=!!Z(r,null,t,!0);r&&r.shadowRoot;)i=r=r.shadowRoot.elementFromPoint(m.clientX,m.clientY);if(i)do{if(i[I]){for(var a=Q.length;a--;)Q[a]({clientX:m.clientX,clientY:m.clientY,target:r,rootEl:i});if(!this.options.dragoverBubble)break}r=i}while(i=i.parentNode);t.parentNode[I]._computeIsAligned(m,o),q||it(n,"display","")}},_onTouchMove:function(t){if(g){var e=this.options,r=e.fallbackTolerance,i=e.fallbackOffset,o=t.touches?t.touches[0]:t,a=o.clientX-g.clientX+i.x,s=o.clientY-g.clientY+i.y,u=t.touches?"translate3d("+a+"px,"+s+"px,0)":"translate("+a+"px,"+s+"px)";if(this.options.supportPointer&&"touchmove"===t.type)return;if(!J.active){if(r&&H(B(o.clientX-this._lastX),B(o.clientY-this._lastY))<r)return;this._dragStarted()}this._appendGhost(),this._handleAutoScroll(o,!0),_=!0,m=o,it(n,"webkitTransform",u),it(n,"mozTransform",u),it(n,"msTransform",u),it(n,"transform",u),t.cancelable&&t.preventDefault()}},_appendGhost:function(){if(!n){var e,r=t.getBoundingClientRect(),o=it(t),a=this.options;rt(n=t.cloneNode(!0),a.ghostClass,!1),rt(n,a.fallbackClass,!0),rt(n,a.dragClass,!0),it(n,"top",r.top-R(o.marginTop,10)),it(n,"left",r.left-R(o.marginLeft,10)),it(n,"width",r.width),it(n,"height",r.height),it(n,"opacity","0.8"),it(n,"position","fixed"),it(n,"zIndex","100000"),it(n,"pointerEvents","none"),a.fallbackOnBody&&N.body.appendChild(n)||i.appendChild(n),e=n.getBoundingClientRect(),it(n,"width",2*r.width-e.width),it(n,"height",2*r.height-e.height)}},_onDragStart:function(e,n){var o=this,a=e.dataTransfer,s=o.options;o._offUpEvents(),f.checkPull(o,o,t,e)&&((r=gt(t)).draggable=!1,r.style["will-change"]="",this._hideClone(),rt(r,o.options.chosenClass,!1),o._cloneId=mt(function(){i.insertBefore(r,t),at(o,i,"clone",t)})),rt(t,s.dragClass,!0),n?("touch"===n?(et(N,"touchmove",bt),et(N,"touchmove",o._onTouchMove),et(N,"touchend",o._onDrop),et(N,"touchcancel",o._onDrop),s.supportPointer&&(et(N,"pointermove",o._onTouchMove),et(N,"pointerup",o._onDrop))):(et(N,"mousemove",o._onTouchMove),et(N,"mouseup",o._onDrop)),o._loopId=setInterval(o._emulateDragOver,50),rt(t,s.dragClass,!1)):(a&&(a.effectAllowed="move",s.setData&&s.setData.call(o,a,t)),et(N,"drop",o),it(t,"transform","translateZ(0)"),o._dragStartId=mt(o._dragStarted)),et(N,"selectstart",o)},_onDragOver:function(a){var s,u,c,l,h=this.el,d=this.options,y=d.group,v=J.active,g=f===y,m=d.sort;if((void 0===a.rootEl||a.rootEl===this.el)&&(d.dragoverBubble||a.rootEl||(this._handleAutoScroll(a),t.parentNode[I]._computeIsAligned(a)),void 0!==a.preventDefault&&(a.cancelable&&a.preventDefault(),!d.dragoverBubble&&a.stopPropagation()),_=!0,s=Z(a.target,d.draggable,h,!0),!(t.animated&&s===t||s.animated||W)&&(s!==b&&(P=!1,k=!1,b=null),v&&!d.disabled&&(g?m||(l=!i.contains(t)):p===this||(this.lastPutMode=f.checkPull(this,v,t,a))&&y.checkPut(this,v,t,a))))){var S,C=this._getDirection(a,s);if(u=t.getBoundingClientRect(),p!==this&&this!==J.active?(p=this,!0):this===J.active&&(!1,p=null),l)return this._hideClone(),e=i,void(r||o?i.insertBefore(t,r||o):m||i.appendChild(t));if(0===h.children.length||h.children[0]===n||h===a.target&&function(t,e,n){var r=ht(n).getBoundingClientRect(),i="vertical"===e?t.clientY:t.clientX,o="vertical"===e?t.clientX:t.clientY,a="vertical"===e?r.bottom:r.right,s="vertical"===e?r.left:r.top,u="vertical"===e?r.right:r.bottom;return o>s&&o<u&&i>a}(a,C,h)){if(0!==h.children.length&&h.children[0]!==n&&h===a.target&&(s=ht(h)),s){if(s.animated)return;c=s.getBoundingClientRect()}g?v._hideClone():v._showClone(this),!1!==st(i,h,t,u,s,c,a,!!s)&&(t.contains(h)||(h.appendChild(t),e=h,this._isAligned=!0,E=null),this._animate(u,t),s&&this._animate(c,s))}else if(s&&!s.animated&&s!==t&&void 0!==s.parentNode[I]&&s!==h){if(P=P||d.invertSwap||t.parentNode!==h||!this._isAligned,0===(S=function(e,n,r,i,o,a,s){var u=n.getBoundingClientRect(),c="vertical"===r?e.clientY:e.clientX,l="vertical"===r?u.height:u.width,h="vertical"===r?u.top:u.left,f="vertical"===r?u.bottom:u.right,p=t.getBoundingClientRect(),d="vertical"===r?p.height:p.width,y=!1,v=it(t);if(d+=R(v.marginLeft)+R(v.marginRight),!a)if(s&&d<l*i)if(!k&&(1===w?c>h+l*o/2:c<f-l*o/2)&&(k=!0),k)y=!0;else{"vertical"===r?p.top:p.left,"vertical"===r?p.bottom:p.right;if(1===w?c<h+d:c>f-d)return-1*w}else if(c>h+l*(1-i)/2&&c<f-l*(1-i)/2)return c>h+l/2?-1:1;if((y=y||a)&&(c<h+l*o/2||c>f-l*o/2))return c>h+l/2?1:-1;return 0}(a,s,C,d.swapThreshold,d.invertedSwapThreshold,P,b===s)))return;E=null,this._isAligned=!0,b&&(b===s||s&&s.animated)||(k=!1,b=s),w=S,c=s.getBoundingClientRect();var x=s.nextElementSibling,T=!1,O=st(i,h,t,u,s,c,a,T=1===S);!1!==O&&(1!==O&&-1!==O||(T=1===O),W=!0,D(ct,30),g?v._hideClone():v._showClone(this),t.contains(h)||(T&&!x?h.appendChild(t):s.parentNode.insertBefore(t,T?x:s)),e=t.parentNode,this._animate(u,t),this._animate(c,s))}}},_animate:function(e,n){var r=this.options.animation;if(r){var i=n.getBoundingClientRect();if(n===t&&(E=i),1===e.nodeType&&(e=e.getBoundingClientRect()),e.left+e.width/2===i.left+i.width/2&&e.top+e.height/2===i.top+i.height/2)return;it(n,"transition","none"),it(n,"transform","translate3d("+(e.left-i.left)+"px,"+(e.top-i.top)+"px,0)"),n.offsetWidth,it(n,"transition","all "+r+"ms"),it(n,"transform","translate3d(0,0,0)"),clearTimeout(n.animated),n.animated=D(function(){it(n,"transition",""),it(n,"transform",""),n.animated=!1},r)}},_offUpEvents:function(){var t=this.el.ownerDocument;nt(N,"touchmove",bt),nt(N,"touchmove",this._onTouchMove),nt(N,"pointermove",this._onTouchMove),nt(t,"mouseup",this._onDrop),nt(t,"touchend",this._onDrop),nt(t,"pointerup",this._onDrop),nt(t,"touchcancel",this._onDrop),nt(t,"pointercancel",this._onDrop),nt(N,"selectstart",this)},_onDrop:function(a){var s=this.el,u=this.options;T=!1,P=!1,k=!1,clearInterval(this._loopId),clearInterval(d),K(),clearTimeout(C),C=void 0,clearTimeout(this._dragStartTimer),_t(this._cloneId),_t(this._dragStartId),nt(N,"mousemove",this._onTouchMove),this.nativeDraggable&&(nt(N,"drop",this),nt(s,"dragstart",this._onDragStart),nt(N,"dragover",this._handleAutoScroll),nt(N,"dragover",$)),this._offUpEvents(),a&&(_&&(a.cancelable&&a.preventDefault(),!u.dropBubble&&a.stopPropagation()),n&&n.parentNode&&n.parentNode.removeChild(n),(i===e||p&&"clone"!==p.lastPutMode)&&r&&r.parentNode&&r.parentNode.removeChild(r),t&&(this.nativeDraggable&&nt(t,"dragend",this),ut(t),t.style["will-change"]="",rt(t,this.options.ghostClass,!1),rt(t,this.options.chosenClass,!1),at(this,i,"unchoose",t,e,i,l,null,a),i!==e?((h=pt(t,u.draggable))>=0&&(at(null,e,"add",t,e,i,l,h,a),at(this,i,"remove",t,e,i,l,h,a),at(null,e,"sort",t,e,i,l,h,a),at(this,i,"sort",t,e,i,l,h,a)),p&&p.save()):t.nextSibling!==o&&(h=pt(t,u.draggable))>=0&&(at(this,i,"update",t,e,i,l,h,a),at(this,i,"sort",t,e,i,l,h,a)),J.active&&(null!=h&&-1!==h||(h=l),at(this,i,"end",t,e,i,l,h,a),this.save()))),this._nulling()},_nulling:function(){i=t=e=n=o=r=a=s=u=x.length=d=y=v=g=m=_=h=l=b=w=E=p=f=J.active=null,V.forEach(function(t){t.checked=!0}),V.length=0},handleEvent:function(e){switch(e.type){case"drop":case"dragend":this._onDrop(e);break;case"dragenter":case"dragover":t&&(this._onDragOver(e),function(t){t.dataTransfer&&(t.dataTransfer.dropEffect="move");t.cancelable&&t.preventDefault()}(e));break;case"selectstart":e.preventDefault()}},toArray:function(){for(var t,e=[],n=this.el.children,r=0,i=n.length,o=this.options;r<i;r++)Z(t=n[r],o.draggable,this.el,!1)&&e.push(t.getAttribute(o.dataIdAttr)||ft(t));return e},sort:function(t){var e={},n=this.el;this.toArray().forEach(function(t,r){var i=n.children[r];Z(i,this.options.draggable,n,!1)&&(e[t]=i)},this),t.forEach(function(t){e[t]&&(n.removeChild(e[t]),n.appendChild(e[t]))})},save:function(){var t=this.options.store;t&&t.set&&t.set(this)},closest:function(t,e){return Z(t,e||this.options.draggable,this.el,!1)},option:function(t,e){var n=this.options;if(void 0===e)return n[t];n[t]=e,"group"===t&&X(n)},destroy:function(){var t=this.el;t[I]=null,nt(t,"mousedown",this._onTapStart),nt(t,"touchstart",this._onTapStart),nt(t,"pointerdown",this._onTapStart),this.nativeDraggable&&(nt(t,"dragover",this),nt(t,"dragenter",this)),Array.prototype.forEach.call(t.querySelectorAll("[draggable]"),function(t){t.removeAttribute("draggable")}),Q.splice(Q.indexOf(this._onDragOver),1),this._onDrop(),this.el=t=null},_hideClone:function(){r.cloneHidden||(it(r,"display","none"),r.cloneHidden=!0)},_showClone:function(e){"clone"===e.lastPutMode?r.cloneHidden&&(i.contains(t)&&!this.options.group.revertClone?i.insertBefore(r,t):o?i.insertBefore(r,o):i.appendChild(r),this.options.group.revertClone&&this._animate(t,r),it(r,"display",""),r.cloneHidden=!1):this._hideClone()}},J.utils={on:et,off:nt,css:it,find:ot,is:function(t,e){return!!Z(t,e,t,!1)},extend:vt,throttle:yt,closest:Z,toggleClass:rt,clone:gt,index:pt,nextTick:mt,cancelNextTick:_t,detectDirection:z,getChild:lt},J.create=function(t,e){return new J(t,e)},J.version="1.8.0-rc1",J})},function(t,e,n){n(44),t.exports=n(383)},function(t,e,n){n(156),n(158),n(159),n(160),n(161),n(162),n(163),n(164),n(165),n(166),n(167),n(168),n(169),n(170),n(171),n(172),n(173),n(174),n(175),n(176),n(177),n(178),n(179),n(180),n(181),n(182),n(183),n(184),n(185),n(186),n(187),n(188),n(189),n(190),n(191),n(192),n(193),n(194),n(195),n(196),n(197),n(198),n(199),n(200),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(215),n(216),n(217),n(218),n(219),n(220),n(221),n(222),n(223),n(224),n(225),n(226),n(227),n(228),n(229),n(230),n(231),n(232),n(233),n(235),n(236),n(238),n(239),n(240),n(241),n(242),n(243),n(244),n(246),n(247),n(248),n(249),n(250),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(258),n(92),n(259),n(118),n(260),n(119),n(261),n(262),n(263),n(264),n(265),n(122),n(124),n(125),n(266),n(267),n(268),n(269),n(270),n(271),n(272),n(273),n(274),n(275),n(276),n(277),n(278),n(279),n(280),n(281),n(282),n(283),n(284),n(285),n(286),n(287),n(288),n(289),n(290),n(291),n(292),n(293),n(294),n(295),n(296),n(297),n(298),n(299),n(300),n(301),n(302),n(303),n(304),n(305),n(306),n(307),n(308),n(309),n(310),n(311),n(312),n(313),n(314),n(315),n(316),n(317),n(318),n(319),n(320),n(321),n(322),n(323),n(324),n(325),n(326),n(327),n(328),n(329),n(330),n(331),n(332),n(333),n(334),n(335),n(336),n(337),n(338),n(339),n(340),n(341),n(342),n(343),n(344),n(345),n(346),n(347),n(348),n(349),n(350),t.exports=n(19)},function(t,e,n){"use strict";var r=n(2),i=n(15),o=n(7),a=n(0),s=n(12),u=n(31).KEY,c=n(3),l=n(55),h=n(45),f=n(35),p=n(5),d=n(100),y=n(73),v=n(157),g=n(58),m=n(1),_=n(4),b=n(16),w=n(24),E=n(34),S=n(38),C=n(103),x=n(17),T=n(8),k=n(36),P=x.f,O=T.f,I=C.f,A=r.Symbol,N=r.JSON,R=N&&N.stringify,D=p("_hidden"),F=p("toPrimitive"),M={}.propertyIsEnumerable,L=l("symbol-registry"),j=l("symbols"),q=l("op-symbols"),W=Object.prototype,U="function"==typeof A,B=r.QObject,H=!B||!B.prototype||!B.prototype.findChild,V=o&&c(function(){return 7!=S(O({},"a",{get:function(){return O(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=P(W,e);r&&delete W[e],O(t,e,n),r&&t!==W&&O(W,e,r)}:O,Q=function(t){var e=j[t]=S(A.prototype);return e._k=t,e},z=U&&"symbol"==typeof A.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof A},Y=function(t,e,n){return t===W&&Y(q,e,n),m(t),e=w(e,!0),m(n),i(j,e)?(n.enumerable?(i(t,D)&&t[D][e]&&(t[D][e]=!1),n=S(n,{enumerable:E(0,!1)})):(i(t,D)||O(t,D,E(1,{})),t[D][e]=!0),V(t,e,n)):O(t,e,n)},G=function(t,e){m(t);for(var n,r=v(e=b(e)),i=0,o=r.length;o>i;)Y(t,n=r[i++],e[n]);return t},K=function(t){var e=M.call(this,t=w(t,!0));return!(this===W&&i(j,t)&&!i(q,t))&&(!(e||!i(this,t)||!i(j,t)||i(this,D)&&this[D][t])||e)},X=function(t,e){if(t=b(t),e=w(e,!0),t!==W||!i(j,e)||i(q,e)){var n=P(t,e);return!n||!i(j,e)||i(t,D)&&t[D][e]||(n.enumerable=!0),n}},$=function(t){for(var e,n=I(b(t)),r=[],o=0;n.length>o;)i(j,e=n[o++])||e==D||e==u||r.push(e);return r},J=function(t){for(var e,n=t===W,r=I(n?q:b(t)),o=[],a=0;r.length>a;)!i(j,e=r[a++])||n&&!i(W,e)||o.push(j[e]);return o};U||(s((A=function(){if(this instanceof A)throw TypeError("Symbol is not a constructor!");var t=f(arguments.length>0?arguments[0]:void 0),e=function(n){this===W&&e.call(q,n),i(this,D)&&i(this[D],t)&&(this[D][t]=!1),V(this,t,E(1,n))};return o&&H&&V(W,t,{configurable:!0,set:e}),Q(t)}).prototype,"toString",function(){return this._k}),x.f=X,T.f=Y,n(39).f=C.f=$,n(52).f=K,n(57).f=J,o&&!n(32)&&s(W,"propertyIsEnumerable",K,!0),d.f=function(t){return Q(p(t))}),a(a.G+a.W+a.F*!U,{Symbol:A});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Z.length>tt;)p(Z[tt++]);for(var et=k(p.store),nt=0;et.length>nt;)y(et[nt++]);a(a.S+a.F*!U,"Symbol",{for:function(t){return i(L,t+="")?L[t]:L[t]=A(t)},keyFor:function(t){if(!z(t))throw TypeError(t+" is not a symbol!");for(var e in L)if(L[e]===t)return e},useSetter:function(){H=!0},useSimple:function(){H=!1}}),a(a.S+a.F*!U,"Object",{create:function(t,e){return void 0===e?S(t):G(S(t),e)},defineProperty:Y,defineProperties:G,getOwnPropertyDescriptor:X,getOwnPropertyNames:$,getOwnPropertySymbols:J}),N&&a(a.S+a.F*(!U||c(function(){var t=A();return"[null]"!=R([t])||"{}"!=R({a:t})||"{}"!=R(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=e=r[1],(_(e)||void 0!==t)&&!z(t))return g(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!z(e))return e}),r[1]=e,R.apply(N,r)}}),A.prototype[F]||n(11)(A.prototype,F,A.prototype.valueOf),h(A,"Symbol"),h(Math,"Math",!0),h(r.JSON,"JSON",!0)},function(t,e,n){var r=n(36),i=n(57),o=n(52);t.exports=function(t){var e=r(t),n=i.f;if(n)for(var a,s=n(t),u=o.f,c=0;s.length>c;)u.call(t,a=s[c++])&&e.push(a);return e}},function(t,e,n){var r=n(0);r(r.S,"Object",{create:n(38)})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(7),"Object",{defineProperty:n(8).f})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(7),"Object",{defineProperties:n(102)})},function(t,e,n){var r=n(16),i=n(17).f;n(26)("getOwnPropertyDescriptor",function(){return function(t,e){return i(r(t),e)}})},function(t,e,n){var r=n(9),i=n(18);n(26)("getPrototypeOf",function(){return function(t){return i(r(t))}})},function(t,e,n){var r=n(9),i=n(36);n(26)("keys",function(){return function(t){return i(r(t))}})},function(t,e,n){n(26)("getOwnPropertyNames",function(){return n(103).f})},function(t,e,n){var r=n(4),i=n(31).onFreeze;n(26)("freeze",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},function(t,e,n){var r=n(4),i=n(31).onFreeze;n(26)("seal",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},function(t,e,n){var r=n(4),i=n(31).onFreeze;n(26)("preventExtensions",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},function(t,e,n){var r=n(4);n(26)("isFrozen",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(4);n(26)("isSealed",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(4);n(26)("isExtensible",function(t){return function(e){return!!r(e)&&(!t||t(e))}})},function(t,e,n){var r=n(0);r(r.S+r.F,"Object",{assign:n(104)})},function(t,e,n){var r=n(0);r(r.S,"Object",{is:n(105)})},function(t,e,n){var r=n(0);r(r.S,"Object",{setPrototypeOf:n(77).set})},function(t,e,n){"use strict";var r=n(46),i={};i[n(5)("toStringTag")]="z",i+""!="[object z]"&&n(12)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,e,n){var r=n(0);r(r.P,"Function",{bind:n(106)})},function(t,e,n){var r=n(8).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||n(7)&&r(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},function(t,e,n){"use strict";var r=n(4),i=n(18),o=n(5)("hasInstance"),a=Function.prototype;o in a||n(8).f(a,o,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,n){var r=n(0),i=n(108);r(r.G+r.F*(parseInt!=i),{parseInt:i})},function(t,e,n){var r=n(0),i=n(109);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},function(t,e,n){"use strict";var r=n(2),i=n(15),o=n(21),a=n(79),s=n(24),u=n(3),c=n(39).f,l=n(17).f,h=n(8).f,f=n(47).trim,p=r.Number,d=p,y=p.prototype,v="Number"==o(n(38)(y)),g="trim"in String.prototype,m=function(t){var e=s(t,!1);if("string"==typeof e&&e.length>2){var n,r,i,o=(e=g?e.trim():f(e,3)).charCodeAt(0);if(43===o||45===o){if(88===(n=e.charCodeAt(2))||120===n)return NaN}else if(48===o){switch(e.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+e}for(var a,u=e.slice(2),c=0,l=u.length;c<l;c++)if((a=u.charCodeAt(c))<48||a>i)return NaN;return parseInt(u,r)}}return+e};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof p&&(v?u(function(){y.valueOf.call(n)}):"Number"!=o(n))?a(new d(m(e)),n,p):m(e)};for(var _,b=n(7)?c(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;b.length>w;w++)i(d,_=b[w])&&!i(p,_)&&h(p,_,l(d,_));p.prototype=y,y.constructor=p,n(12)(r,"Number",p)}},function(t,e,n){"use strict";var r=n(0),i=n(22),o=n(110),a=n(80),s=1..toFixed,u=Math.floor,c=[0,0,0,0,0,0],l="Number.toFixed: incorrect invocation!",h=function(t,e){for(var n=-1,r=e;++n<6;)r+=t*c[n],c[n]=r%1e7,r=u(r/1e7)},f=function(t){for(var e=6,n=0;--e>=0;)n+=c[e],c[e]=u(n/t),n=n%t*1e7},p=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==c[t]){var n=String(c[t]);e=""===e?n:e+a.call("0",7-n.length)+n}return e},d=function(t,e,n){return 0===e?n:e%2==1?d(t,e-1,n*t):d(t*t,e/2,n)};r(r.P+r.F*(!!s&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(3)(function(){s.call({})})),"Number",{toFixed:function(t){var e,n,r,s,u=o(this,l),c=i(t),y="",v="0";if(c<0||c>20)throw RangeError(l);if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return String(u);if(u<0&&(y="-",u=-u),u>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(u*d(2,69,1))-69)<0?u*d(2,-e,1):u/d(2,e,1),n*=4503599627370496,(e=52-e)>0){for(h(0,n),r=c;r>=7;)h(1e7,0),r-=7;for(h(d(10,r,1),0),r=e-1;r>=23;)f(1<<23),r-=23;f(1<<r),h(1,1),f(2),v=p()}else h(0,n),h(1<<-e,0),v=p()+a.call("0",c);return v=c>0?y+((s=v.length)<=c?"0."+a.call("0",c-s)+v:v.slice(0,s-c)+"."+v.slice(s-c)):y+v}})},function(t,e,n){"use strict";var r=n(0),i=n(3),o=n(110),a=1..toPrecision;r(r.P+r.F*(i(function(){return"1"!==a.call(1,void 0)})||!i(function(){a.call({})})),"Number",{toPrecision:function(t){var e=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?a.call(e):a.call(e,t)}})},function(t,e,n){var r=n(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,n){var r=n(0),i=n(2).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,e,n){var r=n(0);r(r.S,"Number",{isInteger:n(111)})},function(t,e,n){var r=n(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,n){var r=n(0),i=n(111),o=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},function(t,e,n){var r=n(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,n){var r=n(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,n){var r=n(0),i=n(109);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,e,n){var r=n(0),i=n(108);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,e,n){var r=n(0),i=n(112),o=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},function(t,e,n){var r=n(0),i=Math.asinh;r(r.S+r.F*!(i&&1/i(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,n){var r=n(0),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,n){var r=n(0),i=n(81);r(r.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,n){var r=n(0),i=Math.exp;r(r.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,e,n){var r=n(0),i=n(82);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,e,n){var r=n(0);r(r.S,"Math",{fround:n(113)})},function(t,e,n){var r=n(0),i=Math.abs;r(r.S,"Math",{hypot:function(t,e){for(var n,r,o=0,a=0,s=arguments.length,u=0;a<s;)u<(n=i(arguments[a++]))?(o=o*(r=u/n)*r+1,u=n):o+=n>0?(r=n/u)*r:n;return u===1/0?1/0:u*Math.sqrt(o)}})},function(t,e,n){var r=n(0),i=Math.imul;r(r.S+r.F*n(3)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,e){var n=+t,r=+e,i=65535&n,o=65535&r;return 0|i*o+((65535&n>>>16)*o+i*(65535&r>>>16)<<16>>>0)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,n){var r=n(0);r(r.S,"Math",{log1p:n(112)})},function(t,e,n){var r=n(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,n){var r=n(0);r(r.S,"Math",{sign:n(81)})},function(t,e,n){var r=n(0),i=n(82),o=Math.exp;r(r.S+r.F*n(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},function(t,e,n){var r=n(0),i=n(82),o=Math.exp;r(r.S,"Math",{tanh:function(t){var e=i(t=+t),n=i(-t);return e==1/0?1:n==1/0?-1:(e-n)/(o(t)+o(-t))}})},function(t,e,n){var r=n(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,n){var r=n(0),i=n(37),o=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,a=0;r>a;){if(e=+arguments[a++],i(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?o(e):o(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},function(t,e,n){var r=n(0),i=n(16),o=n(6);r(r.S,"String",{raw:function(t){for(var e=i(t.raw),n=o(e.length),r=arguments.length,a=[],s=0;n>s;)a.push(String(e[s++])),s<r&&a.push(String(arguments[s]));return a.join("")}})},function(t,e,n){"use strict";n(47)("trim",function(t){return function(){return t(this,3)}})},function(t,e,n){"use strict";var r=n(59)(!0);n(83)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){"use strict";var r=n(0),i=n(59)(!1);r(r.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,e,n){"use strict";var r=n(0),i=n(6),o=n(85),a="".endsWith;r(r.P+r.F*n(86)("endsWith"),"String",{endsWith:function(t){var e=o(this,t,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=i(e.length),s=void 0===n?r:Math.min(i(n),r),u=String(t);return a?a.call(e,u,s):e.slice(s-u.length,s)===u}})},function(t,e,n){"use strict";var r=n(0),i=n(85);r(r.P+r.F*n(86)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){var r=n(0);r(r.P,"String",{repeat:n(80)})},function(t,e,n){"use strict";var r=n(0),i=n(6),o=n(85),a="".startsWith;r(r.P+r.F*n(86)("startsWith"),"String",{startsWith:function(t){var e=o(this,t,"startsWith"),n=i(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return a?a.call(e,r,n):e.slice(n,n+r.length)===r}})},function(t,e,n){"use strict";n(13)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},function(t,e,n){"use strict";n(13)("big",function(t){return function(){return t(this,"big","","")}})},function(t,e,n){"use strict";n(13)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,e,n){"use strict";n(13)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,e,n){"use strict";n(13)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,e,n){"use strict";n(13)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},function(t,e,n){"use strict";n(13)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},function(t,e,n){"use strict";n(13)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,e,n){"use strict";n(13)("link",function(t){return function(e){return t(this,"a","href",e)}})},function(t,e,n){"use strict";n(13)("small",function(t){return function(){return t(this,"small","","")}})},function(t,e,n){"use strict";n(13)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,e,n){"use strict";n(13)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,e,n){"use strict";n(13)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,e,n){var r=n(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,n){"use strict";var r=n(0),i=n(9),o=n(24);r(r.P+r.F*n(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=i(this),n=o(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},function(t,e,n){var r=n(0),i=n(234);r(r.P+r.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(t,e,n){"use strict";var r=n(3),i=Date.prototype.getTime,o=Date.prototype.toISOString,a=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))})||!r(function(){o.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":e>9999?"+":"";return r+("00000"+Math.abs(e)).slice(r?-6:-4)+"-"+a(t.getUTCMonth()+1)+"-"+a(t.getUTCDate())+"T"+a(t.getUTCHours())+":"+a(t.getUTCMinutes())+":"+a(t.getUTCSeconds())+"."+(n>99?n:"0"+a(n))+"Z"}:o},function(t,e,n){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(12)(r,"toString",function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,e,n){var r=n(5)("toPrimitive"),i=Date.prototype;r in i||n(11)(i,r,n(237))},function(t,e,n){"use strict";var r=n(1),i=n(24);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),"number"!=t)}},function(t,e,n){var r=n(0);r(r.S,"Array",{isArray:n(58)})},function(t,e,n){"use strict";var r=n(20),i=n(0),o=n(9),a=n(114),s=n(87),u=n(6),c=n(88),l=n(89);i(i.S+i.F*!n(61)(function(t){Array.from(t)}),"Array",{from:function(t){var e,n,i,h,f=o(t),p="function"==typeof this?this:Array,d=arguments.length,y=d>1?arguments[1]:void 0,v=void 0!==y,g=0,m=l(f);if(v&&(y=r(y,d>2?arguments[2]:void 0,2)),null==m||p==Array&&s(m))for(n=new p(e=u(f.length));e>g;g++)c(n,g,v?y(f[g],g):f[g]);else for(h=m.call(f),n=new p;!(i=h.next()).done;g++)c(n,g,v?a(h,y,[i.value,g],!0):i.value);return n.length=g,n}})},function(t,e,n){"use strict";var r=n(0),i=n(88);r(r.S+r.F*n(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)i(n,t,arguments[t++]);return n.length=e,n}})},function(t,e,n){"use strict";var r=n(0),i=n(16),o=[].join;r(r.P+r.F*(n(51)!=Object||!n(23)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},function(t,e,n){"use strict";var r=n(0),i=n(76),o=n(21),a=n(37),s=n(6),u=[].slice;r(r.P+r.F*n(3)(function(){i&&u.call(i)}),"Array",{slice:function(t,e){var n=s(this.length),r=o(this);if(e=void 0===e?n:e,"Array"==r)return u.call(this,t,e);for(var i=a(t,n),c=a(e,n),l=s(c-i),h=new Array(l),f=0;f<l;f++)h[f]="String"==r?this.charAt(i+f):this[i+f];return h}})},function(t,e,n){"use strict";var r=n(0),i=n(10),o=n(9),a=n(3),s=[].sort,u=[1,2,3];r(r.P+r.F*(a(function(){u.sort(void 0)})||!a(function(){u.sort(null)})||!n(23)(s)),"Array",{sort:function(t){return void 0===t?s.call(o(this)):s.call(o(this),i(t))}})},function(t,e,n){"use strict";var r=n(0),i=n(27)(0),o=n(23)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,e,n){var r=n(4),i=n(58),o=n(5)("species");t.exports=function(t){var e;return i(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!i(e.prototype)||(e=void 0),r(e)&&null===(e=e[o])&&(e=void 0)),void 0===e?Array:e}},function(t,e,n){"use strict";var r=n(0),i=n(27)(1);r(r.P+r.F*!n(23)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(27)(2);r(r.P+r.F*!n(23)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(27)(3);r(r.P+r.F*!n(23)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(27)(4);r(r.P+r.F*!n(23)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(115);r(r.P+r.F*!n(23)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,e,n){"use strict";var r=n(0),i=n(115);r(r.P+r.F*!n(23)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},function(t,e,n){"use strict";var r=n(0),i=n(56)(!1),o=[].indexOf,a=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!n(23)(o)),"Array",{indexOf:function(t){return a?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(16),o=n(22),a=n(6),s=[].lastIndexOf,u=!!s&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(u||!n(23)(s)),"Array",{lastIndexOf:function(t){if(u)return s.apply(this,arguments)||0;var e=i(this),n=a(e.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,o(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in e&&e[r]===t)return r||0;return-1}})},function(t,e,n){var r=n(0);r(r.P,"Array",{copyWithin:n(116)}),n(33)("copyWithin")},function(t,e,n){var r=n(0);r(r.P,"Array",{fill:n(91)}),n(33)("fill")},function(t,e,n){"use strict";var r=n(0),i=n(27)(5),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),r(r.P+r.F*o,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(33)("find")},function(t,e,n){"use strict";var r=n(0),i=n(27)(6),o="findIndex",a=!0;o in[]&&Array(1)[o](function(){a=!1}),r(r.P+r.F*a,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(33)(o)},function(t,e,n){n(40)("Array")},function(t,e,n){var r=n(2),i=n(79),o=n(8).f,a=n(39).f,s=n(60),u=n(53),c=r.RegExp,l=c,h=c.prototype,f=/a/g,p=/a/g,d=new c(f)!==f;if(n(7)&&(!d||n(3)(function(){return p[n(5)("match")]=!1,c(f)!=f||c(p)==p||"/a/i"!=c(f,"i")}))){c=function(t,e){var n=this instanceof c,r=s(t),o=void 0===e;return!n&&r&&t.constructor===c&&o?t:i(d?new l(r&&!o?t.source:t,e):l((r=t instanceof c)?t.source:t,r&&o?u.call(t):e),n?this:h,c)};for(var y=function(t){t in c||o(c,t,{configurable:!0,get:function(){return l[t]},set:function(e){l[t]=e}})},v=a(l),g=0;v.length>g;)y(v[g++]);h.constructor=c,c.prototype=h,n(12)(r,"RegExp",c)}n(40)("RegExp")},function(t,e,n){"use strict";n(119);var r=n(1),i=n(53),o=n(7),a=/./.toString,s=function(t){n(12)(RegExp.prototype,"toString",t,!0)};n(3)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?s(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=a.name&&s(function(){return a.call(this)})},function(t,e,n){"use strict";var r=n(1),i=n(6),o=n(94),a=n(62);n(63)("match",1,function(t,e,n,s){return[function(n){var r=t(this),i=null==n?void 0:n[e];return void 0!==i?i.call(n,r):new RegExp(n)[e](String(r))},function(t){var e=s(n,t,this);if(e.done)return e.value;var u=r(t),c=String(this);if(!u.global)return a(u,c);var l=u.unicode;u.lastIndex=0;for(var h,f=[],p=0;null!==(h=a(u,c));){var d=String(h[0]);f[p]=d,""===d&&(u.lastIndex=o(c,i(u.lastIndex),l)),p++}return 0===p?null:f}]})},function(t,e,n){"use strict";var r=n(1),i=n(9),o=n(6),a=n(22),s=n(94),u=n(62),c=Math.max,l=Math.min,h=Math.floor,f=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;n(63)("replace",2,function(t,e,n,d){return[function(r,i){var o=t(this),a=null==r?void 0:r[e];return void 0!==a?a.call(r,o,i):n.call(String(o),r,i)},function(t,e){var i=d(n,t,this,e);if(i.done)return i.value;var h=r(t),f=String(this),p="function"==typeof e;p||(e=String(e));var v=h.global;if(v){var g=h.unicode;h.lastIndex=0}for(var m=[];;){var _=u(h,f);if(null===_)break;if(m.push(_),!v)break;""===String(_[0])&&(h.lastIndex=s(f,o(h.lastIndex),g))}for(var b,w="",E=0,S=0;S<m.length;S++){_=m[S];for(var C=String(_[0]),x=c(l(a(_.index),f.length),0),T=[],k=1;k<_.length;k++)T.push(void 0===(b=_[k])?b:String(b));var P=_.groups;if(p){var O=[C].concat(T,x,f);void 0!==P&&O.push(P);var I=String(e.apply(void 0,O))}else I=y(C,f,x,T,P,e);x>=E&&(w+=f.slice(E,x)+I,E=x+C.length)}return w+f.slice(E)}];function y(t,e,r,o,a,s){var u=r+t.length,c=o.length,l=p;return void 0!==a&&(a=i(a),l=f),n.call(s,l,function(n,i){var s;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,r);case"'":return e.slice(u);case"<":s=a[i.slice(1,-1)];break;default:var l=+i;if(0===l)return i;if(l>c){var f=h(l/10);return 0===f?i:f<=c?void 0===o[f-1]?i.charAt(1):o[f-1]+i.charAt(1):i}s=o[l-1]}return void 0===s?"":s})}})},function(t,e,n){"use strict";var r=n(1),i=n(105),o=n(62);n(63)("search",1,function(t,e,n,a){return[function(n){var r=t(this),i=null==n?void 0:n[e];return void 0!==i?i.call(n,r):new RegExp(n)[e](String(r))},function(t){var e=a(n,t,this);if(e.done)return e.value;var s=r(t),u=String(this),c=s.lastIndex;i(c,0)||(s.lastIndex=0);var l=o(s,u);return i(s.lastIndex,c)||(s.lastIndex=c),null===l?-1:l.index}]})},function(t,e,n){"use strict";var r=n(60),i=n(1),o=n(54),a=n(94),s=n(6),u=n(62),c=n(93),l=Math.min,h=[].push,f=!!function(){try{return new RegExp("x","y")}catch(t){}}();n(63)("split",2,function(t,e,n,p){var d=n;return"c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?d=function(t,e){var i=String(this);if(void 0===t&&0===e)return[];if(!r(t))return n.call(i,t,e);for(var o,a,s,u=[],l=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),f=0,p=void 0===e?4294967295:e>>>0,d=new RegExp(t.source,l+"g");(o=c.call(d,i))&&!((a=d.lastIndex)>f&&(u.push(i.slice(f,o.index)),o.length>1&&o.index<i.length&&h.apply(u,o.slice(1)),s=o[0].length,f=a,u.length>=p));)d.lastIndex===o.index&&d.lastIndex++;return f===i.length?!s&&d.test("")||u.push(""):u.push(i.slice(f)),u.length>p?u.slice(0,p):u}:"0".split(void 0,0).length&&(d=function(t,e){return void 0===t&&0===e?[]:n.call(this,t,e)}),[function(n,r){var i=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,i,r):d.call(String(i),n,r)},function(t,e){var r=p(d,t,this,e,d!==n);if(r.done)return r.value;var c=i(t),h=String(this),y=o(c,RegExp),v=c.unicode,g=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(f?"y":"g"),m=new y(f?c:"^(?:"+c.source+")",g),_=void 0===e?4294967295:e>>>0;if(0===_)return[];if(0===h.length)return null===u(m,h)?[h]:[];for(var b=0,w=0,E=[];w<h.length;){m.lastIndex=f?w:0;var S,C=u(m,f?h:h.slice(w));if(null===C||(S=l(s(m.lastIndex+(f?0:w)),h.length))===b)w=a(h,w,v);else{if(E.push(h.slice(b,w)),E.length===_)return E;for(var x=1;x<=C.length-1;x++)if(E.push(C[x]),E.length===_)return E;w=b=S}}return E.push(h.slice(b)),E}]})},function(t,e,n){"use strict";var r,i,o,a,s=n(32),u=n(2),c=n(20),l=n(46),h=n(0),f=n(4),p=n(10),d=n(41),y=n(42),v=n(54),g=n(95).set,m=n(96)(),_=n(97),b=n(120),w=n(64),E=n(121),S=u.TypeError,C=u.process,x=C&&C.versions,T=x&&x.v8||"",k=u.Promise,P="process"==l(C),O=function(){},I=i=_.f,A=!!function(){try{var t=k.resolve(1),e=(t.constructor={})[n(5)("species")]=function(t){t(O,O)};return(P||"function"==typeof PromiseRejectionEvent)&&t.then(O)instanceof e&&0!==T.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(t){}}(),N=function(t){var e;return!(!f(t)||"function"!=typeof(e=t.then))&&e},R=function(t,e){if(!t._n){t._n=!0;var n=t._c;m(function(){for(var r=t._v,i=1==t._s,o=0,a=function(e){var n,o,a,s=i?e.ok:e.fail,u=e.resolve,c=e.reject,l=e.domain;try{s?(i||(2==t._h&&M(t),t._h=1),!0===s?n=r:(l&&l.enter(),n=s(r),l&&(l.exit(),a=!0)),n===e.promise?c(S("Promise-chain cycle")):(o=N(n))?o.call(n,u,c):u(n)):c(r)}catch(t){l&&!a&&l.exit(),c(t)}};n.length>o;)a(n[o++]);t._c=[],t._n=!1,e&&!t._h&&D(t)})}},D=function(t){g.call(u,function(){var e,n,r,i=t._v,o=F(t);if(o&&(e=b(function(){P?C.emit("unhandledRejection",i,t):(n=u.onunhandledrejection)?n({promise:t,reason:i}):(r=u.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=P||F(t)?2:1),t._a=void 0,o&&e.e)throw e.v})},F=function(t){return 1!==t._h&&0===(t._a||t._c).length},M=function(t){g.call(u,function(){var e;P?C.emit("rejectionHandled",t):(e=u.onrejectionhandled)&&e({promise:t,reason:t._v})})},L=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),R(e,!0))},j=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw S("Promise can't be resolved itself");(e=N(t))?m(function(){var r={_w:n,_d:!1};try{e.call(t,c(j,r,1),c(L,r,1))}catch(t){L.call(r,t)}}):(n._v=t,n._s=1,R(n,!1))}catch(t){L.call({_w:n,_d:!1},t)}}};A||(k=function(t){d(this,k,"Promise","_h"),p(t),r.call(this);try{t(c(j,this,1),c(L,this,1))}catch(t){L.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(43)(k.prototype,{then:function(t,e){var n=I(v(this,k));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=P?C.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&R(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=c(j,t,1),this.reject=c(L,t,1)},_.f=I=function(t){return t===k||t===a?new o(t):i(t)}),h(h.G+h.W+h.F*!A,{Promise:k}),n(45)(k,"Promise"),n(40)("Promise"),a=n(19).Promise,h(h.S+h.F*!A,"Promise",{reject:function(t){var e=I(this);return(0,e.reject)(t),e.promise}}),h(h.S+h.F*(s||!A),"Promise",{resolve:function(t){return E(s&&this===a?k:this,t)}}),h(h.S+h.F*!(A&&n(61)(function(t){k.all(t).catch(O)})),"Promise",{all:function(t){var e=this,n=I(e),r=n.resolve,i=n.reject,o=b(function(){var n=[],o=0,a=1;y(t,!1,function(t){var s=o++,u=!1;n.push(void 0),a++,e.resolve(t).then(function(t){u||(u=!0,n[s]=t,--a||r(n))},i)}),--a||r(n)});return o.e&&i(o.v),n.promise},race:function(t){var e=this,n=I(e),r=n.reject,i=b(function(){y(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return i.e&&r(i.v),n.promise}})},function(t,e,n){"use strict";var r=n(126),i=n(49);n(65)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,e,n){"use strict";var r=n(0),i=n(66),o=n(98),a=n(1),s=n(37),u=n(6),c=n(4),l=n(2).ArrayBuffer,h=n(54),f=o.ArrayBuffer,p=o.DataView,d=i.ABV&&l.isView,y=f.prototype.slice,v=i.VIEW;r(r.G+r.W+r.F*(l!==f),{ArrayBuffer:f}),r(r.S+r.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||c(t)&&v in t}}),r(r.P+r.U+r.F*n(3)(function(){return!new f(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==y&&void 0===e)return y.call(a(this),t);for(var n=a(this).byteLength,r=s(t,n),i=s(void 0===e?n:e,n),o=new(h(this,f))(u(i-r)),c=new p(this),l=new p(o),d=0;r<i;)l.setUint8(d++,c.getUint8(r++));return o}}),n(40)("ArrayBuffer")},function(t,e,n){var r=n(0);r(r.G+r.W+r.F*!n(66).ABV,{DataView:n(98).DataView})},function(t,e,n){n(29)("Int8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(29)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(29)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}},!0)},function(t,e,n){n(29)("Int16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(29)("Uint16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(29)("Int32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(29)("Uint32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(29)("Float32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(29)("Float64",8,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){var r=n(0),i=n(10),o=n(1),a=(n(2).Reflect||{}).apply,s=Function.apply;r(r.S+r.F*!n(3)(function(){a(function(){})}),"Reflect",{apply:function(t,e,n){var r=i(t),u=o(n);return a?a(r,e,u):s.call(r,e,u)}})},function(t,e,n){var r=n(0),i=n(38),o=n(10),a=n(1),s=n(4),u=n(3),c=n(106),l=(n(2).Reflect||{}).construct,h=u(function(){function t(){}return!(l(function(){},[],t)instanceof t)}),f=!u(function(){l(function(){})});r(r.S+r.F*(h||f),"Reflect",{construct:function(t,e){o(t),a(e);var n=arguments.length<3?t:o(arguments[2]);if(f&&!h)return l(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(c.apply(t,r))}var u=n.prototype,p=i(s(u)?u:Object.prototype),d=Function.apply.call(t,p,e);return s(d)?d:p}})},function(t,e,n){var r=n(8),i=n(0),o=n(1),a=n(24);i(i.S+i.F*n(3)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,n){o(t),e=a(e,!0),o(n);try{return r.f(t,e,n),!0}catch(t){return!1}}})},function(t,e,n){var r=n(0),i=n(17).f,o=n(1);r(r.S,"Reflect",{deleteProperty:function(t,e){var n=i(o(t),e);return!(n&&!n.configurable)&&delete t[e]}})},function(t,e,n){"use strict";var r=n(0),i=n(1),o=function(t){this._t=i(t),this._i=0;var e,n=this._k=[];for(e in t)n.push(e)};n(84)(o,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new o(t)}})},function(t,e,n){var r=n(17),i=n(18),o=n(15),a=n(0),s=n(4),u=n(1);a(a.S,"Reflect",{get:function t(e,n){var a,c,l=arguments.length<3?e:arguments[2];return u(e)===l?e[n]:(a=r.f(e,n))?o(a,"value")?a.value:void 0!==a.get?a.get.call(l):void 0:s(c=i(e))?t(c,n,l):void 0}})},function(t,e,n){var r=n(17),i=n(0),o=n(1);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return r.f(o(t),e)}})},function(t,e,n){var r=n(0),i=n(18),o=n(1);r(r.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,n){var r=n(0),i=n(1),o=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{ownKeys:n(128)})},function(t,e,n){var r=n(0),i=n(1),o=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},function(t,e,n){var r=n(8),i=n(17),o=n(18),a=n(15),s=n(0),u=n(34),c=n(1),l=n(4);s(s.S,"Reflect",{set:function t(e,n,s){var h,f,p=arguments.length<4?e:arguments[3],d=i.f(c(e),n);if(!d){if(l(f=o(e)))return t(f,n,s,p);d=u(0)}if(a(d,"value")){if(!1===d.writable||!l(p))return!1;if(h=i.f(p,n)){if(h.get||h.set||!1===h.writable)return!1;h.value=s,r.f(p,n,h)}else r.f(p,n,u(0,s));return!0}return void 0!==d.set&&(d.set.call(p,s),!0)}})},function(t,e,n){var r=n(0),i=n(77);i&&r(r.S,"Reflect",{setPrototypeOf:function(t,e){i.check(t,e);try{return i.set(t,e),!0}catch(t){return!1}}})},function(t,e,n){"use strict";var r=n(0),i=n(56)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(33)("includes")},function(t,e,n){"use strict";var r=n(0),i=n(129),o=n(9),a=n(6),s=n(10),u=n(90);r(r.P,"Array",{flatMap:function(t){var e,n,r=o(this);return s(t),e=a(r.length),n=u(r,0),i(n,r,r,e,0,1,t,arguments[1]),n}}),n(33)("flatMap")},function(t,e,n){"use strict";var r=n(0),i=n(129),o=n(9),a=n(6),s=n(22),u=n(90);r(r.P,"Array",{flatten:function(){var t=arguments[0],e=o(this),n=a(e.length),r=u(e,0);return i(r,e,e,n,0,void 0===t?1:s(t)),r}}),n(33)("flatten")},function(t,e,n){"use strict";var r=n(0),i=n(59)(!0);r(r.P,"String",{at:function(t){return i(this,t)}})},function(t,e,n){"use strict";var r=n(0),i=n(130),o=n(64);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,n){"use strict";var r=n(0),i=n(130),o=n(64);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,n){"use strict";n(47)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,e,n){"use strict";n(47)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,e,n){"use strict";var r=n(0),i=n(25),o=n(6),a=n(60),s=n(53),u=RegExp.prototype,c=function(t,e){this._r=t,this._s=e};n(84)(c,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),r(r.P,"String",{matchAll:function(t){if(i(this),!a(t))throw TypeError(t+" is not a regexp!");var e=String(this),n="flags"in u?String(t.flags):s.call(t),r=new RegExp(t.source,~n.indexOf("g")?n:"g"+n);return r.lastIndex=o(t.lastIndex),new c(r,e)}})},function(t,e,n){n(73)("asyncIterator")},function(t,e,n){n(73)("observable")},function(t,e,n){var r=n(0),i=n(128),o=n(16),a=n(17),s=n(88);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,n,r=o(t),u=a.f,c=i(r),l={},h=0;c.length>h;)void 0!==(n=u(r,e=c[h++]))&&s(l,e,n);return l}})},function(t,e,n){var r=n(0),i=n(131)(!1);r(r.S,"Object",{values:function(t){return i(t)}})},function(t,e,n){var r=n(0),i=n(131)(!0);r(r.S,"Object",{entries:function(t){return i(t)}})},function(t,e,n){"use strict";var r=n(0),i=n(9),o=n(10),a=n(8);n(7)&&r(r.P+n(67),"Object",{__defineGetter__:function(t,e){a.f(i(this),t,{get:o(e),enumerable:!0,configurable:!0})}})},function(t,e,n){"use strict";var r=n(0),i=n(9),o=n(10),a=n(8);n(7)&&r(r.P+n(67),"Object",{__defineSetter__:function(t,e){a.f(i(this),t,{set:o(e),enumerable:!0,configurable:!0})}})},function(t,e,n){"use strict";var r=n(0),i=n(9),o=n(24),a=n(18),s=n(17).f;n(7)&&r(r.P+n(67),"Object",{__lookupGetter__:function(t){var e,n=i(this),r=o(t,!0);do{if(e=s(n,r))return e.get}while(n=a(n))}})},function(t,e,n){"use strict";var r=n(0),i=n(9),o=n(24),a=n(18),s=n(17).f;n(7)&&r(r.P+n(67),"Object",{__lookupSetter__:function(t){var e,n=i(this),r=o(t,!0);do{if(e=s(n,r))return e.set}while(n=a(n))}})},function(t,e,n){var r=n(0);r(r.P+r.R,"Map",{toJSON:n(132)("Map")})},function(t,e,n){var r=n(0);r(r.P+r.R,"Set",{toJSON:n(132)("Set")})},function(t,e,n){n(68)("Map")},function(t,e,n){n(68)("Set")},function(t,e,n){n(68)("WeakMap")},function(t,e,n){n(68)("WeakSet")},function(t,e,n){n(69)("Map")},function(t,e,n){n(69)("Set")},function(t,e,n){n(69)("WeakMap")},function(t,e,n){n(69)("WeakSet")},function(t,e,n){var r=n(0);r(r.G,{global:n(2)})},function(t,e,n){var r=n(0);r(r.S,"System",{global:n(2)})},function(t,e,n){var r=n(0),i=n(21);r(r.S,"Error",{isError:function(t){return"Error"===i(t)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{clamp:function(t,e,n){return Math.min(n,Math.max(e,t))}})},function(t,e,n){var r=n(0);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,e,n){var r=n(0),i=180/Math.PI;r(r.S,"Math",{degrees:function(t){return t*i}})},function(t,e,n){var r=n(0),i=n(134),o=n(113);r(r.S,"Math",{fscale:function(t,e,n,r,a){return o(i(t,e,n,r,a))}})},function(t,e,n){var r=n(0);r(r.S,"Math",{iaddh:function(t,e,n,r){var i=t>>>0,o=n>>>0;return(e>>>0)+(r>>>0)+((i&o|(i|o)&~(i+o>>>0))>>>31)|0}})},function(t,e,n){var r=n(0);r(r.S,"Math",{isubh:function(t,e,n,r){var i=t>>>0,o=n>>>0;return(e>>>0)-(r>>>0)-((~i&o|~(i^o)&i-o>>>0)>>>31)|0}})},function(t,e,n){var r=n(0);r(r.S,"Math",{imulh:function(t,e){var n=+t,r=+e,i=65535&n,o=65535&r,a=n>>16,s=r>>16,u=(a*o>>>0)+(i*o>>>16);return a*s+(u>>16)+((i*s>>>0)+(65535&u)>>16)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,e,n){var r=n(0),i=Math.PI/180;r(r.S,"Math",{radians:function(t){return t*i}})},function(t,e,n){var r=n(0);r(r.S,"Math",{scale:n(134)})},function(t,e,n){var r=n(0);r(r.S,"Math",{umulh:function(t,e){var n=+t,r=+e,i=65535&n,o=65535&r,a=n>>>16,s=r>>>16,u=(a*o>>>0)+(i*o>>>16);return a*s+(u>>>16)+((i*s>>>0)+(65535&u)>>>16)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,e,n){"use strict";var r=n(0),i=n(19),o=n(2),a=n(54),s=n(121);r(r.P+r.R,"Promise",{finally:function(t){var e=a(this,i.Promise||o.Promise),n="function"==typeof t;return this.then(n?function(n){return s(e,t()).then(function(){return n})}:t,n?function(n){return s(e,t()).then(function(){throw n})}:t)}})},function(t,e,n){"use strict";var r=n(0),i=n(97),o=n(120);r(r.S,"Promise",{try:function(t){var e=i.f(this),n=o(t);return(n.e?e.reject:e.resolve)(n.v),e.promise}})},function(t,e,n){var r=n(30),i=n(1),o=r.key,a=r.set;r.exp({defineMetadata:function(t,e,n,r){a(t,e,i(n),o(r))}})},function(t,e,n){var r=n(30),i=n(1),o=r.key,a=r.map,s=r.store;r.exp({deleteMetadata:function(t,e){var n=arguments.length<3?void 0:o(arguments[2]),r=a(i(e),n,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var u=s.get(e);return u.delete(n),!!u.size||s.delete(e)}})},function(t,e,n){var r=n(30),i=n(1),o=n(18),a=r.has,s=r.get,u=r.key,c=function(t,e,n){if(a(t,e,n))return s(t,e,n);var r=o(e);return null!==r?c(t,r,n):void 0};r.exp({getMetadata:function(t,e){return c(t,i(e),arguments.length<3?void 0:u(arguments[2]))}})},function(t,e,n){var r=n(124),i=n(133),o=n(30),a=n(1),s=n(18),u=o.keys,c=o.key,l=function(t,e){var n=u(t,e),o=s(t);if(null===o)return n;var a=l(o,e);return a.length?n.length?i(new r(n.concat(a))):a:n};o.exp({getMetadataKeys:function(t){return l(a(t),arguments.length<2?void 0:c(arguments[1]))}})},function(t,e,n){var r=n(30),i=n(1),o=r.get,a=r.key;r.exp({getOwnMetadata:function(t,e){return o(t,i(e),arguments.length<3?void 0:a(arguments[2]))}})},function(t,e,n){var r=n(30),i=n(1),o=r.keys,a=r.key;r.exp({getOwnMetadataKeys:function(t){return o(i(t),arguments.length<2?void 0:a(arguments[1]))}})},function(t,e,n){var r=n(30),i=n(1),o=n(18),a=r.has,s=r.key,u=function(t,e,n){if(a(t,e,n))return!0;var r=o(e);return null!==r&&u(t,r,n)};r.exp({hasMetadata:function(t,e){return u(t,i(e),arguments.length<3?void 0:s(arguments[2]))}})},function(t,e,n){var r=n(30),i=n(1),o=r.has,a=r.key;r.exp({hasOwnMetadata:function(t,e){return o(t,i(e),arguments.length<3?void 0:a(arguments[2]))}})},function(t,e,n){var r=n(30),i=n(1),o=n(10),a=r.key,s=r.set;r.exp({metadata:function(t,e){return function(n,r){s(t,e,(void 0!==r?i:o)(n),a(r))}}})},function(t,e,n){var r=n(0),i=n(96)(),o=n(2).process,a="process"==n(21)(o);r(r.G,{asap:function(t){var e=a&&o.domain;i(e?e.bind(t):t)}})},function(t,e,n){"use strict";var r=n(0),i=n(2),o=n(19),a=n(96)(),s=n(5)("observable"),u=n(10),c=n(1),l=n(41),h=n(43),f=n(11),p=n(42),d=p.RETURN,y=function(t){return null==t?void 0:u(t)},v=function(t){var e=t._c;e&&(t._c=void 0,e())},g=function(t){return void 0===t._o},m=function(t){g(t)||(t._o=void 0,v(t))},_=function(t,e){c(t),this._c=void 0,this._o=t,t=new b(this);try{var n=e(t),r=n;null!=n&&("function"==typeof n.unsubscribe?n=function(){r.unsubscribe()}:u(n),this._c=n)}catch(e){return void t.error(e)}g(this)&&v(this)};_.prototype=h({},{unsubscribe:function(){m(this)}});var b=function(t){this._s=t};b.prototype=h({},{next:function(t){var e=this._s;if(!g(e)){var n=e._o;try{var r=y(n.next);if(r)return r.call(n,t)}catch(t){try{m(e)}finally{throw t}}}},error:function(t){var e=this._s;if(g(e))throw t;var n=e._o;e._o=void 0;try{var r=y(n.error);if(!r)throw t;t=r.call(n,t)}catch(t){try{v(e)}finally{throw t}}return v(e),t},complete:function(t){var e=this._s;if(!g(e)){var n=e._o;e._o=void 0;try{var r=y(n.complete);t=r?r.call(n,t):void 0}catch(t){try{v(e)}finally{throw t}}return v(e),t}}});var w=function(t){l(this,w,"Observable","_f")._f=u(t)};h(w.prototype,{subscribe:function(t){return new _(t,this._f)},forEach:function(t){var e=this;return new(o.Promise||i.Promise)(function(n,r){u(t);var i=e.subscribe({next:function(e){try{return t(e)}catch(t){r(t),i.unsubscribe()}},error:r,complete:n})})}}),h(w,{from:function(t){var e="function"==typeof this?this:w,n=y(c(t)[s]);if(n){var r=c(n.call(t));return r.constructor===e?r:new e(function(t){return r.subscribe(t)})}return new e(function(e){var n=!1;return a(function(){if(!n){try{if(p(t,!1,function(t){if(e.next(t),n)return d})===d)return}catch(t){if(n)throw t;return void e.error(t)}e.complete()}}),function(){n=!0}})},of:function(){for(var t=0,e=arguments.length,n=new Array(e);t<e;)n[t]=arguments[t++];return new("function"==typeof this?this:w)(function(t){var e=!1;return a(function(){if(!e){for(var r=0;r<n.length;++r)if(t.next(n[r]),e)return;t.complete()}}),function(){e=!0}})}}),f(w.prototype,s,function(){return this}),r(r.G,{Observable:w}),n(40)("Observable")},function(t,e,n){var r=n(2),i=n(0),o=n(64),a=[].slice,s=/MSIE .\./.test(o),u=function(t){return function(e,n){var r=arguments.length>2,i=!!r&&a.call(arguments,2);return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,n)}};i(i.G+i.B+i.F*s,{setTimeout:u(r.setTimeout),setInterval:u(r.setInterval)})},function(t,e,n){var r=n(0),i=n(95);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,e,n){for(var r=n(92),i=n(36),o=n(12),a=n(2),s=n(11),u=n(48),c=n(5),l=c("iterator"),h=c("toStringTag"),f=u.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(p),y=0;y<d.length;y++){var v,g=d[y],m=p[g],_=a[g],b=_&&_.prototype;if(b&&(b[l]||s(b,l,f),b[h]||s(b,h,g),u[g]=f,m))for(v in r)b[v]||o(b,v,r[v],!0)}},function(t,e,n){(function(e){!function(e){"use strict";var n,r=Object.prototype,i=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag",c="object"==typeof t,l=e.regeneratorRuntime;if(l)c&&(t.exports=l);else{(l=e.regeneratorRuntime=c?t.exports:{}).wrap=b;var h="suspendedStart",f="suspendedYield",p="executing",d="completed",y={},v={};v[a]=function(){return this};var g=Object.getPrototypeOf,m=g&&g(g(A([])));m&&m!==r&&i.call(m,a)&&(v=m);var _=C.prototype=E.prototype=Object.create(v);S.prototype=_.constructor=C,C.constructor=S,C[u]=S.displayName="GeneratorFunction",l.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===S||"GeneratorFunction"===(e.displayName||e.name))},l.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,C):(t.__proto__=C,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(_),t},l.awrap=function(t){return{__await:t}},x(T.prototype),T.prototype[s]=function(){return this},l.AsyncIterator=T,l.async=function(t,e,n,r){var i=new T(b(t,e,n,r));return l.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},x(_),_[u]="Generator",_[a]=function(){return this},_.toString=function(){return"[object Generator]"},l.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},l.values=A,I.prototype={constructor:I,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(O),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,i){return s.type="throw",s.arg=t,e.next=r,i&&(e.method="next",e.arg=n),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var u=i.call(a,"catchLoc"),c=i.call(a,"finallyLoc");if(u&&c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,y):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;O(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:A(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),y}}}function b(t,e,n,r){var i=e&&e.prototype instanceof E?e:E,o=Object.create(i.prototype),a=new I(r||[]);return o._invoke=function(t,e,n){var r=h;return function(i,o){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===i)throw o;return N()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=k(a,n);if(s){if(s===y)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===h)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var u=w(t,e,n);if("normal"===u.type){if(r=n.done?d:f,u.arg===y)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=d,n.method="throw",n.arg=u.arg)}}}(t,n,a),o}function w(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function E(){}function S(){}function C(){}function x(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function T(t){function n(e,r,o,a){var s=w(t[e],t,r);if("throw"!==s.type){var u=s.arg,c=u.value;return c&&"object"==typeof c&&i.call(c,"__await")?Promise.resolve(c.__await).then(function(t){n("next",t,o,a)},function(t){n("throw",t,o,a)}):Promise.resolve(c).then(function(t){u.value=t,o(u)},a)}a(s.arg)}var r;"object"==typeof e.process&&e.process.domain&&(n=e.process.domain.bind(n)),this._invoke=function(t,e){function i(){return new Promise(function(r,i){n(t,e,r,i)})}return r=r?r.then(i,i):i()}}function k(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,k(t,e),"throw"===e.method))return y;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var i=w(r,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,y;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,y):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,y)}function P(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function I(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(P,this),this.reset(!0)}function A(t){if(t){var e=t[a];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function e(){for(;++r<t.length;)if(i.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return o.next=o}}return{next:N}}function N(){return{value:n,done:!0}}}("object"==typeof e?e:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,n(50))},function(t,e,n){n(353),t.exports=n(19).RegExp.escape},function(t,e,n){var r=n(0),i=n(354)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return i(t)}})},function(t,e){t.exports=function(t,e){var n=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,n)}}},function(t,e,n){var r=n(356);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(373)(r,i);r.locals&&(t.exports=r.locals)},function(t,e,n){(e=t.exports=n(14)(!1)).i(n(357),""),e.i(n(358),""),e.i(n(359),""),e.i(n(360),""),e.i(n(361),""),e.i(n(362),""),e.i(n(363),""),e.i(n(364),""),e.i(n(365),""),e.i(n(366),""),e.i(n(367),""),e.i(n(368),"");var r=n(369),i=r(n(370)),o=r(n(371)),a=r(n(372));e.push([t.i,'@font-face {\r\n  font-family: "Emulogic";\r\n  src: url('+i+');\r\n}\r\n\r\n@font-face {\r\n  font-family: "Pixelettes";\r\n  src: url('+o+");\r\n}\r\n\r\nbody {\r\n  background-color: #72707d;\r\n  font: 0.95em Emulogic, Pixelettes, sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\ncanvas  {\r\n  background: url("+a+");\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n}",""])},function(t,e,n){(t.exports=n(14)(!1)).push([t.i,".choose-player-name {\n  position: fixed;\n  background:antiquewhite;\n  padding: 3%;\n  border: solid #72707d 5px;\n  top: 30vh;\n}\n\n.choose-player-name h1 {\n  font-family: Emulogic;\n  font-size: 12px;\n  color: #72707d;\n  text-align: center;\n  margin-bottom: 5%;\n}\n\n.choose-player-name label {\n  font-family: Emulogic;\n  font-size: 12px;\n  color: #72707d;\n}\n\n.choose-player-name .player-name {\n  border: none;\n  padding: 1%;\n  outline: none;\n}\n\n.choose-player-name .submit-button {\n  padding: 1%;\n  background: #72707d;\n  border: none;\n  outline: none;\n  font-family: Emulogic;\n  font-size: 12px;\n  color: antiquewhite;\n}\n\n.choose-player-name .submit-button:active {\n  background: antiquewhite;\n  color: #72707d;\n}\n\n.choose-player-name .close {\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 1%;\n  background: #72707d;\n  border: none;\n  outline: none;\n  font-family: Emulogic;\n  font-size: 12px;\n  color: antiquewhite;\n}\n\n.choose-player-name .close:active {\n  background: antiquewhite;\n  color: #72707d;\n}\n\n.only-english {\n  color: #72707d;\n  font-size: 9px;\n}",""])},function(t,e,n){(t.exports=n(14)(!1)).push([t.i,".header {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: antiquewhite;\n  width: 100%;\n}\n\n.landing-page h2 {\n  font-size: 18px;\n  color: #72707d;\n  margin: 4% 0 0;\n}\n\n.game-name {\n  font-size: 25px;\n  color: #72707d;\n  margin: 5% 0 0;\n}\n\n.header-content {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  width: 70%;\n  margin: 9% 0;\n}\n\n.header-descriptopn {\n  width: 70%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.game-description {\n  font-size: 14px;\n  line-height: 40px;\n  color: #72707d;\n}\n\n.play-button {\n  background: #72707d;\n  border: solid #72707d 4px;\n  outline: none;\n  font-family: Emulogic;\n  font-size: 16px;\n  color: antiquewhite;\n  width: auto;\n}\n\n.play-button:focus {\n  border: solid #3d3b47 4px;\n}\n\n.play-button:active {\n  background: antiquewhite;\n  color: #72707d;\n}\n\n.gameplay {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: antiquewhite;\n  width: 100%;\n  margin: 1% 0;\n}\n\n.gameplay-content {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n}\n\n.gameplay-screenshot {\n  width: 70%;\n  margin: 3% 0;\n}\n\nsection .contributors {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: antiquewhite;\n  width: 100%;\n  margin: 1% 0;\n}\n\n.contributors-description {\n  font-size: 12px;\n  line-height: 40px;\n  color: #72707d;\n}",""])},function(t,e,n){(t.exports=n(14)(!1)).push([t.i,".magic-spell-dialog {\n  position: absolute;\n  background:antiquewhite;\n  padding: 3%;\n  border: solid #72707d 5px;\n}\n\n.magic-spell-dialog h1 {\n  font-family: Emulogic;\n  font-size: 12px;\n  color: #72707d;\n  text-align: center;\n  margin-bottom: 5%;\n}\n\n.spell-button {\n  background: #72707d;\n  border: solid #72707d 4px;\n  outline: none;\n  font-family: Emulogic;\n  font-size: 12px;\n  color: antiquewhite;\n  margin: 5% 0;\n}\n\n.spell-button:focus {\n  border: solid #3d3b47 4px;\n}\n\n.magic-spell-dialog .spell-button:active {\n  background: antiquewhite;\n  color: #72707d;\n}\n\n.magic-spells {\n  display: flex;\n  justify-content: space-around;\n}\n\n.spells {\n  display: flex;\n  flex-direction: column;\n  margin: 0 2%;\n  justify-content: space-around;\n}\n\n.spell-type {\n  font-family: Emulogic;\n  font-size: 10px;\n  color: #72707d;\n  text-align: center;\n}\n",""])},function(t,e,n){(t.exports=n(14)(!1)).push([t.i,".tasks-dialog {\n  position: absolute;\n  background:antiquewhite;\n  padding: 3%;\n  border: solid #72707d 5px;\n}\n\n.tasks-dialog h1 {\n  font-family: Emulogic;\n  font-size: 12px;\n  color: #72707d;\n  text-align: center;\n  margin-bottom: 5%;\n}\n\n.tasks-dialog label {\n  font-family: Emulogic;\n  font-size: 12px;\n  color: #72707d;\n  display: flex;\n}\n\n.tasks-dialog .tasks-dialog-answer {\n  border: solid white;\n  padding: 1%;\n  outline: none;\n  display: inline-block;\n  width: auto;\n  transition: 0.2s;\n}\n\n.tasks-dialog .submit-button {\n  background: #72707d;\n  border: none;\n  outline: none;\n  font-family: Emulogic;\n  font-size: 12px;\n  color: antiquewhite;\n  width: auto;\n}\n\n.tasks-dialog .submit-button:active {\n  background: antiquewhite;\n  color: #72707d;\n}\n\n.task-simple-math-wrapper {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n.simple-math-oper {\n  margin: auto 5px;\n}\n\n.tasks-dialog-answer.wrong-input {\n  border: solid #ff8e8e;\n}",""])},function(t,e,n){(t.exports=n(14)(!1)).push([t.i,".tasks-dialog {\n  position: absolute;\n  background:antiquewhite;\n  padding: 3%;\n  border: solid #72707d 5px;\n}\n\n.tasks-dialog h1 {\n  font-family: Emulogic;\n  font-size: 12px;\n  font-weight: normal;\n  color: #72707d;\n  text-align: center;\n  margin-bottom: 5%;\n}\n\n.word-to-translate {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  margin: 5% auto;\n  color: #72707d;\n  font-weight: bold;\n}\n\n.tasks-dialog .tasks-dialog-answer {\n  border: solid white;\n  padding: 1%;\n  outline: none;\n  display: inline-block;\n  width: auto;\n  transition: 0.2s;\n}\n\n.tasks-dialog .submit-button {\n  background: #72707d;\n  border: none;\n  outline: none;\n  font-family: Emulogic;\n  font-size: 12px;\n  color: antiquewhite;\n  width: auto;\n}\n\n.tasks-dialog .submit-button:active {\n  background: antiquewhite;\n  color: #72707d;\n}\n\n.task-translation-wrapper {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n}\n\n.tasks-dialog-answer.wrong-input {\n  border: solid #ff8e8e;\n}\n",""])},function(t,e,n){(t.exports=n(14)(!1)).push([t.i,".tasks-dialog {\n  position: absolute;\n  background:antiquewhite;\n  padding: 3%;\n  border: solid #72707d 5px;\n}\n\n.tasks-dialog h1 {\n  font-family: Emulogic;\n  font-size: 12px;\n  font-weight: normal;\n  color: #72707d;\n  text-align: center;\n  margin-bottom: 5%;\n}\n\n\n.tasks-dialog .tasks-dialog-answer {\n  border: solid white;\n  padding: 1%;\n  outline: none;\n  display: inline-block;\n  width: auto;\n  transition: 0.2s;\n}\n\n.tasks-dialog .submit-button {\n  background: #72707d;\n  border: none;\n  outline: none;\n  font-family: Emulogic;\n  font-size: 12px;\n  color: antiquewhite;\n  width: auto;\n}\n\n.tasks-dialog .play-button {\n  background: #72707d;\n  border: none;\n  outline: none;\n  font-family: Emulogic;\n  font-size: 12px;\n  color: antiquewhite;\n  width: fit-content;\n  margin-bottom: 5%;\n}\n\n.tasks-dialog .play-button:active {\n  background: antiquewhite;\n  color: #72707d;\n}\n\n.tasks-dialog .submit-button:active {\n  background: antiquewhite;\n  color: #72707d;\n}\n\n.task-audition-wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.tasks-dialog-answer.wrong-input {\n  border: solid #ff8e8e;\n}\n\n.tasks-dialog .answer-block {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n}\n",""])},function(t,e,n){(t.exports=n(14)(!1)).push([t.i,".tasks-dialog {\n  position: absolute;\n  background:antiquewhite;\n  padding: 3%;\n  border: solid #72707d 5px;\n}\n\n.tasks-dialog h1 {\n  font-family: Emulogic;\n  font-size: 12px;\n  color: #72707d;\n  text-align: center;\n  margin-bottom: 5%;\n}\n\n.tasks-dialog label {\n  font-family: Emulogic;\n  font-size: 12px;\n  color: #72707d;\n  display: flex;\n}\n\n.tasks-dialog-form {\n  display: flex;\n  flex-direction: column;\n}\n\n.tasks-dialog .tasks-dialog-answer {\n  border: solid white;\n  padding: 1%;\n  outline: none;\n  display: inline-block;\n  width: auto;\n  transition: 0.2s;\n}\n\n.tasks-dialog .submit-button {\n  background: #72707d;\n  border: solid #72707d 4px;\n  outline: none;\n  font-family: Emulogic;\n  font-size: 12px;\n  color: antiquewhite;\n  width: auto;\n}\n\n.tasks-dialog .submit-button:active {\n  background: antiquewhite;\n  color: #72707d;\n}\n\n.tasks-dialog-answer.wrong-input {\n  border: solid #ff8e8e;\n}\n\n.task-drag-drop-wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.task-drag-drop-wrapper .letterList {\n  display: flex;\n  flex-direction: row;\n  padding: 0;\n  margin: 2% 0 5%;\n  width: 70%;\n  justify-content: space-around;\n  list-style: none;\n}\n\n.task-drag-drop-wrapper .letterListItem {\n  background: #72707d;\n  border: solid #72707d 4px;\n  color: antiquewhite;\n  min-width: 5%;\n  padding: 1%;\n}\n",""])},function(t,e,n){(t.exports=n(14)(!1)).push([t.i,".tasks-dialog {\n  position: absolute;\n  background:antiquewhite;\n  padding: 3%;\n  border: solid #72707d 5px;\n}\n\n.tasks-dialog h1 {\n  font-family: Emulogic;\n  font-size: 12px;\n  color: #72707d;\n  text-align: center;\n  margin-bottom: 5%;\n}\n\n.tasks-dialog label {\n  font-family: Emulogic;\n  font-size: 12px;\n  color: #72707d;\n  display: flex;\n}\n\n.tasks-dialog .tasks-dialog-answer {\n  border: solid white;\n  padding: 1%;\n  outline: none;\n  display: inline-block;\n  width: auto;\n  transition: 0.2s;\n}\n\n.tasks-dialog .submit-button {\n  background: #72707d;\n  border: none;\n  outline: none;\n  font-family: Emulogic;\n  font-size: 12px;\n  color: antiquewhite;\n  width: auto;\n}\n\n.tasks-dialog .submit-button:active {\n  background: antiquewhite;\n  color: #72707d;\n}\n\n.task-sequence-wrapper {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.tasks-dialog-answer.wrong-input {\n  border: solid #ff8e8e;\n}\n\n.tasks-dialog .sequence-block {\n  display: flex;\n  flex-direction: row;\n  padding: 0;\n  justify-content: space-around;\n  list-style: none;\n  color: #72707d;\n  width: 80%;\n  margin: 2% 0 5%;\n}\n\n.tasks-dialog .sequence-item {\n  background: #72707d;\n  border: solid #72707d 4px;\n  color: antiquewhite;\n  padding: 1%;\n  min-width: 15%;\n  text-align: center;\n}\n\n.tasks-dialog .sequence-item.item4 {\n  background: antiquewhite;\n  border: solid #72707d 4px;\n  color: #72707d;\n}",""])},function(t,e,n){(t.exports=n(14)(!1)).push([t.i,".tasks-dialog {\n  position: absolute;\n  background:antiquewhite;\n  padding: 3%;\n  border: solid #72707d 5px;\n}\n\n.tasks-dialog h1 {\n  font-family: Emulogic;\n  font-size: 12px;\n  color: #72707d;\n  text-align: center;\n  margin-bottom: 5%;\n}\n\n.tasks-dialog label {\n  font-family: Emulogic;\n  font-size: 12px;\n  color: #72707d;\n  display: flex;\n}\n\n.tasks-dialog .tasks-dialog-answer {\n  border: solid white;\n  padding: 1%;\n  outline: none;\n  display: inline-block;\n  width: auto;\n  transition: 0.2s;\n}\n\n.tasks-dialog .find-extra-item {\n  background: #72707d;\n  border: none;\n  outline: none;\n  font-family: Emulogic;\n  font-size: 12px;\n  color: antiquewhite;\n  width: auto;\n}\n\n.tasks-dialog .find-extra-item:active {\n  background: antiquewhite;\n  color: #72707d;\n}\n\n.task-find-extra-wrapper {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.tasks-dialog .find-extra-block {\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  justify-content: space-around;\n  list-style: none;\n  color: #72707d;\n  width: 100%;\n  align-items: center;\n}\n\n.task-find-extra-wrapper .row {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  width: 100%;\n}\n\n.row.row2 {\n  margin: 5% 0 0;\n}\n\n.tasks-dialog .find-extra-item {\n  background: #72707d;\n  border: solid #72707d 4px;\n  color: antiquewhite;\n  padding: 1%;\n  min-width: 45%;\n  text-align: center;\n  flex: none;\n}\n\n.tasks-dialog .find-extra-item:focus {\n  border: solid #3d3b47 4px;\n}\n",""])},function(t,e,n){(t.exports=n(14)(!1)).push([t.i,".score-section {\n  position: absolute;\n  background:antiquewhite;\n  padding: 3%;\n  border: solid #72707d 5px;\n  width: 70%;\n  color: #72707d;\n  overflow-y: scroll;\n  max-height: 70%;\n}\n\n.score-section h1 {\n  font-family: Emulogic;\n  font-size: 16px;\n\n  text-align: center;\n  margin-bottom: 5%;\n}\n\n.score-table {\n  width: 100%;\n  border-collapse: separate;\n  border-spacing: 10px 10px;\n}\n\n.score-table-header {\n  font-size: 12px;\n  color: #72707d;\n}\n\n.score-table td {\n  text-align: center;\n  font-size: 12px;\n  color: #989393;\n}\n\n.score-section .close {\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 1%;\n  background: #72707d;\n  border: none;\n  outline: none;\n  font-family: Emulogic;\n  font-size: 12px;\n  color: antiquewhite;\n}\n\n.score-section .close:active {\n  background: antiquewhite;\n  color: #72707d;\n}\n",""])},function(t,e,n){(t.exports=n(14)(!1)).push([t.i,".sound-button {\n  position: fixed;\n  top: 85%;\n  left: 88%;\n  background: #72707d;\n  color: antiquewhite;\n  padding: 1%;\n  border: solid #72707d 4px;\n  font: 12px Emulogic, Pixelettes, sans-serif;\n  outline: none;\n}\n\n.sound-button:focus {\n  border: solid #3d3b47 4px;\n}\n\n.sound-button:active {\n  background: antiquewhite;\n  color: #72707d;\n}",""])},function(t,e,n){(t.exports=n(14)(!1)).push([t.i,".game-info-button {\n  position: fixed;\n  top: 85%;\n  left: 74%;\n  background: #72707d;\n  color: antiquewhite;\n  padding: 1%;\n  border: solid #72707d 4px;\n  font: 12px Emulogic, Pixelettes, sans-serif;\n  outline: none;\n}\n\n.game-info-button:focus {\n  border: solid #3d3b47 4px;\n}\n\n.game-info-button:active {\n  background: antiquewhite;\n  color: #72707d;\n}\n\n.game-info-popup {\n  position: fixed;\n  background:antiquewhite;\n  padding: 3%;\n  border: solid #72707d 5px;\n  top: 15vh;\n  z-index: 1;\n}\n\n.game-info-popup .close {\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 1%;\n  background: #72707d;\n  border: none;\n  outline: none;\n  font-family: Emulogic;\n  font-size: 12px;\n  color: antiquewhite;\n}\n\n.game-info-popup .close:active {\n  background: antiquewhite;\n  color: #72707d;\n}\n\n.game-info-popup h1 {\n  font-family: Emulogic;\n  font-size: 12px;\n  color: #72707d;\n  text-align: center;\n  margin-bottom: 5%;\n}\n\n.game-info-list {\n  font-family: Emulogic;\n  font-size: 12px;\n  color: #72707d;\n}\n\n.game-info-list li {\n  margin: 5% 0;\n}",""])},function(t,e,n){"use strict";t.exports=function(t){return"string"!=typeof t?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),/["'() \t\n]/.test(t)?'"'+t.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':t)}},function(t,e,n){t.exports=n.p+"fonts/b10849c899982654fae3f01d02269043-emulogic.ttf"},function(t,e,n){t.exports=n.p+"fonts/f575d80d6ea4500a02445404c8401d3b-SlimThinPixelettes.otf"},function(t,e,n){t.exports=n.p+"images/b3cc610638af167089564f99d91ed1a6-background_edited.png"},function(t,e,n){var r,i,o={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),s=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var r=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}}(),u=null,c=0,l=[],h=n(374);function f(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=o[r.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(m(r.parts[a],e))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(m(r.parts[a],e));o[r.id]={id:r.id,refs:1,parts:s}}}}function p(t,e){for(var n=[],r={},i=0;i<t.length;i++){var o=t[i],a=e.base?o[0]+e.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function d(t,e){var n=s(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),l.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=s(t.insertAt.before,n);n.insertBefore(e,i)}}function y(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function v(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return n.nc}();r&&(t.attrs.nonce=r)}return g(e,t.attrs),d(t,e),e}function g(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function m(t,e){var n,r,i,o;if(e.transform&&t.css){if(!(o="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=o}if(e.singleton){var a=c++;n=u||(u=v(e)),r=w.bind(null,n,a,!1),i=w.bind(null,n,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",g(e,t.attrs),d(t,e),e}(e),r=function(t,e,n){var r=n.css,i=n.sourceMap,o=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||o)&&(r=h(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([r],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,e),i=function(){y(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){y(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=p(t,e);return f(n,e),function(t){for(var r=[],i=0;i<n.length;i++){var a=n[i];(s=o[a.id]).refs--,r.push(s)}t&&f(p(t,e),e);for(i=0;i<r.length;i++){var s;if(0===(s=r[i]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete o[s.id]}}}};var _,b=(_=[],function(t,e){return _[t]=e,_.filter(Boolean).join("\n")});function w(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=b(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var i,o=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(t,e,n){"use strict";n.r(e),function(t,e){n(378);var r=setTimeout;function i(){}function o(t){if(!(this instanceof o))throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],h(t,this)}function a(t,e){for(;3===t._state;)t=t._value;0!==t._state?(t._handled=!0,o._immediateFn(function(){var n=1===t._state?e.onFulfilled:e.onRejected;if(null!==n){var r;try{r=n(t._value)}catch(t){return void u(e.promise,t)}s(e.promise,r)}else(1===t._state?s:u)(e.promise,t._value)})):t._deferreds.push(e)}function s(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var n=e.then;if(e instanceof o)return t._state=3,t._value=e,void c(t);if("function"==typeof n)return void h((r=n,i=e,function(){r.apply(i,arguments)}),t)}t._state=1,t._value=e,c(t)}catch(e){u(t,e)}var r,i}function u(t,e){t._state=2,t._value=e,c(t)}function c(t){2===t._state&&0===t._deferreds.length&&o._immediateFn(function(){t._handled||o._unhandledRejectionFn(t._value)});for(var e=0,n=t._deferreds.length;e<n;e++)a(t,t._deferreds[e]);t._deferreds=null}function l(t,e,n){this.onFulfilled="function"==typeof t?t:null,this.onRejected="function"==typeof e?e:null,this.promise=n}function h(t,e){var n=!1;try{t(function(t){n||(n=!0,s(e,t))},function(t){n||(n=!0,u(e,t))})}catch(t){if(n)return;n=!0,u(e,t)}}o.prototype.catch=function(t){return this.then(null,t)},o.prototype.then=function(t,e){var n=new this.constructor(i);return a(this,new l(t,e,n)),n},o.prototype.finally=function(t){var e=this.constructor;return this.then(function(n){return e.resolve(t()).then(function(){return n})},function(n){return e.resolve(t()).then(function(){return e.reject(n)})})},o.all=function(t){return new o(function(e,n){if(!t||void 0===t.length)throw new TypeError("Promise.all accepts an array");var r=Array.prototype.slice.call(t);if(0===r.length)return e([]);var i=r.length;function o(t,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var s=a.then;if("function"==typeof s)return void s.call(a,function(e){o(t,e)},n)}r[t]=a,0==--i&&e(r)}catch(t){n(t)}}for(var a=0;a<r.length;a++)o(a,r[a])})},o.resolve=function(t){return t&&"object"==typeof t&&t.constructor===o?t:new o(function(e){e(t)})},o.reject=function(t){return new o(function(e,n){n(t)})},o.race=function(t){return new o(function(e,n){for(var r=0,i=t.length;r<i;r++)t[r].then(e,n)})},o._immediateFn="function"==typeof t&&function(e){t(e)}||function(t){r(t,0)},o._unhandledRejectionFn=function(t){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",t)};var f=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e)return e;throw new Error("unable to locate global object")}();function p(t,e){return t(e={exports:{}},e.exports),e.exports}f.Promise||(f.Promise=o);var d=p(function(t){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)}),y=p(function(t){var e=t.exports={version:"2.5.5"};"number"==typeof __e&&(__e=e)}),v=(y.version,function(t){return"object"==typeof t?null!==t:"function"==typeof t}),g=function(t){if(!v(t))throw TypeError(t+" is not an object!");return t},m=function(t){try{return!!t()}catch(t){return!0}},_=!m(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}),b=d.document,w=v(b)&&v(b.createElement),E=function(t){return w?b.createElement(t):{}},S=!_&&!m(function(){return 7!=Object.defineProperty(E("div"),"a",{get:function(){return 7}}).a}),C=function(t,e){if(!v(t))return t;var n,r;if(e&&"function"==typeof(n=t.toString)&&!v(r=n.call(t)))return r;if("function"==typeof(n=t.valueOf)&&!v(r=n.call(t)))return r;if(!e&&"function"==typeof(n=t.toString)&&!v(r=n.call(t)))return r;throw TypeError("Can't convert object to primitive value")},x=Object.defineProperty,T={f:_?Object.defineProperty:function(t,e,n){if(g(t),e=C(e,!0),g(n),S)try{return x(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},k=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},P=_?function(t,e,n){return T.f(t,e,k(1,n))}:function(t,e,n){return t[e]=n,t},O={}.hasOwnProperty,I=function(t,e){return O.call(t,e)},A=0,N=Math.random(),R=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++A+N).toString(36))},D=p(function(t){var e=R("src"),n=Function.toString,r=(""+n).split("toString");y.inspectSource=function(t){return n.call(t)},(t.exports=function(t,n,i,o){var a="function"==typeof i;a&&(I(i,"name")||P(i,"name",n)),t[n]!==i&&(a&&(I(i,e)||P(i,e,t[n]?""+t[n]:r.join(String(n)))),t===d?t[n]=i:o?t[n]?t[n]=i:P(t,n,i):(delete t[n],P(t,n,i)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[e]||n.call(this)})}),F=function(t,e,n){if(function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!")}(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}},M=function(t,e,n){var r,i,o,a,s=t&M.F,u=t&M.G,c=t&M.S,l=t&M.P,h=t&M.B,f=u?d:c?d[e]||(d[e]={}):(d[e]||{}).prototype,p=u?y:y[e]||(y[e]={}),v=p.prototype||(p.prototype={});for(r in u&&(n=e),n)o=((i=!s&&f&&void 0!==f[r])?f:n)[r],a=h&&i?F(o,d):l&&"function"==typeof o?F(Function.call,o):o,f&&D(f,r,o,t&M.U),p[r]!=o&&P(p,r,a),l&&v[r]!=o&&(v[r]=o)};d.core=y,M.F=1,M.G=2,M.S=4,M.P=8,M.B=16,M.W=32,M.U=64,M.R=128;var L=M,j={}.toString,q=function(t){return j.call(t).slice(8,-1)},W=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==q(t)?t.split(""):Object(t)},U=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t},B=function(t){return Object(U(t))},H=Math.ceil,V=Math.floor,Q=function(t){return isNaN(t=+t)?0:(t>0?V:H)(t)},z=Math.min,Y=function(t){return t>0?z(Q(t),9007199254740991):0},G=Array.isArray||function(t){return"Array"==q(t)},K=d["__core-js_shared__"]||(d["__core-js_shared__"]={}),X=function(t){return K[t]||(K[t]={})},$=p(function(t){var e=X("wks"),n=d.Symbol,r="function"==typeof n;(t.exports=function(t){return e[t]||(e[t]=r&&n[t]||(r?n:R)("Symbol."+t))}).store=e}),J=$("species"),Z=function(t,e){return new(function(t){var e;return G(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!G(e.prototype)||(e=void 0),v(e)&&null===(e=e[J])&&(e=void 0)),void 0===e?Array:e}(t))(e)},tt=function(t,e){var n=1==t,r=2==t,i=3==t,o=4==t,a=6==t,s=5==t||a,u=e||Z;return function(e,c,l){for(var h,f,p=B(e),d=W(p),y=F(c,l,3),v=Y(d.length),g=0,m=n?u(e,v):r?u(e,0):void 0;v>g;g++)if((s||g in d)&&(f=y(h=d[g],g,p),t))if(n)m[g]=f;else if(f)switch(t){case 3:return!0;case 5:return h;case 6:return g;case 2:m.push(h)}else if(o)return!1;return a?-1:i||o?o:m}},et=$("unscopables"),nt=Array.prototype;null==nt[et]&&P(nt,et,{});var rt=function(t){nt[et][t]=!0},it=tt(5),ot=!0;"find"in[]&&Array(1).find(function(){ot=!1}),L(L.P+L.F*ot,"Array",{find:function(t){return it(this,t,arguments.length>1?arguments[1]:void 0)}}),rt("find");y.Array.find;var at=tt(6),st=!0;"findIndex"in[]&&Array(1).findIndex(function(){st=!1}),L(L.P+L.F*st,"Array",{findIndex:function(t){return at(this,t,arguments.length>1?arguments[1]:void 0)}}),rt("findIndex");y.Array.findIndex;var ut,ct=function(t){return W(U(t))},lt=Math.max,ht=Math.min,ft=X("keys"),pt=function(t){return ft[t]||(ft[t]=R(t))},dt=(ut=!1,function(t,e,n){var r,i=ct(t),o=Y(i.length),a=function(t,e){return(t=Q(t))<0?lt(t+e,0):ht(t,e)}(n,o);if(ut&&e!=e){for(;o>a;)if((r=i[a++])!=r)return!0}else for(;o>a;a++)if((ut||a in i)&&i[a]===e)return ut||a||0;return!ut&&-1}),yt=pt("IE_PROTO"),vt=function(t,e){var n,r=ct(t),i=0,o=[];for(n in r)n!=yt&&I(r,n)&&o.push(n);for(;e.length>i;)I(r,n=e[i++])&&(~dt(o,n)||o.push(n));return o},gt="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),mt=Object.keys||function(t){return vt(t,gt)},_t={f:Object.getOwnPropertySymbols},bt={f:{}.propertyIsEnumerable},wt=Object.assign,Et=!wt||m(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=wt({},t)[n]||Object.keys(wt({},e)).join("")!=r})?function(t,e){for(var n=B(t),r=arguments.length,i=1,o=_t.f,a=bt.f;r>i;)for(var s,u=W(arguments[i++]),c=o?mt(u).concat(o(u)):mt(u),l=c.length,h=0;l>h;)a.call(u,s=c[h++])&&(n[s]=u[s]);return n}:wt;L(L.S+L.F,"Object",{assign:Et});y.Object.assign;var St=$("match"),Ct=function(t,e,n){if(v(r=e)&&(void 0!==(i=r[St])?i:"RegExp"==q(r)))throw TypeError("String#"+n+" doesn't accept regex!");var r,i;return String(U(t))},xt=$("match"),Tt="".startsWith;L(L.P+L.F*function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[xt]=!1,!"/./"[t](e)}catch(t){}}return!0}("startsWith"),"String",{startsWith:function(t){var e=Ct(this,t,"startsWith"),n=Y(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return Tt?Tt.call(e,r,n):e.slice(n,n+r.length)===r}});y.String.startsWith;L(L.P,"String",{repeat:function(t){var e=String(U(this)),n="",r=Q(t);if(r<0||r==1/0)throw RangeError("Count can't be negative");for(;r>0;(r>>>=1)&&(e+=e))1&r&&(n+=e);return n}});y.String.repeat;var kt=p(function(t){var e=R("meta"),n=T.f,r=0,i=Object.isExtensible||function(){return!0},o=!m(function(){return i(Object.preventExtensions({}))}),a=function(t){n(t,e,{value:{i:"O"+ ++r,w:{}}})},s=t.exports={KEY:e,NEED:!1,fastKey:function(t,n){if(!v(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!I(t,e)){if(!i(t))return"F";if(!n)return"E";a(t)}return t[e].i},getWeak:function(t,n){if(!I(t,e)){if(!i(t))return!0;if(!n)return!1;a(t)}return t[e].w},onFreeze:function(t){return o&&s.NEED&&i(t)&&!I(t,e)&&a(t),t}}}),Pt=(kt.KEY,kt.NEED,kt.fastKey,kt.getWeak,kt.onFreeze,T.f),Ot=$("toStringTag"),It=function(t,e,n){t&&!I(t=n?t:t.prototype,Ot)&&Pt(t,Ot,{configurable:!0,value:e})},At={f:$},Nt=T.f,Rt=function(t){var e=y.Symbol||(y.Symbol=d.Symbol||{});"_"==t.charAt(0)||t in e||Nt(e,t,{value:At.f(t)})},Dt=_?Object.defineProperties:function(t,e){g(t);for(var n,r=mt(e),i=r.length,o=0;i>o;)T.f(t,n=r[o++],e[n]);return t},Ft=d.document,Mt=Ft&&Ft.documentElement,Lt=pt("IE_PROTO"),jt=function(){},qt=function(){var t,e=E("iframe"),n=gt.length;for(e.style.display="none",Mt.appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),qt=t.F;n--;)delete qt.prototype[gt[n]];return qt()},Wt=Object.create||function(t,e){var n;return null!==t?(jt.prototype=g(t),n=new jt,jt.prototype=null,n[Lt]=t):n=qt(),void 0===e?n:Dt(n,e)},Ut=gt.concat("length","prototype"),Bt={f:Object.getOwnPropertyNames||function(t){return vt(t,Ut)}},Ht=Bt.f,Vt={}.toString,Qt="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],zt={f:function(t){return Qt&&"[object Window]"==Vt.call(t)?function(t){try{return Ht(t)}catch(t){return Qt.slice()}}(t):Ht(ct(t))}},Yt=Object.getOwnPropertyDescriptor,Gt={f:_?Yt:function(t,e){if(t=ct(t),e=C(e,!0),S)try{return Yt(t,e)}catch(t){}if(I(t,e))return k(!bt.f.call(t,e),t[e])}},Kt=kt.KEY,Xt=Gt.f,$t=T.f,Jt=zt.f,Zt=d.Symbol,te=d.JSON,ee=te&&te.stringify,ne=$("_hidden"),re=$("toPrimitive"),ie={}.propertyIsEnumerable,oe=X("symbol-registry"),ae=X("symbols"),se=X("op-symbols"),ue=Object.prototype,ce="function"==typeof Zt,le=d.QObject,he=!le||!le.prototype||!le.prototype.findChild,fe=_&&m(function(){return 7!=Wt($t({},"a",{get:function(){return $t(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=Xt(ue,e);r&&delete ue[e],$t(t,e,n),r&&t!==ue&&$t(ue,e,r)}:$t,pe=function(t){var e=ae[t]=Wt(Zt.prototype);return e._k=t,e},de=ce&&"symbol"==typeof Zt.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof Zt},ye=function(t,e,n){return t===ue&&ye(se,e,n),g(t),e=C(e,!0),g(n),I(ae,e)?(n.enumerable?(I(t,ne)&&t[ne][e]&&(t[ne][e]=!1),n=Wt(n,{enumerable:k(0,!1)})):(I(t,ne)||$t(t,ne,k(1,{})),t[ne][e]=!0),fe(t,e,n)):$t(t,e,n)},ve=function(t,e){g(t);for(var n,r=function(t){var e=mt(t),n=_t.f;if(n)for(var r,i=n(t),o=bt.f,a=0;i.length>a;)o.call(t,r=i[a++])&&e.push(r);return e}(e=ct(e)),i=0,o=r.length;o>i;)ye(t,n=r[i++],e[n]);return t},ge=function(t){var e=ie.call(this,t=C(t,!0));return!(this===ue&&I(ae,t)&&!I(se,t))&&(!(e||!I(this,t)||!I(ae,t)||I(this,ne)&&this[ne][t])||e)},me=function(t,e){if(t=ct(t),e=C(e,!0),t!==ue||!I(ae,e)||I(se,e)){var n=Xt(t,e);return!n||!I(ae,e)||I(t,ne)&&t[ne][e]||(n.enumerable=!0),n}},_e=function(t){for(var e,n=Jt(ct(t)),r=[],i=0;n.length>i;)I(ae,e=n[i++])||e==ne||e==Kt||r.push(e);return r},be=function(t){for(var e,n=t===ue,r=Jt(n?se:ct(t)),i=[],o=0;r.length>o;)!I(ae,e=r[o++])||n&&!I(ue,e)||i.push(ae[e]);return i};ce||(D((Zt=function(){if(this instanceof Zt)throw TypeError("Symbol is not a constructor!");var t=R(arguments.length>0?arguments[0]:void 0),e=function(n){this===ue&&e.call(se,n),I(this,ne)&&I(this[ne],t)&&(this[ne][t]=!1),fe(this,t,k(1,n))};return _&&he&&fe(ue,t,{configurable:!0,set:e}),pe(t)}).prototype,"toString",function(){return this._k}),Gt.f=me,T.f=ye,Bt.f=zt.f=_e,bt.f=ge,_t.f=be,_&&D(ue,"propertyIsEnumerable",ge,!0),At.f=function(t){return pe($(t))}),L(L.G+L.W+L.F*!ce,{Symbol:Zt});for(var we="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),Ee=0;we.length>Ee;)$(we[Ee++]);for(var Se=mt($.store),Ce=0;Se.length>Ce;)Rt(Se[Ce++]);L(L.S+L.F*!ce,"Symbol",{for:function(t){return I(oe,t+="")?oe[t]:oe[t]=Zt(t)},keyFor:function(t){if(!de(t))throw TypeError(t+" is not a symbol!");for(var e in oe)if(oe[e]===t)return e},useSetter:function(){he=!0},useSimple:function(){he=!1}}),L(L.S+L.F*!ce,"Object",{create:function(t,e){return void 0===e?Wt(t):ve(Wt(t),e)},defineProperty:ye,defineProperties:ve,getOwnPropertyDescriptor:me,getOwnPropertyNames:_e,getOwnPropertySymbols:be}),te&&L(L.S+L.F*(!ce||m(function(){var t=Zt();return"[null]"!=ee([t])||"{}"!=ee({a:t})||"{}"!=ee(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=e=r[1],(v(e)||void 0!==t)&&!de(t))return G(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!de(e))return e}),r[1]=e,ee.apply(te,r)}}),Zt.prototype[re]||P(Zt.prototype,re,Zt.prototype.valueOf),It(Zt,"Symbol"),It(Math,"Math",!0),It(d.JSON,"JSON",!0);var xe=$("toStringTag"),Te="Arguments"==q(function(){return arguments}()),ke={};ke[$("toStringTag")]="z",ke+""!="[object z]"&&D(Object.prototype,"toString",function(){return"[object "+(void 0===(t=this)?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),xe))?n:Te?q(e):"Object"==(r=q(e))&&"function"==typeof e.callee?"Arguments":r)+"]";var t,e,n,r},!0),Rt("asyncIterator"),Rt("observable");y.Symbol;var Pe={},Oe={};P(Oe,$("iterator"),function(){return this});var Ie,Ae=function(t,e,n){t.prototype=Wt(Oe,{next:k(1,n)}),It(t,e+" Iterator")},Ne=pt("IE_PROTO"),Re=Object.prototype,De=Object.getPrototypeOf||function(t){return t=B(t),I(t,Ne)?t[Ne]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?Re:null},Fe=$("iterator"),Me=!([].keys&&"next"in[].keys()),Le=function(){return this},je=function(t,e,n,r,i,o,a){Ae(n,e,r);var s,u,c,l=function(t){if(!Me&&t in d)return d[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},h=e+" Iterator",f="values"==i,p=!1,d=t.prototype,y=d[Fe]||d["@@iterator"]||i&&d[i],v=y||l(i),g=i?f?l("entries"):v:void 0,m="Array"==e&&d.entries||y;if(m&&(c=De(m.call(new t)))!==Object.prototype&&c.next&&(It(c,h,!0),"function"!=typeof c[Fe]&&P(c,Fe,Le)),f&&y&&"values"!==y.name&&(p=!0,v=function(){return y.call(this)}),(Me||p||!d[Fe])&&P(d,Fe,v),Pe[e]=v,Pe[h]=Le,i)if(s={values:f?v:l("values"),keys:o?v:l("keys"),entries:g},a)for(u in s)u in d||D(d,u,s[u]);else L(L.P+L.F*(Me||p),e,s);return s},qe=(Ie=!0,function(t,e){var n,r,i=String(U(t)),o=Q(e),a=i.length;return o<0||o>=a?Ie?"":void 0:(n=i.charCodeAt(o))<55296||n>56319||o+1===a||(r=i.charCodeAt(o+1))<56320||r>57343?Ie?i.charAt(o):n:Ie?i.slice(o,o+2):r-56320+(n-55296<<10)+65536});je(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=qe(e,n),this._i+=t.length,{value:t,done:!1})});var We=function(t,e){return{value:e,done:!!t}},Ue=je(Array,"Array",function(t,e){this._t=ct(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,We(1)):We(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values");Pe.Arguments=Pe.Array,rt("keys"),rt("values"),rt("entries");for(var Be=$("iterator"),He=$("toStringTag"),Ve=Pe.Array,Qe={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},ze=mt(Qe),Ye=0;Ye<ze.length;Ye++){var Ge,Ke=ze[Ye],Xe=Qe[Ke],$e=d[Ke],Je=$e&&$e.prototype;if(Je&&(Je[Be]||P(Je,Be,Ve),Je[He]||P(Je,He,Ke),Pe[Ke]=Ve,Xe))for(Ge in Ue)Je[Ge]||D(Je,Ge,Ue[Ge],!0)}At.f("iterator")}.call(this,n(376).setImmediate,n(50))},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(377),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(50))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i,o,a,s,u=1,c={},l=!1,h=t.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(t);f=f&&f.setTimeout?f:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){d(t)})}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){d(t.data)},r=function(t){o.port2.postMessage(t)}):h&&"onreadystatechange"in h.createElement("script")?(i=h.documentElement,r=function(t){var e=h.createElement("script");e.onreadystatechange=function(){d(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):r=function(t){setTimeout(d,0,t)}:(a="setImmediate$"+Math.random()+"$",s=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(a)&&d(+e.data.slice(a.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),r=function(e){t.postMessage(a+e,"*")}),f.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var i={callback:t,args:e};return c[u]=i,r(u),u++},f.clearImmediate=p}function p(t){delete c[t]}function d(t){if(l)setTimeout(d,0,t);else{var e=c[t];if(e){l=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{p(t),l=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(50),n(135))},function(t,e){!function(t){"use strict";if(!t.fetch){var e={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};if(e.arrayBuffer)var n=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],r=function(t){return t&&DataView.prototype.isPrototypeOf(t)},i=ArrayBuffer.isView||function(t){return t&&n.indexOf(Object.prototype.toString.call(t))>-1};l.prototype.append=function(t,e){t=s(t),e=u(e);var n=this.map[t];this.map[t]=n?n+","+e:e},l.prototype.delete=function(t){delete this.map[s(t)]},l.prototype.get=function(t){return t=s(t),this.has(t)?this.map[t]:null},l.prototype.has=function(t){return this.map.hasOwnProperty(s(t))},l.prototype.set=function(t,e){this.map[s(t)]=u(e)},l.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},l.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),c(t)},l.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),c(t)},l.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),c(t)},e.iterable&&(l.prototype[Symbol.iterator]=l.prototype.entries);var o=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];v.prototype.clone=function(){return new v(this,{body:this._bodyInit})},y.call(v.prototype),y.call(m.prototype),m.prototype.clone=function(){return new m(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new l(this.headers),url:this.url})},m.error=function(){var t=new m(null,{status:0,statusText:""});return t.type="error",t};var a=[301,302,303,307,308];m.redirect=function(t,e){if(-1===a.indexOf(e))throw new RangeError("Invalid status code");return new m(null,{status:e,headers:{location:t}})},t.Headers=l,t.Request=v,t.Response=m,t.fetch=function(t,n){return new Promise(function(r,i){var o=new v(t,n),a=new XMLHttpRequest;a.onload=function(){var t,e,n={status:a.status,statusText:a.statusText,headers:(t=a.getAllResponseHeaders()||"",e=new l,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var n=t.split(":"),r=n.shift().trim();if(r){var i=n.join(":").trim();e.append(r,i)}}),e)};n.url="responseURL"in a?a.responseURL:n.headers.get("X-Request-URL");var i="response"in a?a.response:a.responseText;r(new m(i,n))},a.onerror=function(){i(new TypeError("Network request failed"))},a.ontimeout=function(){i(new TypeError("Network request failed"))},a.open(o.method,o.url,!0),"include"===o.credentials?a.withCredentials=!0:"omit"===o.credentials&&(a.withCredentials=!1),"responseType"in a&&e.blob&&(a.responseType="blob"),o.headers.forEach(function(t,e){a.setRequestHeader(e,t)}),a.send(void 0===o._bodyInit?null:o._bodyInit)})},t.fetch.polyfill=!0}function s(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function u(t){return"string"!=typeof t&&(t=String(t)),t}function c(t){var n={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return e.iterable&&(n[Symbol.iterator]=function(){return n}),n}function l(t){this.map={},t instanceof l?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function h(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function f(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function p(t){var e=new FileReader,n=f(e);return e.readAsArrayBuffer(t),n}function d(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function y(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,t)if("string"==typeof t)this._bodyText=t;else if(e.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(e.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(e.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(e.arrayBuffer&&e.blob&&r(t))this._bodyArrayBuffer=d(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!e.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t)&&!i(t))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=d(t)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):e.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},e.blob&&(this.blob=function(){var t=h(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?h(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(p)}),this.text=function(){var t,e,n,r=h(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,e=new FileReader,n=f(e),e.readAsText(t),n;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),n=new Array(e.length),r=0;r<e.length;r++)n[r]=String.fromCharCode(e[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},e.formData&&(this.formData=function(){return this.text().then(g)}),this.json=function(){return this.text().then(JSON.parse)},this}function v(t,e){var n,r,i=(e=e||{}).body;if(t instanceof v){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new l(t.headers)),this.method=t.method,this.mode=t.mode,i||null==t._bodyInit||(i=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new l(e.headers)),this.method=(n=e.method||this.method||"GET",r=n.toUpperCase(),o.indexOf(r)>-1?r:n),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&i)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(i)}function g(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),i=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(i))}}),e}function m(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new l(e.headers),this.url=e.url||"",this._initBody(t)}}("undefined"!=typeof self?self:this)},function(t,e,n){"use strict";n.r(e),n.d(e,"__extends",function(){return i}),n.d(e,"__assign",function(){return o}),n.d(e,"__rest",function(){return a}),n.d(e,"__decorate",function(){return s}),n.d(e,"__param",function(){return u}),n.d(e,"__metadata",function(){return c}),n.d(e,"__awaiter",function(){return l}),n.d(e,"__generator",function(){return h}),n.d(e,"__exportStar",function(){return f}),n.d(e,"__values",function(){return p}),n.d(e,"__read",function(){return d}),n.d(e,"__spread",function(){return y}),n.d(e,"__await",function(){return v}),n.d(e,"__asyncGenerator",function(){return g}),n.d(e,"__asyncDelegator",function(){return m}),n.d(e,"__asyncValues",function(){return _}),n.d(e,"__makeTemplateObject",function(){return b}),n.d(e,"__importStar",function(){return w}),n.d(e,"__importDefault",function(){return E});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t};function a(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&(n[r[i]]=t[r[i]])}return n}function s(t,e,n,r){var i,o=arguments.length,a=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(o<3?i(a):o>3?i(e,n,a):i(e,n))||a);return o>3&&a&&Object.defineProperty(e,n,a),a}function u(t,e){return function(n,r){e(n,r,t)}}function c(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function l(t,e,n,r){return new(n||(n=Promise))(function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(a,s)}u((r=r.apply(t,e||[])).next())})}function h(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=r[2&o[0]?"return":o[0]?"throw":"next"])&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[0,i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function f(t,e){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}function p(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}function d(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function y(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(d(arguments[e]));return t}function v(t){return this instanceof v?(this.v=t,this):new v(t)}function g(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){i[t]&&(r[t]=function(e){return new Promise(function(n,r){o.push([t,e,n,r])>1||s(t,e)})})}function s(t,e){try{(n=i[t](e)).value instanceof v?Promise.resolve(n.value.v).then(u,c):l(o[0][2],n)}catch(t){l(o[0][3],t)}var n}function u(t){s("next",t)}function c(t){s("throw",t)}function l(t,e){t(e),o.shift(),o.length&&s(o[0][0],o[0][1])}}function m(t){var e,n;return e={},r("next"),r("throw",function(t){throw t}),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,i){t[r]&&(e[r]=function(e){return(n=!n)?{value:v(t[r](e)),done:"return"===r}:i?i(e):e})}}function _(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e=t[Symbol.asyncIterator];return e?e.call(t):p(t)}function b(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function w(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}function E(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";(function(r){Object.defineProperty(e,"__esModule",{value:!0});var i,o,a=n(137),s=n(381),u=n(382),c=(i=n(136))&&"object"==typeof i&&"default"in i?i.default:i,l=function(){function t(t){this.domStorage_=t,this.prefix_="firebase:"}return t.prototype.set=function(t,e){null==e?this.domStorage_.removeItem(this.prefixedName_(t)):this.domStorage_.setItem(this.prefixedName_(t),a.stringify(e))},t.prototype.get=function(t){var e=this.domStorage_.getItem(this.prefixedName_(t));return null==e?null:a.jsonEval(e)},t.prototype.remove=function(t){this.domStorage_.removeItem(this.prefixedName_(t))},t.prototype.prefixedName_=function(t){return this.prefix_+t},t.prototype.toString=function(){return this.domStorage_.toString()},t}(),h=function(){function t(){this.cache_={},this.isInMemoryStorage=!0}return t.prototype.set=function(t,e){null==e?delete this.cache_[t]:this.cache_[t]=e},t.prototype.get=function(t){return a.contains(this.cache_,t)?this.cache_[t]:null},t.prototype.remove=function(t){delete this.cache_[t]},t}(),f=function(t){try{if("undefined"!=typeof window&&void 0!==window[t]){var e=window[t];return e.setItem("firebase:sentinel","cache"),e.removeItem("firebase:sentinel"),new l(e)}}catch(t){}return new h},p=f("localStorage"),d=f("sessionStorage"),y=new s.Logger("@firebase/database"),v=(o=1,function(){return o++}),g=function(t){var e=a.stringToByteArray(t),n=new a.Sha1;n.update(e);var r=n.digest();return a.base64.encodeByteArray(r)},m=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n="",r=0;r<t.length;r++)Array.isArray(t[r])||t[r]&&"object"==typeof t[r]&&"number"==typeof t[r].length?n+=m.apply(null,t[r]):"object"==typeof t[r]?n+=a.stringify(t[r]):n+=t[r],n+=" ";return n},_=null,b=!0,w=function(t,e){a.assert(!e||!0===t||!1===t,"Can't turn on custom loggers persistently."),!0===t?(y.logLevel=s.LogLevel.VERBOSE,_=y.log.bind(y),e&&d.set("logging_enabled",!0)):"function"==typeof t?_=t:(_=null,d.remove("logging_enabled"))},E=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(!0===b&&(b=!1,null===_&&!0===d.get("logging_enabled")&&w(!0)),_){var n=m.apply(null,t);_(n)}},S=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];E.apply(void 0,[t].concat(e))}},C=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE INTERNAL ERROR: "+m.apply(void 0,t);y.error(n)},x=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE FATAL ERROR: "+m.apply(void 0,t);throw y.error(n),new Error(n)},T=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE WARNING: "+m.apply(void 0,t);y.warn(n)},k=function(t){return"number"==typeof t&&(t!=t||t==Number.POSITIVE_INFINITY||t==Number.NEGATIVE_INFINITY)},P="[MIN_NAME]",O="[MAX_NAME]",I=function(t,e){if(t===e)return 0;if(t===P||e===O)return-1;if(e===P||t===O)return 1;var n=j(t),r=j(e);return null!==n?null!==r?n-r==0?t.length-e.length:n-r:-1:null!==r?1:t<e?-1:1},A=function(t,e){return t===e?0:t<e?-1:1},N=function(t,e){if(e&&t in e)return e[t];throw new Error("Missing required key ("+t+") in object: "+a.stringify(e))},R=function(t){if("object"!=typeof t||null===t)return a.stringify(t);var e=[];for(var n in t)e.push(n);e.sort();for(var r="{",i=0;i<e.length;i++)0!==i&&(r+=","),r+=a.stringify(e[i]),r+=":",r+=R(t[e[i]]);return r+="}"},D=function(t,e){var n=t.length;if(n<=e)return[t];for(var r=[],i=0;i<n;i+=e)i+e>n?r.push(t.substring(i,n)):r.push(t.substring(i,i+e));return r},F=function(t,e){if(Array.isArray(t))for(var n=0;n<t.length;++n)e(n,t[n]);else a.forEach(t,function(t,n){return e(n,t)})},M=function(t){a.assert(!k(t),"Invalid JSON number");var e,n,r,i,o,s,u;for(0===t?(n=0,r=0,e=1/t==-1/0?1:0):(e=t<0,(t=Math.abs(t))>=Math.pow(2,-1022)?(n=(i=Math.min(Math.floor(Math.log(t)/Math.LN2),1023))+1023,r=Math.round(t*Math.pow(2,52-i)-Math.pow(2,52))):(n=0,r=Math.round(t/Math.pow(2,-1074)))),s=[],o=52;o;o-=1)s.push(r%2?1:0),r=Math.floor(r/2);for(o=11;o;o-=1)s.push(n%2?1:0),n=Math.floor(n/2);s.push(e?1:0),s.reverse(),u=s.join("");var c="";for(o=0;o<64;o+=8){var l=parseInt(u.substr(o,8),2).toString(16);1===l.length&&(l="0"+l),c+=l}return c.toLowerCase()},L=new RegExp("^-?\\d{1,10}$"),j=function(t){if(L.test(t)){var e=Number(t);if(e>=-2147483648&&e<=2147483647)return e}return null},q=function(t){try{t()}catch(t){setTimeout(function(){var e=t.stack||"";throw T("Exception was thrown by user callback.",e),t},Math.floor(0))}},W=function(){return("object"==typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0},U=function(t,e){var n=setTimeout(t,e);return"object"==typeof n&&n.unref&&n.unref(),n},B=function(){function t(t,e){if(void 0===e){this.pieces_=t.split("/");for(var n=0,r=0;r<this.pieces_.length;r++)this.pieces_[r].length>0&&(this.pieces_[n]=this.pieces_[r],n++);this.pieces_.length=n,this.pieceNum_=0}else this.pieces_=t,this.pieceNum_=e}return Object.defineProperty(t,"Empty",{get:function(){return new t("")},enumerable:!0,configurable:!0}),t.prototype.getFront=function(){return this.pieceNum_>=this.pieces_.length?null:this.pieces_[this.pieceNum_]},t.prototype.getLength=function(){return this.pieces_.length-this.pieceNum_},t.prototype.popFront=function(){var e=this.pieceNum_;return e<this.pieces_.length&&e++,new t(this.pieces_,e)},t.prototype.getBack=function(){return this.pieceNum_<this.pieces_.length?this.pieces_[this.pieces_.length-1]:null},t.prototype.toString=function(){for(var t="",e=this.pieceNum_;e<this.pieces_.length;e++)""!==this.pieces_[e]&&(t+="/"+this.pieces_[e]);return t||"/"},t.prototype.toUrlEncodedString=function(){for(var t="",e=this.pieceNum_;e<this.pieces_.length;e++)""!==this.pieces_[e]&&(t+="/"+encodeURIComponent(String(this.pieces_[e])));return t||"/"},t.prototype.slice=function(t){return void 0===t&&(t=0),this.pieces_.slice(this.pieceNum_+t)},t.prototype.parent=function(){if(this.pieceNum_>=this.pieces_.length)return null;for(var e=[],n=this.pieceNum_;n<this.pieces_.length-1;n++)e.push(this.pieces_[n]);return new t(e,0)},t.prototype.child=function(e){for(var n=[],r=this.pieceNum_;r<this.pieces_.length;r++)n.push(this.pieces_[r]);if(e instanceof t)for(r=e.pieceNum_;r<e.pieces_.length;r++)n.push(e.pieces_[r]);else{var i=e.split("/");for(r=0;r<i.length;r++)i[r].length>0&&n.push(i[r])}return new t(n,0)},t.prototype.isEmpty=function(){return this.pieceNum_>=this.pieces_.length},t.relativePath=function(e,n){var r=e.getFront(),i=n.getFront();if(null===r)return n;if(r===i)return t.relativePath(e.popFront(),n.popFront());throw new Error("INTERNAL ERROR: innerPath ("+n+") is not within outerPath ("+e+")")},t.comparePaths=function(t,e){for(var n=t.slice(),r=e.slice(),i=0;i<n.length&&i<r.length;i++){var o=I(n[i],r[i]);if(0!==o)return o}return n.length===r.length?0:n.length<r.length?-1:1},t.prototype.equals=function(t){if(this.getLength()!==t.getLength())return!1;for(var e=this.pieceNum_,n=t.pieceNum_;e<=this.pieces_.length;e++,n++)if(this.pieces_[e]!==t.pieces_[n])return!1;return!0},t.prototype.contains=function(t){var e=this.pieceNum_,n=t.pieceNum_;if(this.getLength()>t.getLength())return!1;for(;e<this.pieces_.length;){if(this.pieces_[e]!==t.pieces_[n])return!1;++e,++n}return!0},t}(),H=function(){function t(t,e){this.errorPrefix_=e,this.parts_=t.slice(),this.byteLength_=Math.max(1,this.parts_.length);for(var n=0;n<this.parts_.length;n++)this.byteLength_+=a.stringLength(this.parts_[n]);this.checkValid_()}return Object.defineProperty(t,"MAX_PATH_DEPTH",{get:function(){return 32},enumerable:!0,configurable:!0}),Object.defineProperty(t,"MAX_PATH_LENGTH_BYTES",{get:function(){return 768},enumerable:!0,configurable:!0}),t.prototype.push=function(t){this.parts_.length>0&&(this.byteLength_+=1),this.parts_.push(t),this.byteLength_+=a.stringLength(t),this.checkValid_()},t.prototype.pop=function(){var t=this.parts_.pop();this.byteLength_-=a.stringLength(t),this.parts_.length>0&&(this.byteLength_-=1)},t.prototype.checkValid_=function(){if(this.byteLength_>t.MAX_PATH_LENGTH_BYTES)throw new Error(this.errorPrefix_+"has a key path longer than "+t.MAX_PATH_LENGTH_BYTES+" bytes ("+this.byteLength_+").");if(this.parts_.length>t.MAX_PATH_DEPTH)throw new Error(this.errorPrefix_+"path specified exceeds the maximum depth that can be written ("+t.MAX_PATH_DEPTH+") or object contains a cycle "+this.toErrorString())},t.prototype.toErrorString=function(){return 0==this.parts_.length?"":"in property '"+this.parts_.join(".")+"'"},t}(),V="long_polling",Q=function(){function t(t,e,n,r,i){void 0===i&&(i=""),this.secure=e,this.namespace=n,this.webSocketOnly=r,this.persistenceKey=i,this.host=t.toLowerCase(),this.domain=this.host.substr(this.host.indexOf(".")+1),this.internalHost=p.get("host:"+t)||this.host}return t.prototype.needsQueryParam=function(){return this.host!==this.internalHost||this.isCustomHost()},t.prototype.isCacheableHost=function(){return"s-"===this.internalHost.substr(0,2)},t.prototype.isDemoHost=function(){return"firebaseio-demo.com"===this.domain},t.prototype.isCustomHost=function(){return"firebaseio.com"!==this.domain&&"firebaseio-demo.com"!==this.domain},t.prototype.updateHost=function(t){t!==this.internalHost&&(this.internalHost=t,this.isCacheableHost()&&p.set("host:"+this.host,this.internalHost))},t.prototype.connectionURL=function(t,e){var n;if(a.assert("string"==typeof t,"typeof type must == string"),a.assert("object"==typeof e,"typeof params must == object"),"websocket"===t)n=(this.secure?"wss://":"ws://")+this.internalHost+"/.ws?";else{if(t!==V)throw new Error("Unknown connection type: "+t);n=(this.secure?"https://":"http://")+this.internalHost+"/.lp?"}this.needsQueryParam()&&(e.ns=this.namespace);var r=[];return a.forEach(e,function(t,e){r.push(t+"="+e)}),n+r.join("&")},t.prototype.toString=function(){var t=this.toURLString();return this.persistenceKey&&(t+="<"+this.persistenceKey+">"),t},t.prototype.toURLString=function(){return(this.secure?"https://":"http://")+this.host},t}();var z,Y,G,K,X,$=function(t){var e=J(t),n=e.subdomain;"firebase"===e.domain&&x(e.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead"),n&&"undefined"!=n||"localhost"===e.domain||x("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com"),e.secure||"undefined"!=typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&T("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");var r="ws"===e.scheme||"wss"===e.scheme;return{repoInfo:new Q(e.host,e.secure,n,r),path:new B(e.pathString)}},J=function(t){var e="",n="",r="",i="",o=!0,a="https",s=443;if("string"==typeof t){var u=t.indexOf("//");u>=0&&(a=t.substring(0,u-1),t=t.substring(u+2));var c=t.indexOf("/");-1===c&&(c=t.length);var l=t.indexOf("?");-1===l&&(l=t.length),e=t.substring(0,Math.min(c,l)),c<l&&(i=function(t){for(var e="",n=t.split("/"),r=0;r<n.length;r++)if(n[r].length>0){var i=n[r];try{i=decodeURIComponent(i.replace(/\+/g," "))}catch(t){}e+="/"+i}return e}(t.substring(c,l)));var h=function(t){var e={};"?"===t.charAt(0)&&(t=t.substring(1));for(var n=0,r=t.split("&");n<r.length;n++){var i=r[n];if(0!==i.length){var o=i.split("=");2===o.length?e[decodeURIComponent(o[0])]=decodeURIComponent(o[1]):T("Invalid query segment '"+i+"' in query '"+t+"'")}}return e}(t.substring(Math.min(t.length,l)));(u=e.indexOf(":"))>=0?(o="https"===a||"wss"===a,s=parseInt(e.substring(u+1),10)):u=t.length;var f=e.split(".");3===f.length?(n=f[1],r=f[0].toLowerCase()):2===f.length?n=f[0]:"localhost"===f[0].slice(0,u).toLowerCase()&&(n="localhost"),""===r&&"ns"in h&&(r=h.ns)}return{host:e,port:s,domain:n,subdomain:r,secure:o,scheme:a,pathString:i}},Z=/[\[\].#$\/\u0000-\u001F\u007F]/,tt=/[\[\].#$\u0000-\u001F\u007F]/,et=function(t){return"string"==typeof t&&0!==t.length&&!Z.test(t)},nt=function(t){return"string"==typeof t&&0!==t.length&&!tt.test(t)},rt=function(t){return null===t||"string"==typeof t||"number"==typeof t&&!k(t)||t&&"object"==typeof t&&a.contains(t,".sv")},it=function(t,e,n,r,i){i&&void 0===n||ot(a.errorPrefix(t,e,i),n,r)},ot=function(t,e,n){var r=n instanceof B?new H(n,t):n;if(void 0===e)throw new Error(t+"contains undefined "+r.toErrorString());if("function"==typeof e)throw new Error(t+"contains a function "+r.toErrorString()+" with contents = "+e.toString());if(k(e))throw new Error(t+"contains "+e.toString()+" "+r.toErrorString());if("string"==typeof e&&e.length>10485760/3&&a.stringLength(e)>10485760)throw new Error(t+"contains a string greater than 10485760 utf8 bytes "+r.toErrorString()+" ('"+e.substring(0,50)+"...')");if(e&&"object"==typeof e){var i=!1,o=!1;if(a.forEach(e,function(e,n){if(".value"===e)i=!0;else if(".priority"!==e&&".sv"!==e&&(o=!0,!et(e)))throw new Error(t+" contains an invalid key ("+e+") "+r.toErrorString()+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');r.push(e),ot(t,n,r),r.pop()}),i&&o)throw new Error(t+' contains ".value" child '+r.toErrorString()+" in addition to actual children.")}},at=function(t,e,n,r,i){if(!i||void 0!==n){var o=a.errorPrefix(t,e,i);if(!n||"object"!=typeof n||Array.isArray(n))throw new Error(o+" must be an object containing the children to replace.");var s=[];a.forEach(n,function(t,e){var n=new B(t);if(ot(o,e,r.child(n)),".priority"===n.getBack()&&!rt(e))throw new Error(o+"contains an invalid value for '"+n.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");s.push(n)}),function(t,e){var n,r;for(n=0;n<e.length;n++)for(var i=(r=e[n]).slice(),o=0;o<i.length;o++)if(".priority"===i[o]&&o===i.length-1);else if(!et(i[o]))throw new Error(t+"contains an invalid key ("+i[o]+") in path "+r.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');e.sort(B.comparePaths);var a=null;for(n=0;n<e.length;n++){if(r=e[n],null!==a&&a.contains(r))throw new Error(t+"contains a path "+a.toString()+" that is ancestor of another path "+r.toString());a=r}}(o,s)}},st=function(t,e,n,r){if(!r||void 0!==n){if(k(n))throw new Error(a.errorPrefix(t,e,r)+"is "+n.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!rt(n))throw new Error(a.errorPrefix(t,e,r)+"must be a valid Firebase priority (a string, finite number, server value, or null).")}},ut=function(t,e,n,r){if(!r||void 0!==n)switch(n){case"value":case"child_added":case"child_removed":case"child_changed":case"child_moved":break;default:throw new Error(a.errorPrefix(t,e,r)+'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".')}},ct=function(t,e,n,r){if(!(r&&void 0===n||et(n)))throw new Error(a.errorPrefix(t,e,r)+'was an invalid key = "'+n+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").')},lt=function(t,e,n,r){if(!(r&&void 0===n||nt(n)))throw new Error(a.errorPrefix(t,e,r)+'was an invalid path = "'+n+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"')},ht=function(t,e){if(".info"===e.getFront())throw new Error(t+" failed = Can't modify data under /.info/")},ft=function(t,e,n){var r=n.path.toString();if("string"!=typeof n.repoInfo.host||0===n.repoInfo.host.length||!et(n.repoInfo.namespace)&&"localhost"!==n.repoInfo.host.split(":")[0]||0!==r.length&&!function(t){return t&&(t=t.replace(/^\/*\.info(\/|$)/,"/")),nt(t)}(r))throw new Error(a.errorPrefix(t,e,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".')},pt=function(){function t(t,e){this.repo_=t,this.path_=e}return t.prototype.cancel=function(t){a.validateArgCount("OnDisconnect.cancel",0,1,arguments.length),a.validateCallback("OnDisconnect.cancel",1,t,!0);var e=new a.Deferred;return this.repo_.onDisconnectCancel(this.path_,e.wrapCallback(t)),e.promise},t.prototype.remove=function(t){a.validateArgCount("OnDisconnect.remove",0,1,arguments.length),ht("OnDisconnect.remove",this.path_),a.validateCallback("OnDisconnect.remove",1,t,!0);var e=new a.Deferred;return this.repo_.onDisconnectSet(this.path_,null,e.wrapCallback(t)),e.promise},t.prototype.set=function(t,e){a.validateArgCount("OnDisconnect.set",1,2,arguments.length),ht("OnDisconnect.set",this.path_),it("OnDisconnect.set",1,t,this.path_,!1),a.validateCallback("OnDisconnect.set",2,e,!0);var n=new a.Deferred;return this.repo_.onDisconnectSet(this.path_,t,n.wrapCallback(e)),n.promise},t.prototype.setWithPriority=function(t,e,n){a.validateArgCount("OnDisconnect.setWithPriority",2,3,arguments.length),ht("OnDisconnect.setWithPriority",this.path_),it("OnDisconnect.setWithPriority",1,t,this.path_,!1),st("OnDisconnect.setWithPriority",2,e,!1),a.validateCallback("OnDisconnect.setWithPriority",3,n,!0);var r=new a.Deferred;return this.repo_.onDisconnectSetWithPriority(this.path_,t,e,r.wrapCallback(n)),r.promise},t.prototype.update=function(t,e){if(a.validateArgCount("OnDisconnect.update",1,2,arguments.length),ht("OnDisconnect.update",this.path_),Array.isArray(t)){for(var n={},r=0;r<t.length;++r)n[""+r]=t[r];t=n,T("Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}at("OnDisconnect.update",1,t,this.path_,!1),a.validateCallback("OnDisconnect.update",2,e,!0);var i=new a.Deferred;return this.repo_.onDisconnectUpdate(this.path_,t,i.wrapCallback(e)),i.promise},t}(),dt=function(){function t(t,e){this.committed=t,this.snapshot=e}return t.prototype.toJSON=function(){return a.validateArgCount("TransactionResult.toJSON",0,1,arguments.length),{committed:this.committed,snapshot:this.snapshot.toJSON()}},t}(),yt=(z="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz",Y=0,G=[],function(t){var e,n=t===Y;Y=t;var r=new Array(8);for(e=7;e>=0;e--)r[e]=z.charAt(t%64),t=Math.floor(t/64);a.assert(0===t,"Cannot push at time == 0");var i=r.join("");if(n){for(e=11;e>=0&&63===G[e];e--)G[e]=0;G[e]++}else for(e=0;e<12;e++)G[e]=Math.floor(64*Math.random());for(e=0;e<12;e++)i+=z.charAt(G[e]);return a.assert(20===i.length,"nextPushId: Length should be 20."),i}),vt=function(){function t(t,e){this.name=t,this.node=e}return t.Wrap=function(e,n){return new t(e,n)},t}(),gt=function(){function t(){}return t.prototype.getCompare=function(){return this.compare.bind(this)},t.prototype.indexedValueChanged=function(t,e){var n=new vt(P,t),r=new vt(P,e);return 0!==this.compare(n,r)},t.prototype.minPost=function(){return vt.MIN},t}(),mt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u.__extends(e,t),Object.defineProperty(e,"__EMPTY_NODE",{get:function(){return K},set:function(t){K=t},enumerable:!0,configurable:!0}),e.prototype.compare=function(t,e){return I(t.name,e.name)},e.prototype.isDefinedOn=function(t){throw a.assertionError("KeyIndex.isDefinedOn not expected to be called.")},e.prototype.indexedValueChanged=function(t,e){return!1},e.prototype.minPost=function(){return vt.MIN},e.prototype.maxPost=function(){return new vt(O,K)},e.prototype.makePost=function(t,e){return a.assert("string"==typeof t,"KeyIndex indexValue must always be a string."),new vt(t,K)},e.prototype.toString=function(){return".key"},e}(gt),_t=new mt;var bt,wt,Et,St=function(t){return"number"==typeof t?"number:"+M(t):"string:"+t},Ct=function(t){if(t.isLeafNode()){var e=t.val();a.assert("string"==typeof e||"number"==typeof e||"object"==typeof e&&a.contains(e,".sv"),"Priority must be a string or number.")}else a.assert(t===X||t.isEmpty(),"priority of unexpected type.");a.assert(t===X||t.getPriority().isEmpty(),"Priority nodes can't have a priority of their own.")},xt=function(){function t(e,n){void 0===n&&(n=t.__childrenNodeConstructor.EMPTY_NODE),this.value_=e,this.priorityNode_=n,this.lazyHash_=null,a.assert(void 0!==this.value_&&null!==this.value_,"LeafNode shouldn't be created with null/undefined value."),Ct(this.priorityNode_)}return Object.defineProperty(t,"__childrenNodeConstructor",{get:function(){return bt},set:function(t){bt=t},enumerable:!0,configurable:!0}),t.prototype.isLeafNode=function(){return!0},t.prototype.getPriority=function(){return this.priorityNode_},t.prototype.updatePriority=function(e){return new t(this.value_,e)},t.prototype.getImmediateChild=function(e){return".priority"===e?this.priorityNode_:t.__childrenNodeConstructor.EMPTY_NODE},t.prototype.getChild=function(e){return e.isEmpty()?this:".priority"===e.getFront()?this.priorityNode_:t.__childrenNodeConstructor.EMPTY_NODE},t.prototype.hasChild=function(){return!1},t.prototype.getPredecessorChildName=function(t,e){return null},t.prototype.updateImmediateChild=function(e,n){return".priority"===e?this.updatePriority(n):n.isEmpty()&&".priority"!==e?this:t.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(e,n).updatePriority(this.priorityNode_)},t.prototype.updateChild=function(e,n){var r=e.getFront();return null===r?n:n.isEmpty()&&".priority"!==r?this:(a.assert(".priority"!==r||1===e.getLength(),".priority must be the last token in a path"),this.updateImmediateChild(r,t.__childrenNodeConstructor.EMPTY_NODE.updateChild(e.popFront(),n)))},t.prototype.isEmpty=function(){return!1},t.prototype.numChildren=function(){return 0},t.prototype.forEachChild=function(t,e){return!1},t.prototype.val=function(t){return t&&!this.getPriority().isEmpty()?{".value":this.getValue(),".priority":this.getPriority().val()}:this.getValue()},t.prototype.hash=function(){if(null===this.lazyHash_){var t="";this.priorityNode_.isEmpty()||(t+="priority:"+St(this.priorityNode_.val())+":");var e=typeof this.value_;t+=e+":",t+="number"===e?M(this.value_):this.value_,this.lazyHash_=g(t)}return this.lazyHash_},t.prototype.getValue=function(){return this.value_},t.prototype.compareTo=function(e){return e===t.__childrenNodeConstructor.EMPTY_NODE?1:e instanceof t.__childrenNodeConstructor?-1:(a.assert(e.isLeafNode(),"Unknown node type"),this.compareToLeafNode_(e))},t.prototype.compareToLeafNode_=function(e){var n=typeof e.value_,r=typeof this.value_,i=t.VALUE_TYPE_ORDER.indexOf(n),o=t.VALUE_TYPE_ORDER.indexOf(r);return a.assert(i>=0,"Unknown leaf type: "+n),a.assert(o>=0,"Unknown leaf type: "+r),i===o?"object"===r?0:this.value_<e.value_?-1:this.value_===e.value_?0:1:o-i},t.prototype.withIndex=function(){return this},t.prototype.isIndexed=function(){return!0},t.prototype.equals=function(t){if(t===this)return!0;if(t.isLeafNode()){var e=t;return this.value_===e.value_&&this.priorityNode_.equals(e.priorityNode_)}return!1},t.VALUE_TYPE_ORDER=["object","boolean","number","string"],t}();var Tt,kt,Pt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u.__extends(e,t),e.prototype.compare=function(t,e){var n=t.node.getPriority(),r=e.node.getPriority(),i=n.compareTo(r);return 0===i?I(t.name,e.name):i},e.prototype.isDefinedOn=function(t){return!t.getPriority().isEmpty()},e.prototype.indexedValueChanged=function(t,e){return!t.getPriority().equals(e.getPriority())},e.prototype.minPost=function(){return vt.MIN},e.prototype.maxPost=function(){return new vt(O,new xt("[PRIORITY-POST]",Et))},e.prototype.makePost=function(t,e){var n=wt(t);return new vt(e,new xt("[PRIORITY-POST]",n))},e.prototype.toString=function(){return".priority"},e}(gt)),Ot=function(){function t(t,e,n,r,i){void 0===i&&(i=null),this.isReverse_=r,this.resultGenerator_=i,this.nodeStack_=[];for(var o=1;!t.isEmpty();)if(t=t,o=e?n(t.key,e):1,r&&(o*=-1),o<0)t=this.isReverse_?t.left:t.right;else{if(0===o){this.nodeStack_.push(t);break}this.nodeStack_.push(t),t=this.isReverse_?t.right:t.left}}return t.prototype.getNext=function(){if(0===this.nodeStack_.length)return null;var t,e=this.nodeStack_.pop();if(t=this.resultGenerator_?this.resultGenerator_(e.key,e.value):{key:e.key,value:e.value},this.isReverse_)for(e=e.left;!e.isEmpty();)this.nodeStack_.push(e),e=e.right;else for(e=e.right;!e.isEmpty();)this.nodeStack_.push(e),e=e.left;return t},t.prototype.hasNext=function(){return this.nodeStack_.length>0},t.prototype.peek=function(){if(0===this.nodeStack_.length)return null;var t=this.nodeStack_[this.nodeStack_.length-1];return this.resultGenerator_?this.resultGenerator_(t.key,t.value):{key:t.key,value:t.value}},t}(),It=function(){function t(e,n,r,i,o){this.key=e,this.value=n,this.color=null!=r?r:t.RED,this.left=null!=i?i:Nt.EMPTY_NODE,this.right=null!=o?o:Nt.EMPTY_NODE}return t.prototype.copy=function(e,n,r,i,o){return new t(null!=e?e:this.key,null!=n?n:this.value,null!=r?r:this.color,null!=i?i:this.left,null!=o?o:this.right)},t.prototype.count=function(){return this.left.count()+1+this.right.count()},t.prototype.isEmpty=function(){return!1},t.prototype.inorderTraversal=function(t){return this.left.inorderTraversal(t)||t(this.key,this.value)||this.right.inorderTraversal(t)},t.prototype.reverseTraversal=function(t){return this.right.reverseTraversal(t)||t(this.key,this.value)||this.left.reverseTraversal(t)},t.prototype.min_=function(){return this.left.isEmpty()?this:this.left.min_()},t.prototype.minKey=function(){return this.min_().key},t.prototype.maxKey=function(){return this.right.isEmpty()?this.key:this.right.maxKey()},t.prototype.insert=function(t,e,n){var r,i;return(i=(r=n(t,(i=this).key))<0?i.copy(null,null,null,i.left.insert(t,e,n),null):0===r?i.copy(null,e,null,null,null):i.copy(null,null,null,null,i.right.insert(t,e,n))).fixUp_()},t.prototype.removeMin_=function(){if(this.left.isEmpty())return Nt.EMPTY_NODE;var t=this;return t.left.isRed_()||t.left.left.isRed_()||(t=t.moveRedLeft_()),(t=t.copy(null,null,null,t.left.removeMin_(),null)).fixUp_()},t.prototype.remove=function(t,e){var n,r;if(e(t,(n=this).key)<0)n.left.isEmpty()||n.left.isRed_()||n.left.left.isRed_()||(n=n.moveRedLeft_()),n=n.copy(null,null,null,n.left.remove(t,e),null);else{if(n.left.isRed_()&&(n=n.rotateRight_()),n.right.isEmpty()||n.right.isRed_()||n.right.left.isRed_()||(n=n.moveRedRight_()),0===e(t,n.key)){if(n.right.isEmpty())return Nt.EMPTY_NODE;r=n.right.min_(),n=n.copy(r.key,r.value,null,null,n.right.removeMin_())}n=n.copy(null,null,null,null,n.right.remove(t,e))}return n.fixUp_()},t.prototype.isRed_=function(){return this.color},t.prototype.fixUp_=function(){var t=this;return t.right.isRed_()&&!t.left.isRed_()&&(t=t.rotateLeft_()),t.left.isRed_()&&t.left.left.isRed_()&&(t=t.rotateRight_()),t.left.isRed_()&&t.right.isRed_()&&(t=t.colorFlip_()),t},t.prototype.moveRedLeft_=function(){var t=this.colorFlip_();return t.right.left.isRed_()&&(t=(t=(t=t.copy(null,null,null,null,t.right.rotateRight_())).rotateLeft_()).colorFlip_()),t},t.prototype.moveRedRight_=function(){var t=this.colorFlip_();return t.left.left.isRed_()&&(t=(t=t.rotateRight_()).colorFlip_()),t},t.prototype.rotateLeft_=function(){var e=this.copy(null,null,t.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)},t.prototype.rotateRight_=function(){var e=this.copy(null,null,t.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)},t.prototype.colorFlip_=function(){var t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)},t.prototype.checkMaxDepth_=function(){var t=this.check_();return Math.pow(2,t)<=this.count()+1},t.prototype.check_=function(){var t;if(this.isRed_()&&this.left.isRed_())throw new Error("Red node has red child("+this.key+","+this.value+")");if(this.right.isRed_())throw new Error("Right child of ("+this.key+","+this.value+") is red");if((t=this.left.check_())!==this.right.check_())throw new Error("Black depths differ");return t+(this.isRed_()?0:1)},t.RED=!0,t.BLACK=!1,t}(),At=function(){function t(){}return t.prototype.copy=function(t,e,n,r,i){return this},t.prototype.insert=function(t,e,n){return new It(t,e,null)},t.prototype.remove=function(t,e){return this},t.prototype.count=function(){return 0},t.prototype.isEmpty=function(){return!0},t.prototype.inorderTraversal=function(t){return!1},t.prototype.reverseTraversal=function(t){return!1},t.prototype.minKey=function(){return null},t.prototype.maxKey=function(){return null},t.prototype.check_=function(){return 0},t.prototype.isRed_=function(){return!1},t}(),Nt=function(){function t(e,n){void 0===n&&(n=t.EMPTY_NODE),this.comparator_=e,this.root_=n}return t.prototype.insert=function(e,n){return new t(this.comparator_,this.root_.insert(e,n,this.comparator_).copy(null,null,It.BLACK,null,null))},t.prototype.remove=function(e){return new t(this.comparator_,this.root_.remove(e,this.comparator_).copy(null,null,It.BLACK,null,null))},t.prototype.get=function(t){for(var e,n=this.root_;!n.isEmpty();){if(0===(e=this.comparator_(t,n.key)))return n.value;e<0?n=n.left:e>0&&(n=n.right)}return null},t.prototype.getPredecessorKey=function(t){for(var e,n=this.root_,r=null;!n.isEmpty();){if(0===(e=this.comparator_(t,n.key))){if(n.left.isEmpty())return r?r.key:null;for(n=n.left;!n.right.isEmpty();)n=n.right;return n.key}e<0?n=n.left:e>0&&(r=n,n=n.right)}throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?")},t.prototype.isEmpty=function(){return this.root_.isEmpty()},t.prototype.count=function(){return this.root_.count()},t.prototype.minKey=function(){return this.root_.minKey()},t.prototype.maxKey=function(){return this.root_.maxKey()},t.prototype.inorderTraversal=function(t){return this.root_.inorderTraversal(t)},t.prototype.reverseTraversal=function(t){return this.root_.reverseTraversal(t)},t.prototype.getIterator=function(t){return new Ot(this.root_,null,this.comparator_,!1,t)},t.prototype.getIteratorFrom=function(t,e){return new Ot(this.root_,t,this.comparator_,!1,e)},t.prototype.getReverseIteratorFrom=function(t,e){return new Ot(this.root_,t,this.comparator_,!0,e)},t.prototype.getReverseIterator=function(t){return new Ot(this.root_,null,this.comparator_,!0,t)},t.EMPTY_NODE=new At,t}(),Rt=Math.log(2),Dt=function(){function t(t){var e;this.count=(e=t+1,parseInt(Math.log(e)/Rt,10)),this.current_=this.count-1;var n,r=(n=this.count,parseInt(Array(n+1).join("1"),2));this.bits_=t+1&r}return t.prototype.nextBitIsOne=function(){var t=!(this.bits_&1<<this.current_);return this.current_--,t},t}(),Ft=function(t,e,n,r){t.sort(e);var i=function(e,r){var o,a,s=r-e;if(0==s)return null;if(1==s)return o=t[e],a=n?n(o):o,new It(a,o.node,It.BLACK,null,null);var u=parseInt(s/2,10)+e,c=i(e,u),l=i(u+1,r);return o=t[u],a=n?n(o):o,new It(a,o.node,It.BLACK,c,l)},o=function(e){for(var r=null,o=null,a=t.length,s=function(e,r){var o=a-e,s=a;a-=e;var c=i(o+1,s),l=t[o],h=n?n(l):l;u(new It(h,l.node,r,null,c))},u=function(t){r?(r.left=t,r=t):(o=t,r=t)},c=0;c<e.count;++c){var l=e.nextBitIsOne(),h=Math.pow(2,e.count-(c+1));l?s(h,It.BLACK):(s(h,It.BLACK),s(h,It.RED))}return o}(new Dt(t.length));return new Nt(r||e,o)},Mt={},Lt=function(){function t(t,e){this.indexes_=t,this.indexSet_=e}return Object.defineProperty(t,"Default",{get:function(){return a.assert(Mt&&Pt,"ChildrenNode.ts has not been loaded"),Tt=Tt||new t({".priority":Mt},{".priority":Pt})},enumerable:!0,configurable:!0}),t.prototype.get=function(t){var e=a.safeGet(this.indexes_,t);if(!e)throw new Error("No index defined for "+t);return e===Mt?null:e},t.prototype.hasIndex=function(t){return a.contains(this.indexSet_,t.toString())},t.prototype.addIndex=function(e,n){a.assert(e!==_t,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var r,i=[],o=!1,s=n.getIterator(vt.Wrap),u=s.getNext();u;)o=o||e.isDefinedOn(u.node),i.push(u),u=s.getNext();r=o?Ft(i,e.getCompare()):Mt;var c=e.toString(),l=a.clone(this.indexSet_);l[c]=e;var h=a.clone(this.indexes_);return h[c]=r,new t(h,l)},t.prototype.addToIndexes=function(e,n){var r=this;return new t(a.map(this.indexes_,function(t,i){var o=a.safeGet(r.indexSet_,i);if(a.assert(o,"Missing index implementation for "+i),t===Mt){if(o.isDefinedOn(e.node)){for(var s=[],u=n.getIterator(vt.Wrap),c=u.getNext();c;)c.name!=e.name&&s.push(c),c=u.getNext();return s.push(e),Ft(s,o.getCompare())}return Mt}var l=n.get(e.name),h=t;return l&&(h=h.remove(new vt(e.name,l))),h.insert(e,e.node)}),this.indexSet_)},t.prototype.removeFromIndexes=function(e,n){return new t(a.map(this.indexes_,function(t){if(t===Mt)return t;var r=n.get(e.name);return r?t.remove(new vt(e.name,r)):t}),this.indexSet_)},t}();function jt(t,e){return I(t.name,e.name)}function qt(t,e){return I(t,e)}var Wt=function(){function t(t,e,n){this.children_=t,this.priorityNode_=e,this.indexMap_=n,this.lazyHash_=null,this.priorityNode_&&Ct(this.priorityNode_),this.children_.isEmpty()&&a.assert(!this.priorityNode_||this.priorityNode_.isEmpty(),"An empty node cannot have a priority")}return Object.defineProperty(t,"EMPTY_NODE",{get:function(){return kt||(kt=new t(new Nt(qt),null,Lt.Default))},enumerable:!0,configurable:!0}),t.prototype.isLeafNode=function(){return!1},t.prototype.getPriority=function(){return this.priorityNode_||kt},t.prototype.updatePriority=function(e){return this.children_.isEmpty()?this:new t(this.children_,e,this.indexMap_)},t.prototype.getImmediateChild=function(t){if(".priority"===t)return this.getPriority();var e=this.children_.get(t);return null===e?kt:e},t.prototype.getChild=function(t){var e=t.getFront();return null===e?this:this.getImmediateChild(e).getChild(t.popFront())},t.prototype.hasChild=function(t){return null!==this.children_.get(t)},t.prototype.updateImmediateChild=function(e,n){if(a.assert(n,"We should always be passing snapshot nodes"),".priority"===e)return this.updatePriority(n);var r,i=new vt(e,n),o=void 0,s=void 0;return n.isEmpty()?(o=this.children_.remove(e),s=this.indexMap_.removeFromIndexes(i,this.children_)):(o=this.children_.insert(e,n),s=this.indexMap_.addToIndexes(i,this.children_)),r=o.isEmpty()?kt:this.priorityNode_,new t(o,r,s)},t.prototype.updateChild=function(t,e){var n=t.getFront();if(null===n)return e;a.assert(".priority"!==t.getFront()||1===t.getLength(),".priority must be the last token in a path");var r=this.getImmediateChild(n).updateChild(t.popFront(),e);return this.updateImmediateChild(n,r)},t.prototype.isEmpty=function(){return this.children_.isEmpty()},t.prototype.numChildren=function(){return this.children_.count()},t.prototype.val=function(e){if(this.isEmpty())return null;var n={},r=0,i=0,o=!0;if(this.forEachChild(Pt,function(a,s){n[a]=s.val(e),r++,o&&t.INTEGER_REGEXP_.test(a)?i=Math.max(i,Number(a)):o=!1}),!e&&o&&i<2*r){var a=[];for(var s in n)a[s]=n[s];return a}return e&&!this.getPriority().isEmpty()&&(n[".priority"]=this.getPriority().val()),n},t.prototype.hash=function(){if(null===this.lazyHash_){var t="";this.getPriority().isEmpty()||(t+="priority:"+St(this.getPriority().val())+":"),this.forEachChild(Pt,function(e,n){var r=n.hash();""!==r&&(t+=":"+e+":"+r)}),this.lazyHash_=""===t?"":g(t)}return this.lazyHash_},t.prototype.getPredecessorChildName=function(t,e,n){var r=this.resolveIndex_(n);if(r){var i=r.getPredecessorKey(new vt(t,e));return i?i.name:null}return this.children_.getPredecessorKey(t)},t.prototype.getFirstChildName=function(t){var e=this.resolveIndex_(t);if(e){var n=e.minKey();return n&&n.name}return this.children_.minKey()},t.prototype.getFirstChild=function(t){var e=this.getFirstChildName(t);return e?new vt(e,this.children_.get(e)):null},t.prototype.getLastChildName=function(t){var e=this.resolveIndex_(t);if(e){var n=e.maxKey();return n&&n.name}return this.children_.maxKey()},t.prototype.getLastChild=function(t){var e=this.getLastChildName(t);return e?new vt(e,this.children_.get(e)):null},t.prototype.forEachChild=function(t,e){var n=this.resolveIndex_(t);return n?n.inorderTraversal(function(t){return e(t.name,t.node)}):this.children_.inorderTraversal(e)},t.prototype.getIterator=function(t){return this.getIteratorFrom(t.minPost(),t)},t.prototype.getIteratorFrom=function(t,e){var n=this.resolveIndex_(e);if(n)return n.getIteratorFrom(t,function(t){return t});for(var r=this.children_.getIteratorFrom(t.name,vt.Wrap),i=r.peek();null!=i&&e.compare(i,t)<0;)r.getNext(),i=r.peek();return r},t.prototype.getReverseIterator=function(t){return this.getReverseIteratorFrom(t.maxPost(),t)},t.prototype.getReverseIteratorFrom=function(t,e){var n=this.resolveIndex_(e);if(n)return n.getReverseIteratorFrom(t,function(t){return t});for(var r=this.children_.getReverseIteratorFrom(t.name,vt.Wrap),i=r.peek();null!=i&&e.compare(i,t)>0;)r.getNext(),i=r.peek();return r},t.prototype.compareTo=function(t){return this.isEmpty()?t.isEmpty()?0:-1:t.isLeafNode()||t.isEmpty()?1:t===Ut?-1:0},t.prototype.withIndex=function(e){if(e===_t||this.indexMap_.hasIndex(e))return this;var n=this.indexMap_.addIndex(e,this.children_);return new t(this.children_,this.priorityNode_,n)},t.prototype.isIndexed=function(t){return t===_t||this.indexMap_.hasIndex(t)},t.prototype.equals=function(t){if(t===this)return!0;if(t.isLeafNode())return!1;var e=t;if(this.getPriority().equals(e.getPriority())){if(this.children_.count()===e.children_.count()){for(var n=this.getIterator(Pt),r=e.getIterator(Pt),i=n.getNext(),o=r.getNext();i&&o;){if(i.name!==o.name||!i.node.equals(o.node))return!1;i=n.getNext(),o=r.getNext()}return null===i&&null===o}return!1}return!1},t.prototype.resolveIndex_=function(t){return t===_t?null:this.indexMap_.get(t.toString())},t.INTEGER_REGEXP_=/^(0|[1-9]\d*)$/,t}(),Ut=new(function(t){function e(){return t.call(this,new Nt(qt),Wt.EMPTY_NODE,Lt.Default)||this}return u.__extends(e,t),e.prototype.compareTo=function(t){return t===this?0:1},e.prototype.equals=function(t){return t===this},e.prototype.getPriority=function(){return this},e.prototype.getImmediateChild=function(t){return Wt.EMPTY_NODE},e.prototype.isEmpty=function(){return!1},e}(Wt));Object.defineProperties(vt,{MIN:{value:new vt(P,Wt.EMPTY_NODE)},MAX:{value:new vt(O,Ut)}}),mt.__EMPTY_NODE=Wt.EMPTY_NODE,xt.__childrenNodeConstructor=Wt,X=Ut,function(t){Et=t}(Ut);var Bt=!0;function Ht(t,e){if(void 0===e&&(e=null),null===t)return Wt.EMPTY_NODE;if("object"==typeof t&&".priority"in t&&(e=t[".priority"]),a.assert(null===e||"string"==typeof e||"number"==typeof e||"object"==typeof e&&".sv"in e,"Invalid priority type found: "+typeof e),"object"==typeof t&&".value"in t&&null!==t[".value"]&&(t=t[".value"]),"object"!=typeof t||".sv"in t)return new xt(t,Ht(e));if(t instanceof Array||!Bt){var n=Wt.EMPTY_NODE,r=t;return a.forEach(r,function(t,e){if(a.contains(r,t)&&"."!==t.substring(0,1)){var i=Ht(e);!i.isLeafNode()&&i.isEmpty()||(n=n.updateImmediateChild(t,i))}}),n.updatePriority(Ht(e))}var i=[],o=!1,s=t;if(a.forEach(s,function(t,e){if("string"!=typeof t||"."!==t.substring(0,1)){var n=Ht(s[t]);n.isEmpty()||(o=o||!n.getPriority().isEmpty(),i.push(new vt(t,n)))}}),0==i.length)return Wt.EMPTY_NODE;var u=Ft(i,jt,function(t){return t.name},qt);if(o){var c=Ft(i,Pt.getCompare());return new Wt(u,Ht(e),new Lt({".priority":c},{".priority":Pt}))}return new Wt(u,Ht(e),Lt.Default)}!function(t){wt=t}(Ht);var Vt,Qt,zt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u.__extends(e,t),e.prototype.compare=function(t,e){var n=t.node.compareTo(e.node);return 0===n?I(t.name,e.name):n},e.prototype.isDefinedOn=function(t){return!0},e.prototype.indexedValueChanged=function(t,e){return!t.equals(e)},e.prototype.minPost=function(){return vt.MIN},e.prototype.maxPost=function(){return vt.MAX},e.prototype.makePost=function(t,e){var n=Ht(t);return new vt(e,n)},e.prototype.toString=function(){return".value"},e}(gt)),Yt=function(t){function e(e){var n=t.call(this)||this;return n.indexPath_=e,a.assert(!e.isEmpty()&&".priority"!==e.getFront(),"Can't create PathIndex with empty path or .priority key"),n}return u.__extends(e,t),e.prototype.extractChild=function(t){return t.getChild(this.indexPath_)},e.prototype.isDefinedOn=function(t){return!t.getChild(this.indexPath_).isEmpty()},e.prototype.compare=function(t,e){var n=this.extractChild(t.node),r=this.extractChild(e.node),i=n.compareTo(r);return 0===i?I(t.name,e.name):i},e.prototype.makePost=function(t,e){var n=Ht(t),r=Wt.EMPTY_NODE.updateChild(this.indexPath_,n);return new vt(e,r)},e.prototype.maxPost=function(){var t=Wt.EMPTY_NODE.updateChild(this.indexPath_,Ut);return new vt(O,t)},e.prototype.toString=function(){return this.indexPath_.slice().join("/")},e}(gt),Gt=function(){function t(t,e,n){this.node_=t,this.ref_=e,this.index_=n}return t.prototype.val=function(){return a.validateArgCount("DataSnapshot.val",0,0,arguments.length),this.node_.val()},t.prototype.exportVal=function(){return a.validateArgCount("DataSnapshot.exportVal",0,0,arguments.length),this.node_.val(!0)},t.prototype.toJSON=function(){return a.validateArgCount("DataSnapshot.toJSON",0,1,arguments.length),this.exportVal()},t.prototype.exists=function(){return a.validateArgCount("DataSnapshot.exists",0,0,arguments.length),!this.node_.isEmpty()},t.prototype.child=function(e){a.validateArgCount("DataSnapshot.child",0,1,arguments.length),e=String(e),lt("DataSnapshot.child",1,e,!1);var n=new B(e),r=this.ref_.child(n);return new t(this.node_.getChild(n),r,Pt)},t.prototype.hasChild=function(t){a.validateArgCount("DataSnapshot.hasChild",1,1,arguments.length),lt("DataSnapshot.hasChild",1,t,!1);var e=new B(t);return!this.node_.getChild(e).isEmpty()},t.prototype.getPriority=function(){return a.validateArgCount("DataSnapshot.getPriority",0,0,arguments.length),this.node_.getPriority().val()},t.prototype.forEach=function(e){var n=this;return a.validateArgCount("DataSnapshot.forEach",1,1,arguments.length),a.validateCallback("DataSnapshot.forEach",1,e,!1),!this.node_.isLeafNode()&&!!this.node_.forEachChild(this.index_,function(r,i){return e(new t(i,n.ref_.child(r),Pt))})},t.prototype.hasChildren=function(){return a.validateArgCount("DataSnapshot.hasChildren",0,0,arguments.length),!this.node_.isLeafNode()&&!this.node_.isEmpty()},Object.defineProperty(t.prototype,"key",{get:function(){return this.ref_.getKey()},enumerable:!0,configurable:!0}),t.prototype.numChildren=function(){return a.validateArgCount("DataSnapshot.numChildren",0,0,arguments.length),this.node_.numChildren()},t.prototype.getRef=function(){return a.validateArgCount("DataSnapshot.ref",0,0,arguments.length),this.ref_},Object.defineProperty(t.prototype,"ref",{get:function(){return this.getRef()},enumerable:!0,configurable:!0}),t}(),Kt=function(){function t(t,e,n,r){this.eventType=t,this.eventRegistration=e,this.snapshot=n,this.prevName=r}return t.prototype.getPath=function(){var t=this.snapshot.getRef();return"value"===this.eventType?t.path:t.getParent().path},t.prototype.getEventType=function(){return this.eventType},t.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},t.prototype.toString=function(){return this.getPath().toString()+":"+this.eventType+":"+a.stringify(this.snapshot.exportVal())},t}(),Xt=function(){function t(t,e,n){this.eventRegistration=t,this.error=e,this.path=n}return t.prototype.getPath=function(){return this.path},t.prototype.getEventType=function(){return"cancel"},t.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},t.prototype.toString=function(){return this.path.toString()+":cancel"},t}(),$t=function(){function t(t,e,n){this.callback_=t,this.cancelCallback_=e,this.context_=n}return t.prototype.respondsTo=function(t){return"value"===t},t.prototype.createEvent=function(t,e){var n=e.getQueryParams().getIndex();return new Kt("value",this,new Gt(t.snapshotNode,e.getRef(),n))},t.prototype.getEventRunner=function(t){var e=this.context_;if("cancel"===t.getEventType()){a.assert(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(e,t.error)}}var r=this.callback_;return function(){r.call(e,t.snapshot)}},t.prototype.createCancelEvent=function(t,e){return this.cancelCallback_?new Xt(this,t,e):null},t.prototype.matches=function(e){return e instanceof t&&(!e.callback_||!this.callback_||e.callback_===this.callback_&&e.context_===this.context_)},t.prototype.hasAnyCallback=function(){return null!==this.callback_},t}(),Jt=function(){function t(t,e,n){this.callbacks_=t,this.cancelCallback_=e,this.context_=n}return t.prototype.respondsTo=function(t){var e="children_added"===t?"child_added":t;return e="children_removed"===e?"child_removed":e,a.contains(this.callbacks_,e)},t.prototype.createCancelEvent=function(t,e){return this.cancelCallback_?new Xt(this,t,e):null},t.prototype.createEvent=function(t,e){a.assert(null!=t.childName,"Child events should have a childName.");var n=e.getRef().child(t.childName),r=e.getQueryParams().getIndex();return new Kt(t.type,this,new Gt(t.snapshotNode,n,r),t.prevName)},t.prototype.getEventRunner=function(t){var e=this.context_;if("cancel"===t.getEventType()){a.assert(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(e,t.error)}}var r=this.callbacks_[t.eventType];return function(){r.call(e,t.snapshot,t.prevName)}},t.prototype.matches=function(e){if(e instanceof t){if(!this.callbacks_||!e.callbacks_)return!0;if(this.context_===e.context_){var n=a.getCount(e.callbacks_);if(n===a.getCount(this.callbacks_)){if(1===n){var r=a.getAnyKey(e.callbacks_),i=a.getAnyKey(this.callbacks_);return!(i!==r||e.callbacks_[r]&&this.callbacks_[i]&&e.callbacks_[r]!==this.callbacks_[i])}return a.every(this.callbacks_,function(t,n){return e.callbacks_[t]===n})}}}return!1},t.prototype.hasAnyCallback=function(){return null!==this.callbacks_},t}(),Zt=function(){function t(t,e,n,r){this.repo=t,this.path=e,this.queryParams_=n,this.orderByCalled_=r}return Object.defineProperty(t,"__referenceConstructor",{get:function(){return a.assert(Vt,"Reference.ts has not been loaded"),Vt},set:function(t){Vt=t},enumerable:!0,configurable:!0}),t.validateQueryEndpoints_=function(t){var e=null,n=null;if(t.hasStart()&&(e=t.getIndexStartValue()),t.hasEnd()&&(n=t.getIndexEndValue()),t.getIndex()===_t){var r="Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().",i="Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.";if(t.hasStart()){if(t.getIndexStartName()!=P)throw new Error(r);if("string"!=typeof e)throw new Error(i)}if(t.hasEnd()){if(t.getIndexEndName()!=O)throw new Error(r);if("string"!=typeof n)throw new Error(i)}}else if(t.getIndex()===Pt){if(null!=e&&!rt(e)||null!=n&&!rt(n))throw new Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).")}else if(a.assert(t.getIndex()instanceof Yt||t.getIndex()===zt,"unknown index type."),null!=e&&"object"==typeof e||null!=n&&"object"==typeof n)throw new Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.")},t.validateLimit_=function(t){if(t.hasStart()&&t.hasEnd()&&t.hasLimit()&&!t.hasAnchoredLimit())throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.")},t.prototype.validateNoPreviousOrderByCall_=function(t){if(!0===this.orderByCalled_)throw new Error(t+": You can't combine multiple orderBy calls.")},t.prototype.getQueryParams=function(){return this.queryParams_},t.prototype.getRef=function(){return a.validateArgCount("Query.ref",0,0,arguments.length),new t.__referenceConstructor(this.repo,this.path)},t.prototype.on=function(e,n,r,i){a.validateArgCount("Query.on",2,4,arguments.length),ut("Query.on",1,e,!1),a.validateCallback("Query.on",2,n,!1);var o=t.getCancelAndContextArgs_("Query.on",r,i);if("value"===e)this.onValueEvent(n,o.cancel,o.context);else{var s={};s[e]=n,this.onChildEvent(s,o.cancel,o.context)}return n},t.prototype.onValueEvent=function(t,e,n){var r=new $t(t,e||null,n||null);this.repo.addEventCallbackForQuery(this,r)},t.prototype.onChildEvent=function(t,e,n){var r=new Jt(t,e,n);this.repo.addEventCallbackForQuery(this,r)},t.prototype.off=function(t,e,n){a.validateArgCount("Query.off",0,3,arguments.length),ut("Query.off",1,t,!0),a.validateCallback("Query.off",2,e,!0),a.validateContextObject("Query.off",3,n,!0);var r=null,i=null;"value"===t?r=new $t(e||null,null,n||null):t&&(e&&((i={})[t]=e),r=new Jt(i,null,n||null));this.repo.removeEventCallbackForQuery(this,r)},t.prototype.once=function(e,n,r,i){var o=this;a.validateArgCount("Query.once",1,4,arguments.length),ut("Query.once",1,e,!1),a.validateCallback("Query.once",2,n,!0);var s=t.getCancelAndContextArgs_("Query.once",r,i),u=!0,c=new a.Deferred;c.promise.catch(function(){});var l=function(t){u&&(u=!1,o.off(e,l),n&&n.bind(s.context)(t),c.resolve(t))};return this.on(e,l,function(t){o.off(e,l),s.cancel&&s.cancel.bind(s.context)(t),c.reject(t)}),c.promise},t.prototype.limitToFirst=function(e){if(a.validateArgCount("Query.limitToFirst",1,1,arguments.length),"number"!=typeof e||Math.floor(e)!==e||e<=0)throw new Error("Query.limitToFirst: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new t(this.repo,this.path,this.queryParams_.limitToFirst(e),this.orderByCalled_)},t.prototype.limitToLast=function(e){if(a.validateArgCount("Query.limitToLast",1,1,arguments.length),"number"!=typeof e||Math.floor(e)!==e||e<=0)throw new Error("Query.limitToLast: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new t(this.repo,this.path,this.queryParams_.limitToLast(e),this.orderByCalled_)},t.prototype.orderByChild=function(e){if(a.validateArgCount("Query.orderByChild",1,1,arguments.length),"$key"===e)throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if("$priority"===e)throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if("$value"===e)throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');lt("Query.orderByChild",1,e,!1),this.validateNoPreviousOrderByCall_("Query.orderByChild");var n=new B(e);if(n.isEmpty())throw new Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");var r=new Yt(n),i=this.queryParams_.orderBy(r);return t.validateQueryEndpoints_(i),new t(this.repo,this.path,i,!0)},t.prototype.orderByKey=function(){a.validateArgCount("Query.orderByKey",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByKey");var e=this.queryParams_.orderBy(_t);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.orderByPriority=function(){a.validateArgCount("Query.orderByPriority",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByPriority");var e=this.queryParams_.orderBy(Pt);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.orderByValue=function(){a.validateArgCount("Query.orderByValue",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByValue");var e=this.queryParams_.orderBy(zt);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.startAt=function(e,n){void 0===e&&(e=null),a.validateArgCount("Query.startAt",0,2,arguments.length),it("Query.startAt",1,e,this.path,!0),ct("Query.startAt",2,n,!0);var r=this.queryParams_.startAt(e,n);if(t.validateLimit_(r),t.validateQueryEndpoints_(r),this.queryParams_.hasStart())throw new Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");return void 0===e&&(e=null,n=null),new t(this.repo,this.path,r,this.orderByCalled_)},t.prototype.endAt=function(e,n){void 0===e&&(e=null),a.validateArgCount("Query.endAt",0,2,arguments.length),it("Query.endAt",1,e,this.path,!0),ct("Query.endAt",2,n,!0);var r=this.queryParams_.endAt(e,n);if(t.validateLimit_(r),t.validateQueryEndpoints_(r),this.queryParams_.hasEnd())throw new Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new t(this.repo,this.path,r,this.orderByCalled_)},t.prototype.equalTo=function(t,e){if(a.validateArgCount("Query.equalTo",1,2,arguments.length),it("Query.equalTo",1,t,this.path,!1),ct("Query.equalTo",2,e,!0),this.queryParams_.hasStart())throw new Error("Query.equalTo: Starting point was already set (by another call to startAt or equalTo).");if(this.queryParams_.hasEnd())throw new Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.startAt(t,e).endAt(t,e)},t.prototype.toString=function(){return a.validateArgCount("Query.toString",0,0,arguments.length),this.repo.toString()+this.path.toUrlEncodedString()},t.prototype.toJSON=function(){return a.validateArgCount("Query.toJSON",0,1,arguments.length),this.toString()},t.prototype.queryObject=function(){return this.queryParams_.getQueryObject()},t.prototype.queryIdentifier=function(){var t=this.queryObject(),e=R(t);return"{}"===e?"default":e},t.prototype.isEqual=function(e){if(a.validateArgCount("Query.isEqual",1,1,arguments.length),!(e instanceof t)){throw new Error("Query.isEqual failed: First argument must be an instance of firebase.database.Query.")}var n=this.repo===e.repo,r=this.path.equals(e.path),i=this.queryIdentifier()===e.queryIdentifier();return n&&r&&i},t.getCancelAndContextArgs_=function(t,e,n){var r={cancel:null,context:null};if(e&&n)r.cancel=e,a.validateCallback(t,3,r.cancel,!0),r.context=n,a.validateContextObject(t,4,r.context,!0);else if(e)if("object"==typeof e&&null!==e)r.context=e;else{if("function"!=typeof e)throw new Error(a.errorPrefix(t,3,!0)+" must either be a cancel callback or a context object.");r.cancel=e}return r},Object.defineProperty(t.prototype,"ref",{get:function(){return this.getRef()},enumerable:!0,configurable:!0}),t}(),te=function(){function t(){this.set={}}return t.prototype.add=function(t,e){this.set[t]=null===e||e},t.prototype.contains=function(t){return a.contains(this.set,t)},t.prototype.get=function(t){return this.contains(t)?this.set[t]:void 0},t.prototype.remove=function(t){delete this.set[t]},t.prototype.clear=function(){this.set={}},t.prototype.isEmpty=function(){return a.isEmpty(this.set)},t.prototype.count=function(){return a.getCount(this.set)},t.prototype.each=function(t){a.forEach(this.set,function(e,n){return t(e,n)})},t.prototype.keys=function(){var t=[];return a.forEach(this.set,function(e){t.push(e)}),t},t}(),ee=function(){function t(){this.value_=null,this.children_=null}return t.prototype.find=function(t){if(null!=this.value_)return this.value_.getChild(t);if(t.isEmpty()||null==this.children_)return null;var e=t.getFront();return t=t.popFront(),this.children_.contains(e)?this.children_.get(e).find(t):null},t.prototype.remember=function(e,n){if(e.isEmpty())this.value_=n,this.children_=null;else if(null!==this.value_)this.value_=this.value_.updateChild(e,n);else{null==this.children_&&(this.children_=new te);var r=e.getFront();this.children_.contains(r)||this.children_.add(r,new t);var i=this.children_.get(r);e=e.popFront(),i.remember(e,n)}},t.prototype.forget=function(t){if(t.isEmpty())return this.value_=null,this.children_=null,!0;if(null!==this.value_){if(this.value_.isLeafNode())return!1;var e=this.value_;this.value_=null;var n=this;return e.forEachChild(Pt,function(t,e){n.remember(new B(t),e)}),this.forget(t)}if(null!==this.children_){var r=t.getFront();if(t=t.popFront(),this.children_.contains(r))this.children_.get(r).forget(t)&&this.children_.remove(r);return!!this.children_.isEmpty()&&(this.children_=null,!0)}return!0},t.prototype.forEachTree=function(t,e){null!==this.value_?e(t,this.value_):this.forEachChild(function(n,r){var i=new B(t.toString()+"/"+n);r.forEachTree(i,e)})},t.prototype.forEachChild=function(t){null!==this.children_&&this.children_.each(function(e,n){t(e,n)})},t}(),ne=function(t,e){return t&&"object"==typeof t?(a.assert(".sv"in t,"Unexpected leaf node or priority contents"),e[t[".sv"]]):t},re=function(t,e){var n,r=t.getPriority().val(),i=ne(r,e);if(t.isLeafNode()){var o=t,a=ne(o.getValue(),e);return a!==o.getValue()||i!==o.getPriority().val()?new xt(a,Ht(i)):t}var s=t;return n=s,i!==s.getPriority().val()&&(n=n.updatePriority(new xt(i))),s.forEachChild(Pt,function(t,r){var i=re(r,e);i!==r&&(n=n.updateImmediateChild(t,i))}),n};!function(t){t[t.OVERWRITE=0]="OVERWRITE",t[t.MERGE=1]="MERGE",t[t.ACK_USER_WRITE=2]="ACK_USER_WRITE",t[t.LISTEN_COMPLETE=3]="LISTEN_COMPLETE"}(Qt||(Qt={}));var ie,oe,ae=function(){function t(t,e,n,r){this.fromUser=t,this.fromServer=e,this.queryId=n,this.tagged=r,a.assert(!r||e,"Tagged queries must be from server.")}return t.User=new t(!0,!1,null,!1),t.Server=new t(!1,!0,null,!1),t.forServerTaggedQuery=function(e){return new t(!1,!0,e,!0)},t}(),se=function(){function t(t,e,n){this.path=t,this.affectedTree=e,this.revert=n,this.type=Qt.ACK_USER_WRITE,this.source=ae.User}return t.prototype.operationForChild=function(e){if(this.path.isEmpty()){if(null!=this.affectedTree.value)return a.assert(this.affectedTree.children.isEmpty(),"affectedTree should not have overlapping affected paths."),this;var n=this.affectedTree.subtree(new B(e));return new t(B.Empty,n,this.revert)}return a.assert(this.path.getFront()===e,"operationForChild called for unrelated child."),new t(this.path.popFront(),this.affectedTree,this.revert)},t}(),ue=function(){return ie||(ie=new Nt(A)),ie},ce=function(){function t(t,e){void 0===e&&(e=ue()),this.value=t,this.children=e}return t.fromObject=function(e){var n=t.Empty;return a.forEach(e,function(t,e){n=n.set(new B(t),e)}),n},t.prototype.isEmpty=function(){return null===this.value&&this.children.isEmpty()},t.prototype.findRootMostMatchingPathAndValue=function(t,e){if(null!=this.value&&e(this.value))return{path:B.Empty,value:this.value};if(t.isEmpty())return null;var n=t.getFront(),r=this.children.get(n);if(null!==r){var i=r.findRootMostMatchingPathAndValue(t.popFront(),e);return null!=i?{path:new B(n).child(i.path),value:i.value}:null}return null},t.prototype.findRootMostValueAndPath=function(t){return this.findRootMostMatchingPathAndValue(t,function(){return!0})},t.prototype.subtree=function(e){if(e.isEmpty())return this;var n=e.getFront(),r=this.children.get(n);return null!==r?r.subtree(e.popFront()):t.Empty},t.prototype.set=function(e,n){if(e.isEmpty())return new t(n,this.children);var r=e.getFront(),i=(this.children.get(r)||t.Empty).set(e.popFront(),n),o=this.children.insert(r,i);return new t(this.value,o)},t.prototype.remove=function(e){if(e.isEmpty())return this.children.isEmpty()?t.Empty:new t(null,this.children);var n=e.getFront(),r=this.children.get(n);if(r){var i=r.remove(e.popFront()),o=void 0;return o=i.isEmpty()?this.children.remove(n):this.children.insert(n,i),null===this.value&&o.isEmpty()?t.Empty:new t(this.value,o)}return this},t.prototype.get=function(t){if(t.isEmpty())return this.value;var e=t.getFront(),n=this.children.get(e);return n?n.get(t.popFront()):null},t.prototype.setTree=function(e,n){if(e.isEmpty())return n;var r=e.getFront(),i=(this.children.get(r)||t.Empty).setTree(e.popFront(),n),o=void 0;return o=i.isEmpty()?this.children.remove(r):this.children.insert(r,i),new t(this.value,o)},t.prototype.fold=function(t){return this.fold_(B.Empty,t)},t.prototype.fold_=function(t,e){var n={};return this.children.inorderTraversal(function(r,i){n[r]=i.fold_(t.child(r),e)}),e(t,this.value,n)},t.prototype.findOnPath=function(t,e){return this.findOnPath_(t,B.Empty,e)},t.prototype.findOnPath_=function(t,e,n){var r=!!this.value&&n(e,this.value);if(r)return r;if(t.isEmpty())return null;var i=t.getFront(),o=this.children.get(i);return o?o.findOnPath_(t.popFront(),e.child(i),n):null},t.prototype.foreachOnPath=function(t,e){return this.foreachOnPath_(t,B.Empty,e)},t.prototype.foreachOnPath_=function(e,n,r){if(e.isEmpty())return this;this.value&&r(n,this.value);var i=e.getFront(),o=this.children.get(i);return o?o.foreachOnPath_(e.popFront(),n.child(i),r):t.Empty},t.prototype.foreach=function(t){this.foreach_(B.Empty,t)},t.prototype.foreach_=function(t,e){this.children.inorderTraversal(function(n,r){r.foreach_(t.child(n),e)}),this.value&&e(t,this.value)},t.prototype.foreachChild=function(t){this.children.inorderTraversal(function(e,n){n.value&&t(e,n.value)})},t.Empty=new t(null),t}(),le=function(){function t(t,e){this.source=t,this.path=e,this.type=Qt.LISTEN_COMPLETE}return t.prototype.operationForChild=function(e){return this.path.isEmpty()?new t(this.source,B.Empty):new t(this.source,this.path.popFront())},t}(),he=function(){function t(t,e,n){this.source=t,this.path=e,this.snap=n,this.type=Qt.OVERWRITE}return t.prototype.operationForChild=function(e){return this.path.isEmpty()?new t(this.source,B.Empty,this.snap.getImmediateChild(e)):new t(this.source,this.path.popFront(),this.snap)},t}(),fe=function(){function t(t,e,n){this.source=t,this.path=e,this.children=n,this.type=Qt.MERGE}return t.prototype.operationForChild=function(e){if(this.path.isEmpty()){var n=this.children.subtree(new B(e));return n.isEmpty()?null:n.value?new he(this.source,B.Empty,n.value):new t(this.source,B.Empty,n)}return a.assert(this.path.getFront()===e,"Can't get a merge for a child not on the path of the operation"),new t(this.source,this.path.popFront(),this.children)},t.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"},t}(),pe=function(){function t(t,e,n){this.node_=t,this.fullyInitialized_=e,this.filtered_=n}return t.prototype.isFullyInitialized=function(){return this.fullyInitialized_},t.prototype.isFiltered=function(){return this.filtered_},t.prototype.isCompleteForPath=function(t){if(t.isEmpty())return this.isFullyInitialized()&&!this.filtered_;var e=t.getFront();return this.isCompleteForChild(e)},t.prototype.isCompleteForChild=function(t){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(t)},t.prototype.getNode=function(){return this.node_},t}(),de=function(){function t(t,e){this.eventCache_=t,this.serverCache_=e}return t.prototype.updateEventSnap=function(e,n,r){return new t(new pe(e,n,r),this.serverCache_)},t.prototype.updateServerSnap=function(e,n,r){return new t(this.eventCache_,new pe(e,n,r))},t.prototype.getEventCache=function(){return this.eventCache_},t.prototype.getCompleteEventSnap=function(){return this.eventCache_.isFullyInitialized()?this.eventCache_.getNode():null},t.prototype.getServerCache=function(){return this.serverCache_},t.prototype.getCompleteServerSnap=function(){return this.serverCache_.isFullyInitialized()?this.serverCache_.getNode():null},t.Empty=new t(new pe(Wt.EMPTY_NODE,!1,!1),new pe(Wt.EMPTY_NODE,!1,!1)),t}(),ye=function(){function t(t,e,n,r,i){this.type=t,this.snapshotNode=e,this.childName=n,this.oldSnap=r,this.prevName=i}return t.valueChange=function(e){return new t(t.VALUE,e)},t.childAddedChange=function(e,n){return new t(t.CHILD_ADDED,n,e)},t.childRemovedChange=function(e,n){return new t(t.CHILD_REMOVED,n,e)},t.childChangedChange=function(e,n,r){return new t(t.CHILD_CHANGED,n,e,r)},t.childMovedChange=function(e,n){return new t(t.CHILD_MOVED,n,e)},t.CHILD_ADDED="child_added",t.CHILD_REMOVED="child_removed",t.CHILD_CHANGED="child_changed",t.CHILD_MOVED="child_moved",t.VALUE="value",t}(),ve=function(){function t(t){this.index_=t}return t.prototype.updateChild=function(t,e,n,r,i,o){a.assert(t.isIndexed(this.index_),"A node must be indexed if only a child is updated");var s=t.getImmediateChild(e);return s.getChild(r).equals(n.getChild(r))&&s.isEmpty()==n.isEmpty()?t:(null!=o&&(n.isEmpty()?t.hasChild(e)?o.trackChildChange(ye.childRemovedChange(e,s)):a.assert(t.isLeafNode(),"A child remove without an old child only makes sense on a leaf node"):s.isEmpty()?o.trackChildChange(ye.childAddedChange(e,n)):o.trackChildChange(ye.childChangedChange(e,n,s))),t.isLeafNode()&&n.isEmpty()?t:t.updateImmediateChild(e,n).withIndex(this.index_))},t.prototype.updateFullNode=function(t,e,n){return null!=n&&(t.isLeafNode()||t.forEachChild(Pt,function(t,r){e.hasChild(t)||n.trackChildChange(ye.childRemovedChange(t,r))}),e.isLeafNode()||e.forEachChild(Pt,function(e,r){if(t.hasChild(e)){var i=t.getImmediateChild(e);i.equals(r)||n.trackChildChange(ye.childChangedChange(e,r,i))}else n.trackChildChange(ye.childAddedChange(e,r))})),e.withIndex(this.index_)},t.prototype.updatePriority=function(t,e){return t.isEmpty()?Wt.EMPTY_NODE:t.updatePriority(e)},t.prototype.filtersNodes=function(){return!1},t.prototype.getIndexedFilter=function(){return this},t.prototype.getIndex=function(){return this.index_},t}(),ge=function(){function t(){this.changeMap_={}}return t.prototype.trackChildChange=function(t){var e=t.type,n=t.childName;a.assert(e==ye.CHILD_ADDED||e==ye.CHILD_CHANGED||e==ye.CHILD_REMOVED,"Only child changes supported for tracking"),a.assert(".priority"!==n,"Only non-priority child changes can be tracked.");var r=a.safeGet(this.changeMap_,n);if(r){var i=r.type;if(e==ye.CHILD_ADDED&&i==ye.CHILD_REMOVED)this.changeMap_[n]=ye.childChangedChange(n,t.snapshotNode,r.snapshotNode);else if(e==ye.CHILD_REMOVED&&i==ye.CHILD_ADDED)delete this.changeMap_[n];else if(e==ye.CHILD_REMOVED&&i==ye.CHILD_CHANGED)this.changeMap_[n]=ye.childRemovedChange(n,r.oldSnap);else if(e==ye.CHILD_CHANGED&&i==ye.CHILD_ADDED)this.changeMap_[n]=ye.childAddedChange(n,t.snapshotNode);else{if(e!=ye.CHILD_CHANGED||i!=ye.CHILD_CHANGED)throw a.assertionError("Illegal combination of changes: "+t+" occurred after "+r);this.changeMap_[n]=ye.childChangedChange(n,t.snapshotNode,r.oldSnap)}}else this.changeMap_[n]=t},t.prototype.getChanges=function(){return a.getValues(this.changeMap_)},t}(),me=new(function(){function t(){}return t.prototype.getCompleteChild=function(t){return null},t.prototype.getChildAfterChild=function(t,e,n){return null},t}()),_e=function(){function t(t,e,n){void 0===n&&(n=null),this.writes_=t,this.viewCache_=e,this.optCompleteServerCache_=n}return t.prototype.getCompleteChild=function(t){var e=this.viewCache_.getEventCache();if(e.isCompleteForChild(t))return e.getNode().getImmediateChild(t);var n=null!=this.optCompleteServerCache_?new pe(this.optCompleteServerCache_,!0,!1):this.viewCache_.getServerCache();return this.writes_.calcCompleteChild(t,n)},t.prototype.getChildAfterChild=function(t,e,n){var r=null!=this.optCompleteServerCache_?this.optCompleteServerCache_:this.viewCache_.getCompleteServerSnap(),i=this.writes_.calcIndexedSlice(r,e,1,n,t);return 0===i.length?null:i[0]},t}(),be=function(){return function(t,e){this.viewCache=t,this.changes=e}}(),we=function(){function t(t){this.filter_=t}return t.prototype.assertIndexed=function(t){a.assert(t.getEventCache().getNode().isIndexed(this.filter_.getIndex()),"Event snap not indexed"),a.assert(t.getServerCache().getNode().isIndexed(this.filter_.getIndex()),"Server snap not indexed")},t.prototype.applyOperation=function(e,n,r,i){var o,s,u=new ge;if(n.type===Qt.OVERWRITE){var c=n;c.source.fromUser?o=this.applyUserOverwrite_(e,c.path,c.snap,r,i,u):(a.assert(c.source.fromServer,"Unknown source."),s=c.source.tagged||e.getServerCache().isFiltered()&&!c.path.isEmpty(),o=this.applyServerOverwrite_(e,c.path,c.snap,r,i,s,u))}else if(n.type===Qt.MERGE){var l=n;l.source.fromUser?o=this.applyUserMerge_(e,l.path,l.children,r,i,u):(a.assert(l.source.fromServer,"Unknown source."),s=l.source.tagged||e.getServerCache().isFiltered(),o=this.applyServerMerge_(e,l.path,l.children,r,i,s,u))}else if(n.type===Qt.ACK_USER_WRITE){var h=n;o=h.revert?this.revertUserWrite_(e,h.path,r,i,u):this.ackUserWrite_(e,h.path,h.affectedTree,r,i,u)}else{if(n.type!==Qt.LISTEN_COMPLETE)throw a.assertionError("Unknown operation type: "+n.type);o=this.listenComplete_(e,n.path,r,u)}var f=u.getChanges();return t.maybeAddValueEvent_(e,o,f),new be(o,f)},t.maybeAddValueEvent_=function(t,e,n){var r=e.getEventCache();if(r.isFullyInitialized()){var i=r.getNode().isLeafNode()||r.getNode().isEmpty(),o=t.getCompleteEventSnap();(n.length>0||!t.getEventCache().isFullyInitialized()||i&&!r.getNode().equals(o)||!r.getNode().getPriority().equals(o.getPriority()))&&n.push(ye.valueChange(e.getCompleteEventSnap()))}},t.prototype.generateEventCacheAfterServerEvent_=function(t,e,n,r,i){var o=t.getEventCache();if(null!=n.shadowingWrite(e))return t;var s=void 0,u=void 0;if(e.isEmpty())if(a.assert(t.getServerCache().isFullyInitialized(),"If change path is empty, we must have complete server data"),t.getServerCache().isFiltered()){var c=t.getCompleteServerSnap(),l=c instanceof Wt?c:Wt.EMPTY_NODE,h=n.calcCompleteEventChildren(l);s=this.filter_.updateFullNode(t.getEventCache().getNode(),h,i)}else{var f=n.calcCompleteEventCache(t.getCompleteServerSnap());s=this.filter_.updateFullNode(t.getEventCache().getNode(),f,i)}else{var p=e.getFront();if(".priority"==p){a.assert(1==e.getLength(),"Can't have a priority with additional path components");var d=o.getNode();u=t.getServerCache().getNode();var y=n.calcEventCacheAfterServerOverwrite(e,d,u);s=null!=y?this.filter_.updatePriority(d,y):o.getNode()}else{var v=e.popFront(),g=void 0;if(o.isCompleteForChild(p)){u=t.getServerCache().getNode();var m=n.calcEventCacheAfterServerOverwrite(e,o.getNode(),u);g=null!=m?o.getNode().getImmediateChild(p).updateChild(v,m):o.getNode().getImmediateChild(p)}else g=n.calcCompleteChild(p,t.getServerCache());s=null!=g?this.filter_.updateChild(o.getNode(),p,g,v,r,i):o.getNode()}}return t.updateEventSnap(s,o.isFullyInitialized()||e.isEmpty(),this.filter_.filtersNodes())},t.prototype.applyServerOverwrite_=function(t,e,n,r,i,o,a){var s,u=t.getServerCache(),c=o?this.filter_:this.filter_.getIndexedFilter();if(e.isEmpty())s=c.updateFullNode(u.getNode(),n,null);else if(c.filtersNodes()&&!u.isFiltered()){var l=u.getNode().updateChild(e,n);s=c.updateFullNode(u.getNode(),l,null)}else{var h=e.getFront();if(!u.isCompleteForPath(e)&&e.getLength()>1)return t;var f=e.popFront(),p=u.getNode().getImmediateChild(h).updateChild(f,n);s=".priority"==h?c.updatePriority(u.getNode(),p):c.updateChild(u.getNode(),h,p,f,me,null)}var d=t.updateServerSnap(s,u.isFullyInitialized()||e.isEmpty(),c.filtersNodes()),y=new _e(r,d,i);return this.generateEventCacheAfterServerEvent_(d,e,r,y,a)},t.prototype.applyUserOverwrite_=function(t,e,n,r,i,o){var a,s,u=t.getEventCache(),c=new _e(r,t,i);if(e.isEmpty())s=this.filter_.updateFullNode(t.getEventCache().getNode(),n,o),a=t.updateEventSnap(s,!0,this.filter_.filtersNodes());else{var l=e.getFront();if(".priority"===l)s=this.filter_.updatePriority(t.getEventCache().getNode(),n),a=t.updateEventSnap(s,u.isFullyInitialized(),u.isFiltered());else{var h=e.popFront(),f=u.getNode().getImmediateChild(l),p=void 0;if(h.isEmpty())p=n;else{var d=c.getCompleteChild(l);p=null!=d?".priority"===h.getBack()&&d.getChild(h.parent()).isEmpty()?d:d.updateChild(h,n):Wt.EMPTY_NODE}if(f.equals(p))a=t;else{var y=this.filter_.updateChild(u.getNode(),l,p,h,c,o);a=t.updateEventSnap(y,u.isFullyInitialized(),this.filter_.filtersNodes())}}}return a},t.cacheHasChild_=function(t,e){return t.getEventCache().isCompleteForChild(e)},t.prototype.applyUserMerge_=function(e,n,r,i,o,a){var s=this,u=e;return r.foreach(function(r,c){var l=n.child(r);t.cacheHasChild_(e,l.getFront())&&(u=s.applyUserOverwrite_(u,l,c,i,o,a))}),r.foreach(function(r,c){var l=n.child(r);t.cacheHasChild_(e,l.getFront())||(u=s.applyUserOverwrite_(u,l,c,i,o,a))}),u},t.prototype.applyMerge_=function(t,e){return e.foreach(function(e,n){t=t.updateChild(e,n)}),t},t.prototype.applyServerMerge_=function(t,e,n,r,i,o,a){var s=this;if(t.getServerCache().getNode().isEmpty()&&!t.getServerCache().isFullyInitialized())return t;var u,c=t;u=e.isEmpty()?n:ce.Empty.setTree(e,n);var l=t.getServerCache().getNode();return u.children.inorderTraversal(function(e,n){if(l.hasChild(e)){var u=t.getServerCache().getNode().getImmediateChild(e),h=s.applyMerge_(u,n);c=s.applyServerOverwrite_(c,new B(e),h,r,i,o,a)}}),u.children.inorderTraversal(function(e,n){var u=!t.getServerCache().isCompleteForChild(e)&&null==n.value;if(!l.hasChild(e)&&!u){var h=t.getServerCache().getNode().getImmediateChild(e),f=s.applyMerge_(h,n);c=s.applyServerOverwrite_(c,new B(e),f,r,i,o,a)}}),c},t.prototype.ackUserWrite_=function(t,e,n,r,i,o){if(null!=r.shadowingWrite(e))return t;var a=t.getServerCache().isFiltered(),s=t.getServerCache();if(null!=n.value){if(e.isEmpty()&&s.isFullyInitialized()||s.isCompleteForPath(e))return this.applyServerOverwrite_(t,e,s.getNode().getChild(e),r,i,a,o);if(e.isEmpty()){var u=ce.Empty;return s.getNode().forEachChild(_t,function(t,e){u=u.set(new B(t),e)}),this.applyServerMerge_(t,e,u,r,i,a,o)}return t}var c=ce.Empty;return n.foreach(function(t,n){var r=e.child(t);s.isCompleteForPath(r)&&(c=c.set(t,s.getNode().getChild(r)))}),this.applyServerMerge_(t,e,c,r,i,a,o)},t.prototype.listenComplete_=function(t,e,n,r){var i=t.getServerCache(),o=t.updateServerSnap(i.getNode(),i.isFullyInitialized()||e.isEmpty(),i.isFiltered());return this.generateEventCacheAfterServerEvent_(o,e,n,me,r)},t.prototype.revertUserWrite_=function(t,e,n,r,i){var o;if(null!=n.shadowingWrite(e))return t;var s=new _e(n,t,r),u=t.getEventCache().getNode(),c=void 0;if(e.isEmpty()||".priority"===e.getFront()){var l=void 0;if(t.getServerCache().isFullyInitialized())l=n.calcCompleteEventCache(t.getCompleteServerSnap());else{var h=t.getServerCache().getNode();a.assert(h instanceof Wt,"serverChildren would be complete if leaf node"),l=n.calcCompleteEventChildren(h)}l=l,c=this.filter_.updateFullNode(u,l,i)}else{var f=e.getFront(),p=n.calcCompleteChild(f,t.getServerCache());null==p&&t.getServerCache().isCompleteForChild(f)&&(p=u.getImmediateChild(f)),(c=null!=p?this.filter_.updateChild(u,f,p,e.popFront(),s,i):t.getEventCache().getNode().hasChild(f)?this.filter_.updateChild(u,f,Wt.EMPTY_NODE,e.popFront(),s,i):u).isEmpty()&&t.getServerCache().isFullyInitialized()&&(o=n.calcCompleteEventCache(t.getCompleteServerSnap())).isLeafNode()&&(c=this.filter_.updateFullNode(c,o,i))}return o=t.getServerCache().isFullyInitialized()||null!=n.shadowingWrite(B.Empty),t.updateEventSnap(c,o,this.filter_.filtersNodes())},t}(),Ee=function(){function t(t){this.query_=t,this.index_=this.query_.getQueryParams().getIndex()}return t.prototype.generateEventsForChanges=function(t,e,n){var r=this,i=[],o=[];return t.forEach(function(t){t.type===ye.CHILD_CHANGED&&r.index_.indexedValueChanged(t.oldSnap,t.snapshotNode)&&o.push(ye.childMovedChange(t.childName,t.snapshotNode))}),this.generateEventsForType_(i,ye.CHILD_REMOVED,t,n,e),this.generateEventsForType_(i,ye.CHILD_ADDED,t,n,e),this.generateEventsForType_(i,ye.CHILD_MOVED,o,n,e),this.generateEventsForType_(i,ye.CHILD_CHANGED,t,n,e),this.generateEventsForType_(i,ye.VALUE,t,n,e),i},t.prototype.generateEventsForType_=function(t,e,n,r,i){var o=this,a=n.filter(function(t){return t.type===e});a.sort(this.compareChanges_.bind(this)),a.forEach(function(e){var n=o.materializeSingleChange_(e,i);r.forEach(function(r){r.respondsTo(e.type)&&t.push(r.createEvent(n,o.query_))})})},t.prototype.materializeSingleChange_=function(t,e){return"value"===t.type||"child_removed"===t.type?t:(t.prevName=e.getPredecessorChildName(t.childName,t.snapshotNode,this.index_),t)},t.prototype.compareChanges_=function(t,e){if(null==t.childName||null==e.childName)throw a.assertionError("Should only compare child_ events.");var n=new vt(t.childName,t.snapshotNode),r=new vt(e.childName,e.snapshotNode);return this.index_.compare(n,r)},t}(),Se=function(){function t(t,e){this.query_=t,this.eventRegistrations_=[];var n=this.query_.getQueryParams(),r=new ve(n.getIndex()),i=n.getNodeFilter();this.processor_=new we(i);var o=e.getServerCache(),a=e.getEventCache(),s=r.updateFullNode(Wt.EMPTY_NODE,o.getNode(),null),u=i.updateFullNode(Wt.EMPTY_NODE,a.getNode(),null),c=new pe(s,o.isFullyInitialized(),r.filtersNodes()),l=new pe(u,a.isFullyInitialized(),i.filtersNodes());this.viewCache_=new de(l,c),this.eventGenerator_=new Ee(this.query_)}return t.prototype.getQuery=function(){return this.query_},t.prototype.getServerCache=function(){return this.viewCache_.getServerCache().getNode()},t.prototype.getCompleteServerCache=function(t){var e=this.viewCache_.getCompleteServerSnap();return e&&(this.query_.getQueryParams().loadsAllData()||!t.isEmpty()&&!e.getImmediateChild(t.getFront()).isEmpty())?e.getChild(t):null},t.prototype.isEmpty=function(){return 0===this.eventRegistrations_.length},t.prototype.addEventRegistration=function(t){this.eventRegistrations_.push(t)},t.prototype.removeEventRegistration=function(t,e){var n=[];if(e){a.assert(null==t,"A cancel should cancel all event registrations.");var r=this.query_.path;this.eventRegistrations_.forEach(function(t){e=e;var i=t.createCancelEvent(e,r);i&&n.push(i)})}if(t){for(var i=[],o=0;o<this.eventRegistrations_.length;++o){var s=this.eventRegistrations_[o];if(s.matches(t)){if(t.hasAnyCallback()){i=i.concat(this.eventRegistrations_.slice(o+1));break}}else i.push(s)}this.eventRegistrations_=i}else this.eventRegistrations_=[];return n},t.prototype.applyOperation=function(t,e,n){t.type===Qt.MERGE&&null!==t.source.queryId&&(a.assert(this.viewCache_.getCompleteServerSnap(),"We should always have a full cache before handling merges"),a.assert(this.viewCache_.getCompleteEventSnap(),"Missing event cache, even though we have a server cache"));var r=this.viewCache_,i=this.processor_.applyOperation(r,t,e,n);return this.processor_.assertIndexed(i.viewCache),a.assert(i.viewCache.getServerCache().isFullyInitialized()||!r.getServerCache().isFullyInitialized(),"Once a server snap is complete, it should never go back"),this.viewCache_=i.viewCache,this.generateEventsForChanges_(i.changes,i.viewCache.getEventCache().getNode(),null)},t.prototype.getInitialEvents=function(t){var e=this.viewCache_.getEventCache(),n=[];e.getNode().isLeafNode()||e.getNode().forEachChild(Pt,function(t,e){n.push(ye.childAddedChange(t,e))});return e.isFullyInitialized()&&n.push(ye.valueChange(e.getNode())),this.generateEventsForChanges_(n,e.getNode(),t)},t.prototype.generateEventsForChanges_=function(t,e,n){var r=n?[n]:this.eventRegistrations_;return this.eventGenerator_.generateEventsForChanges(t,e,r)},t}(),Ce=function(){function t(){this.views_={}}return Object.defineProperty(t,"__referenceConstructor",{get:function(){return a.assert(oe,"Reference.ts has not been loaded"),oe},set:function(t){a.assert(!oe,"__referenceConstructor has already been defined"),oe=t},enumerable:!0,configurable:!0}),t.prototype.isEmpty=function(){return a.isEmpty(this.views_)},t.prototype.applyOperation=function(t,e,n){var r=t.source.queryId;if(null!==r){var i=a.safeGet(this.views_,r);return a.assert(null!=i,"SyncTree gave us an op for an invalid query."),i.applyOperation(t,e,n)}var o=[];return a.forEach(this.views_,function(r,i){o=o.concat(i.applyOperation(t,e,n))}),o},t.prototype.addEventRegistration=function(t,e,n,r,i){var o=t.queryIdentifier(),s=a.safeGet(this.views_,o);if(!s){var u=n.calcCompleteEventCache(i?r:null),c=!1;u?c=!0:r instanceof Wt?(u=n.calcCompleteEventChildren(r),c=!1):(u=Wt.EMPTY_NODE,c=!1);var l=new de(new pe(u,c,!1),new pe(r,i,!1));s=new Se(t,l),this.views_[o]=s}return s.addEventRegistration(e),s.getInitialEvents(e)},t.prototype.removeEventRegistration=function(e,n,r){var i=e.queryIdentifier(),o=[],s=[],u=this.hasCompleteView();if("default"===i){var c=this;a.forEach(this.views_,function(t,e){s=s.concat(e.removeEventRegistration(n,r)),e.isEmpty()&&(delete c.views_[t],e.getQuery().getQueryParams().loadsAllData()||o.push(e.getQuery()))})}else{var l=a.safeGet(this.views_,i);l&&(s=s.concat(l.removeEventRegistration(n,r)),l.isEmpty()&&(delete this.views_[i],l.getQuery().getQueryParams().loadsAllData()||o.push(l.getQuery())))}return u&&!this.hasCompleteView()&&o.push(new t.__referenceConstructor(e.repo,e.path)),{removed:o,events:s}},t.prototype.getQueryViews=function(){var t=this;return Object.keys(this.views_).map(function(e){return t.views_[e]}).filter(function(t){return!t.getQuery().getQueryParams().loadsAllData()})},t.prototype.getCompleteServerCache=function(t){var e=null;return a.forEach(this.views_,function(n,r){e=e||r.getCompleteServerCache(t)}),e},t.prototype.viewForQuery=function(t){if(t.getQueryParams().loadsAllData())return this.getCompleteView();var e=t.queryIdentifier();return a.safeGet(this.views_,e)},t.prototype.viewExistsForQuery=function(t){return null!=this.viewForQuery(t)},t.prototype.hasCompleteView=function(){return null!=this.getCompleteView()},t.prototype.getCompleteView=function(){return a.findValue(this.views_,function(t){return t.getQuery().getQueryParams().loadsAllData()})||null},t}(),xe=function(){function t(t){this.writeTree_=t}return t.prototype.addWrite=function(e,n){if(e.isEmpty())return new t(new ce(n));var r=this.writeTree_.findRootMostValueAndPath(e);if(null!=r){var i=r.path,o=r.value,a=B.relativePath(i,e);return o=o.updateChild(a,n),new t(this.writeTree_.set(i,o))}var s=new ce(n);return new t(this.writeTree_.setTree(e,s))},t.prototype.addWrites=function(t,e){var n=this;return a.forEach(e,function(e,r){n=n.addWrite(t.child(e),r)}),n},t.prototype.removeWrite=function(e){return e.isEmpty()?t.Empty:new t(this.writeTree_.setTree(e,ce.Empty))},t.prototype.hasCompleteWrite=function(t){return null!=this.getCompleteNode(t)},t.prototype.getCompleteNode=function(t){var e=this.writeTree_.findRootMostValueAndPath(t);return null!=e?this.writeTree_.get(e.path).getChild(B.relativePath(e.path,t)):null},t.prototype.getCompleteChildren=function(){var t=[],e=this.writeTree_.value;return null!=e?e.isLeafNode()||e.forEachChild(Pt,function(e,n){t.push(new vt(e,n))}):this.writeTree_.children.inorderTraversal(function(e,n){null!=n.value&&t.push(new vt(e,n.value))}),t},t.prototype.childCompoundWrite=function(e){if(e.isEmpty())return this;var n=this.getCompleteNode(e);return new t(null!=n?new ce(n):this.writeTree_.subtree(e))},t.prototype.isEmpty=function(){return this.writeTree_.isEmpty()},t.prototype.apply=function(e){return t.applySubtreeWrite_(B.Empty,this.writeTree_,e)},t.Empty=new t(new ce(null)),t.applySubtreeWrite_=function(e,n,r){if(null!=n.value)return r.updateChild(e,n.value);var i=null;return n.children.inorderTraversal(function(n,o){".priority"===n?(a.assert(null!==o.value,"Priority writes must always be leaf nodes"),i=o.value):r=t.applySubtreeWrite_(e.child(n),o,r)}),r.getChild(e).isEmpty()||null===i||(r=r.updateChild(e.child(".priority"),i)),r},t}(),Te=function(){function t(){this.visibleWrites_=xe.Empty,this.allWrites_=[],this.lastWriteId_=-1}return t.prototype.childWrites=function(t){return new ke(t,this)},t.prototype.addOverwrite=function(t,e,n,r){a.assert(n>this.lastWriteId_,"Stacking an older write on top of newer ones"),void 0===r&&(r=!0),this.allWrites_.push({path:t,snap:e,writeId:n,visible:r}),r&&(this.visibleWrites_=this.visibleWrites_.addWrite(t,e)),this.lastWriteId_=n},t.prototype.addMerge=function(t,e,n){a.assert(n>this.lastWriteId_,"Stacking an older merge on top of newer ones"),this.allWrites_.push({path:t,children:e,writeId:n,visible:!0}),this.visibleWrites_=this.visibleWrites_.addWrites(t,e),this.lastWriteId_=n},t.prototype.getWrite=function(t){for(var e=0;e<this.allWrites_.length;e++){var n=this.allWrites_[e];if(n.writeId===t)return n}return null},t.prototype.removeWrite=function(t){var e=this,n=this.allWrites_.findIndex(function(e){return e.writeId===t});a.assert(n>=0,"removeWrite called with nonexistent writeId.");var r=this.allWrites_[n];this.allWrites_.splice(n,1);for(var i=r.visible,o=!1,s=this.allWrites_.length-1;i&&s>=0;){var u=this.allWrites_[s];u.visible&&(s>=n&&this.recordContainsPath_(u,r.path)?i=!1:r.path.contains(u.path)&&(o=!0)),s--}if(i){if(o)return this.resetTree_(),!0;if(r.snap)this.visibleWrites_=this.visibleWrites_.removeWrite(r.path);else{var c=r.children;a.forEach(c,function(t){e.visibleWrites_=e.visibleWrites_.removeWrite(r.path.child(t))})}return!0}return!1},t.prototype.getCompleteWriteData=function(t){return this.visibleWrites_.getCompleteNode(t)},t.prototype.calcCompleteEventCache=function(e,n,r,i){if(r||i){var o=this.visibleWrites_.childCompoundWrite(e);if(!i&&o.isEmpty())return n;if(i||null!=n||o.hasCompleteWrite(B.Empty)){var a=t.layerTree_(this.allWrites_,function(t){return(t.visible||i)&&(!r||!~r.indexOf(t.writeId))&&(t.path.contains(e)||e.contains(t.path))},e);c=n||Wt.EMPTY_NODE;return a.apply(c)}return null}var s=this.visibleWrites_.getCompleteNode(e);if(null!=s)return s;var u=this.visibleWrites_.childCompoundWrite(e);if(u.isEmpty())return n;if(null!=n||u.hasCompleteWrite(B.Empty)){var c=n||Wt.EMPTY_NODE;return u.apply(c)}return null},t.prototype.calcCompleteEventChildren=function(t,e){var n=Wt.EMPTY_NODE,r=this.visibleWrites_.getCompleteNode(t);if(r)return r.isLeafNode()||r.forEachChild(Pt,function(t,e){n=n.updateImmediateChild(t,e)}),n;if(e){var i=this.visibleWrites_.childCompoundWrite(t);return e.forEachChild(Pt,function(t,e){var r=i.childCompoundWrite(new B(t)).apply(e);n=n.updateImmediateChild(t,r)}),i.getCompleteChildren().forEach(function(t){n=n.updateImmediateChild(t.name,t.node)}),n}return this.visibleWrites_.childCompoundWrite(t).getCompleteChildren().forEach(function(t){n=n.updateImmediateChild(t.name,t.node)}),n},t.prototype.calcEventCacheAfterServerOverwrite=function(t,e,n,r){a.assert(n||r,"Either existingEventSnap or existingServerSnap must exist");var i=t.child(e);if(this.visibleWrites_.hasCompleteWrite(i))return null;var o=this.visibleWrites_.childCompoundWrite(i);return o.isEmpty()?r.getChild(e):o.apply(r.getChild(e))},t.prototype.calcCompleteChild=function(t,e,n){var r=t.child(e),i=this.visibleWrites_.getCompleteNode(r);return null!=i?i:n.isCompleteForChild(e)?this.visibleWrites_.childCompoundWrite(r).apply(n.getNode().getImmediateChild(e)):null},t.prototype.shadowingWrite=function(t){return this.visibleWrites_.getCompleteNode(t)},t.prototype.calcIndexedSlice=function(t,e,n,r,i,o){var a,s=this.visibleWrites_.childCompoundWrite(t),u=s.getCompleteNode(B.Empty);if(null!=u)a=u;else{if(null==e)return[];a=s.apply(e)}if((a=a.withIndex(o)).isEmpty()||a.isLeafNode())return[];for(var c=[],l=o.getCompare(),h=i?a.getReverseIteratorFrom(n,o):a.getIteratorFrom(n,o),f=h.getNext();f&&c.length<r;)0!==l(f,n)&&c.push(f),f=h.getNext();return c},t.prototype.recordContainsPath_=function(t,e){return t.snap?t.path.contains(e):!!a.findKey(t.children,function(n,r){return t.path.child(r).contains(e)})},t.prototype.resetTree_=function(){this.visibleWrites_=t.layerTree_(this.allWrites_,t.DefaultFilter_,B.Empty),this.allWrites_.length>0?this.lastWriteId_=this.allWrites_[this.allWrites_.length-1].writeId:this.lastWriteId_=-1},t.DefaultFilter_=function(t){return t.visible},t.layerTree_=function(t,e,n){for(var r=xe.Empty,i=0;i<t.length;++i){var o=t[i];if(e(o)){var s=o.path,u=void 0;if(o.snap)n.contains(s)?(u=B.relativePath(n,s),r=r.addWrite(u,o.snap)):s.contains(n)&&(u=B.relativePath(s,n),r=r.addWrite(B.Empty,o.snap.getChild(u)));else{if(!o.children)throw a.assertionError("WriteRecord should have .snap or .children");if(n.contains(s))u=B.relativePath(n,s),r=r.addWrites(u,o.children);else if(s.contains(n))if((u=B.relativePath(s,n)).isEmpty())r=r.addWrites(B.Empty,o.children);else{var c=a.safeGet(o.children,u.getFront());if(c){var l=c.getChild(u.popFront());r=r.addWrite(B.Empty,l)}}}}}return r},t}(),ke=function(){function t(t,e){this.treePath_=t,this.writeTree_=e}return t.prototype.calcCompleteEventCache=function(t,e,n){return this.writeTree_.calcCompleteEventCache(this.treePath_,t,e,n)},t.prototype.calcCompleteEventChildren=function(t){return this.writeTree_.calcCompleteEventChildren(this.treePath_,t)},t.prototype.calcEventCacheAfterServerOverwrite=function(t,e,n){return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_,t,e,n)},t.prototype.shadowingWrite=function(t){return this.writeTree_.shadowingWrite(this.treePath_.child(t))},t.prototype.calcIndexedSlice=function(t,e,n,r,i){return this.writeTree_.calcIndexedSlice(this.treePath_,t,e,n,r,i)},t.prototype.calcCompleteChild=function(t,e){return this.writeTree_.calcCompleteChild(this.treePath_,t,e)},t.prototype.child=function(e){return new t(this.treePath_.child(e),this.writeTree_)},t}(),Pe=function(){function t(t){this.listenProvider_=t,this.syncPointTree_=ce.Empty,this.pendingWriteTree_=new Te,this.tagToQueryMap_={},this.queryToTagMap_={}}return t.prototype.applyUserOverwrite=function(t,e,n,r){return this.pendingWriteTree_.addOverwrite(t,e,n,r),r?this.applyOperationToSyncPoints_(new he(ae.User,t,e)):[]},t.prototype.applyUserMerge=function(t,e,n){this.pendingWriteTree_.addMerge(t,e,n);var r=ce.fromObject(e);return this.applyOperationToSyncPoints_(new fe(ae.User,t,r))},t.prototype.ackUserWrite=function(t,e){void 0===e&&(e=!1);var n=this.pendingWriteTree_.getWrite(t);if(this.pendingWriteTree_.removeWrite(t)){var r=ce.Empty;return null!=n.snap?r=r.set(B.Empty,!0):a.forEach(n.children,function(t,e){r=r.set(new B(t),e)}),this.applyOperationToSyncPoints_(new se(n.path,r,e))}return[]},t.prototype.applyServerOverwrite=function(t,e){return this.applyOperationToSyncPoints_(new he(ae.Server,t,e))},t.prototype.applyServerMerge=function(t,e){var n=ce.fromObject(e);return this.applyOperationToSyncPoints_(new fe(ae.Server,t,n))},t.prototype.applyListenComplete=function(t){return this.applyOperationToSyncPoints_(new le(ae.Server,t))},t.prototype.applyTaggedQueryOverwrite=function(e,n,r){var i=this.queryKeyForTag_(r);if(null!=i){var o=t.parseQueryKey_(i),a=o.path,s=o.queryId,u=B.relativePath(a,e),c=new he(ae.forServerTaggedQuery(s),u,n);return this.applyTaggedOperation_(a,c)}return[]},t.prototype.applyTaggedQueryMerge=function(e,n,r){var i=this.queryKeyForTag_(r);if(i){var o=t.parseQueryKey_(i),a=o.path,s=o.queryId,u=B.relativePath(a,e),c=ce.fromObject(n),l=new fe(ae.forServerTaggedQuery(s),u,c);return this.applyTaggedOperation_(a,l)}return[]},t.prototype.applyTaggedListenComplete=function(e,n){var r=this.queryKeyForTag_(n);if(r){var i=t.parseQueryKey_(r),o=i.path,a=i.queryId,s=B.relativePath(o,e),u=new le(ae.forServerTaggedQuery(a),s);return this.applyTaggedOperation_(o,u)}return[]},t.prototype.addEventRegistration=function(e,n){var r=e.path,i=null,o=!1;this.syncPointTree_.foreachOnPath(r,function(t,e){var n=B.relativePath(t,r);i=i||e.getCompleteServerCache(n),o=o||e.hasCompleteView()});var s,u=this.syncPointTree_.get(r);(u?(o=o||u.hasCompleteView(),i=i||u.getCompleteServerCache(B.Empty)):(u=new Ce,this.syncPointTree_=this.syncPointTree_.set(r,u)),null!=i)?s=!0:(s=!1,i=Wt.EMPTY_NODE,this.syncPointTree_.subtree(r).foreachChild(function(t,e){var n=e.getCompleteServerCache(B.Empty);n&&(i=i.updateImmediateChild(t,n))}));var c=u.viewExistsForQuery(e);if(!c&&!e.getQueryParams().loadsAllData()){var l=t.makeQueryKey_(e);a.assert(!(l in this.queryToTagMap_),"View does not exist, but we have a tag");var h=t.getNextQueryTag_();this.queryToTagMap_[l]=h,this.tagToQueryMap_["_"+h]=l}var f=this.pendingWriteTree_.childWrites(r),p=u.addEventRegistration(e,n,f,i,s);if(!c&&!o){var d=u.viewForQuery(e);p=p.concat(this.setupListener_(e,d))}return p},t.prototype.removeEventRegistration=function(e,n,r){var i=this,o=e.path,a=this.syncPointTree_.get(o),s=[];if(a&&("default"===e.queryIdentifier()||a.viewExistsForQuery(e))){var u=a.removeEventRegistration(e,n,r);a.isEmpty()&&(this.syncPointTree_=this.syncPointTree_.remove(o));var c=u.removed;s=u.events;var l=-1!==c.findIndex(function(t){return t.getQueryParams().loadsAllData()}),h=this.syncPointTree_.findOnPath(o,function(t,e){return e.hasCompleteView()});if(l&&!h){var f=this.syncPointTree_.subtree(o);if(!f.isEmpty())for(var p=this.collectDistinctViewsForSubTree_(f),d=0;d<p.length;++d){var y=p[d],v=y.getQuery(),g=this.createListenerForView_(y);this.listenProvider_.startListening(t.queryForListening_(v),this.tagForQuery_(v),g.hashFn,g.onComplete)}}if(!h&&c.length>0&&!r)if(l){this.listenProvider_.stopListening(t.queryForListening_(e),null)}else c.forEach(function(e){var n=i.queryToTagMap_[t.makeQueryKey_(e)];i.listenProvider_.stopListening(t.queryForListening_(e),n)});this.removeTags_(c)}return s},t.prototype.calcCompleteEventCache=function(t,e){var n=this.pendingWriteTree_,r=this.syncPointTree_.findOnPath(t,function(e,n){var r=B.relativePath(e,t),i=n.getCompleteServerCache(r);if(i)return i});return n.calcCompleteEventCache(t,r,e,!0)},t.prototype.collectDistinctViewsForSubTree_=function(t){return t.fold(function(t,e,n){if(e&&e.hasCompleteView())return[e.getCompleteView()];var r=[];return e&&(r=e.getQueryViews()),a.forEach(n,function(t,e){r=r.concat(e)}),r})},t.prototype.removeTags_=function(e){for(var n=0;n<e.length;++n){var r=e[n];if(!r.getQueryParams().loadsAllData()){var i=t.makeQueryKey_(r),o=this.queryToTagMap_[i];delete this.queryToTagMap_[i],delete this.tagToQueryMap_["_"+o]}}},t.queryForListening_=function(t){return t.getQueryParams().loadsAllData()&&!t.getQueryParams().isDefault()?t.getRef():t},t.prototype.setupListener_=function(e,n){var r=e.path,i=this.tagForQuery_(e),o=this.createListenerForView_(n),s=this.listenProvider_.startListening(t.queryForListening_(e),i,o.hashFn,o.onComplete),u=this.syncPointTree_.subtree(r);if(i)a.assert(!u.value.hasCompleteView(),"If we're adding a query, it shouldn't be shadowed");else for(var c=u.fold(function(t,e,n){if(!t.isEmpty()&&e&&e.hasCompleteView())return[e.getCompleteView().getQuery()];var r=[];return e&&(r=r.concat(e.getQueryViews().map(function(t){return t.getQuery()}))),a.forEach(n,function(t,e){r=r.concat(e)}),r}),l=0;l<c.length;++l){var h=c[l];this.listenProvider_.stopListening(t.queryForListening_(h),this.tagForQuery_(h))}return s},t.prototype.createListenerForView_=function(t){var e=this,n=t.getQuery(),r=this.tagForQuery_(n);return{hashFn:function(){return(t.getServerCache()||Wt.EMPTY_NODE).hash()},onComplete:function(t){if("ok"===t)return r?e.applyTaggedListenComplete(n.path,r):e.applyListenComplete(n.path);var i=function(t,e){var n="Unknown Error";"too_big"===t?n="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"==t?n="Client doesn't have permission to access the desired data.":"unavailable"==t&&(n="The service is unavailable");var r=new Error(t+" at "+e.path.toString()+": "+n);return r.code=t.toUpperCase(),r}(t,n);return e.removeEventRegistration(n,null,i)}}},t.makeQueryKey_=function(t){return t.path.toString()+"$"+t.queryIdentifier()},t.parseQueryKey_=function(t){var e=t.indexOf("$");return a.assert(-1!==e&&e<t.length-1,"Bad queryKey."),{queryId:t.substr(e+1),path:new B(t.substr(0,e))}},t.prototype.queryKeyForTag_=function(t){return this.tagToQueryMap_["_"+t]},t.prototype.tagForQuery_=function(e){var n=t.makeQueryKey_(e);return a.safeGet(this.queryToTagMap_,n)},t.getNextQueryTag_=function(){return t.nextQueryTag_++},t.prototype.applyTaggedOperation_=function(t,e){var n=this.syncPointTree_.get(t);a.assert(n,"Missing sync point for query tag that we're tracking");var r=this.pendingWriteTree_.childWrites(t);return n.applyOperation(e,r,null)},t.prototype.applyOperationToSyncPoints_=function(t){return this.applyOperationHelper_(t,this.syncPointTree_,null,this.pendingWriteTree_.childWrites(B.Empty))},t.prototype.applyOperationHelper_=function(t,e,n,r){if(t.path.isEmpty())return this.applyOperationDescendantsHelper_(t,e,n,r);var i=e.get(B.Empty);null==n&&null!=i&&(n=i.getCompleteServerCache(B.Empty));var o=[],a=t.path.getFront(),s=t.operationForChild(a),u=e.children.get(a);if(u&&s){var c=n?n.getImmediateChild(a):null,l=r.child(a);o=o.concat(this.applyOperationHelper_(s,u,c,l))}return i&&(o=o.concat(i.applyOperation(t,r,n))),o},t.prototype.applyOperationDescendantsHelper_=function(t,e,n,r){var i=this,o=e.get(B.Empty);null==n&&null!=o&&(n=o.getCompleteServerCache(B.Empty));var a=[];return e.children.inorderTraversal(function(e,o){var s=n?n.getImmediateChild(e):null,u=r.child(e),c=t.operationForChild(e);c&&(a=a.concat(i.applyOperationDescendantsHelper_(c,o,s,u)))}),o&&(a=a.concat(o.applyOperation(t,r,n))),a},t.nextQueryTag_=1,t}(),Oe=function(){function t(){this.rootNode_=Wt.EMPTY_NODE}return t.prototype.getNode=function(t){return this.rootNode_.getChild(t)},t.prototype.updateSnapshot=function(t,e){this.rootNode_=this.rootNode_.updateChild(t,e)},t}(),Ie=function(){function t(t){this.app_=t}return t.prototype.getToken=function(t){return this.app_.INTERNAL.getToken(t).then(null,function(t){return t&&"auth/token-not-initialized"===t.code?(E("Got auth/token-not-initialized error.  Treating as null token."),null):Promise.reject(t)})},t.prototype.addTokenChangeListener=function(t){this.app_.INTERNAL.addAuthTokenListener(t)},t.prototype.removeTokenChangeListener=function(t){this.app_.INTERNAL.removeAuthTokenListener(t)},t.prototype.notifyForInvalidToken=function(){var t='Provided authentication credentials for the app named "'+this.app_.name+'" are invalid. This usually indicates your app was not initialized correctly. ';"credential"in this.app_.options?t+='Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':"serviceAccount"in this.app_.options?t+='Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':t+='Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.',T(t)},t}(),Ae=function(){function t(){this.counters_={}}return t.prototype.incrementCounter=function(t,e){void 0===e&&(e=1),a.contains(this.counters_,t)||(this.counters_[t]=0),this.counters_[t]+=e},t.prototype.get=function(){return a.deepCopy(this.counters_)},t}(),Ne=function(){function t(){}return t.getCollection=function(t){var e=t.toString();return this.collections_[e]||(this.collections_[e]=new Ae),this.collections_[e]},t.getOrCreateReporter=function(t,e){var n=t.toString();return this.reporters_[n]||(this.reporters_[n]=e()),this.reporters_[n]},t.collections_={},t.reporters_={},t}(),Re=function(){function t(t){this.collection_=t,this.last_=null}return t.prototype.get=function(){var t=this.collection_.get(),e=a.clone(t);return this.last_&&a.forEach(this.last_,function(t,n){e[t]=e[t]-n}),this.last_=t,e},t}(),De=1e4,Fe=3e4,Me=function(){function t(t,e){this.server_=e,this.statsToReport_={},this.statsListener_=new Re(t);var n=De+(Fe-De)*Math.random();U(this.reportStats_.bind(this),Math.floor(n))}return t.prototype.includeStat=function(t){this.statsToReport_[t]=!0},t.prototype.reportStats_=function(){var t=this,e=this.statsListener_.get(),n={},r=!1;a.forEach(e,function(e,i){i>0&&a.contains(t.statsToReport_,e)&&(n[e]=i,r=!0)}),r&&this.server_.reportStats(n),U(this.reportStats_.bind(this),Math.floor(2*Math.random()*3e5))},t}(),Le=function(){function t(){this.eventLists_=[],this.recursionDepth_=0}return t.prototype.queueEvents=function(t){for(var e=null,n=0;n<t.length;n++){var r=t[n],i=r.getPath();null===e||i.equals(e.getPath())||(this.eventLists_.push(e),e=null),null===e&&(e=new je(i)),e.add(r)}e&&this.eventLists_.push(e)},t.prototype.raiseEventsAtPath=function(t,e){this.queueEvents(e),this.raiseQueuedEventsMatchingPredicate_(function(e){return e.equals(t)})},t.prototype.raiseEventsForChangedPath=function(t,e){this.queueEvents(e),this.raiseQueuedEventsMatchingPredicate_(function(e){return e.contains(t)||t.contains(e)})},t.prototype.raiseQueuedEventsMatchingPredicate_=function(t){this.recursionDepth_++;for(var e=!0,n=0;n<this.eventLists_.length;n++){var r=this.eventLists_[n];if(r)t(r.getPath())?(this.eventLists_[n].raise(),this.eventLists_[n]=null):e=!1}e&&(this.eventLists_=[]),this.recursionDepth_--},t}(),je=function(){function t(t){this.path_=t,this.events_=[]}return t.prototype.add=function(t){this.events_.push(t)},t.prototype.raise=function(){for(var t=0;t<this.events_.length;t++){var e=this.events_[t];if(null!==e){this.events_[t]=null;var n=e.getEventRunner();_&&E("event: "+e.toString()),q(n)}}},t.prototype.getPath=function(){return this.path_},t}(),qe=function(){function t(t){this.allowedEvents_=t,this.listeners_={},a.assert(Array.isArray(t)&&t.length>0,"Requires a non-empty array")}return t.prototype.trigger=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(Array.isArray(this.listeners_[t]))for(var r=this.listeners_[t].slice(),i=0;i<r.length;i++)r[i].callback.apply(r[i].context,e)},t.prototype.on=function(t,e,n){this.validateEventType_(t),this.listeners_[t]=this.listeners_[t]||[],this.listeners_[t].push({callback:e,context:n});var r=this.getInitialEvent(t);r&&e.apply(n,r)},t.prototype.off=function(t,e,n){this.validateEventType_(t);for(var r=this.listeners_[t]||[],i=0;i<r.length;i++)if(r[i].callback===e&&(!n||n===r[i].context))return void r.splice(i,1)},t.prototype.validateEventType_=function(t){a.assert(this.allowedEvents_.find(function(e){return e===t}),"Unknown event: "+t)},t}(),We=function(t){function e(){var e,n,r=t.call(this,["visible"])||this;return"undefined"!=typeof document&&void 0!==document.addEventListener&&(void 0!==document.hidden?(n="visibilitychange",e="hidden"):void 0!==document.mozHidden?(n="mozvisibilitychange",e="mozHidden"):void 0!==document.msHidden?(n="msvisibilitychange",e="msHidden"):void 0!==document.webkitHidden&&(n="webkitvisibilitychange",e="webkitHidden")),r.visible_=!0,n&&document.addEventListener(n,function(){var t=!document[e];t!==r.visible_&&(r.visible_=t,r.trigger("visible",t))},!1),r}return u.__extends(e,t),e.getInstance=function(){return new e},e.prototype.getInitialEvent=function(t){return a.assert("visible"===t,"Unknown event type: "+t),[this.visible_]},e}(qe),Ue=function(t){function e(){var e=t.call(this,["online"])||this;return e.online_=!0,"undefined"==typeof window||void 0===window.addEventListener||a.isMobileCordova()||(window.addEventListener("online",function(){e.online_||(e.online_=!0,e.trigger("online",!0))},!1),window.addEventListener("offline",function(){e.online_&&(e.online_=!1,e.trigger("online",!1))},!1)),e}return u.__extends(e,t),e.getInstance=function(){return new e},e.prototype.getInitialEvent=function(t){return a.assert("online"===t,"Unknown event type: "+t),[this.online_]},e.prototype.currentlyOnline=function(){return this.online_},e}(qe),Be=function(){function t(t){this.onMessage_=t,this.pendingResponses=[],this.currentResponseNum=0,this.closeAfterResponse=-1,this.onClose=null}return t.prototype.closeAfter=function(t,e){this.closeAfterResponse=t,this.onClose=e,this.closeAfterResponse<this.currentResponseNum&&(this.onClose(),this.onClose=null)},t.prototype.handleResponse=function(t,e){var n=this;this.pendingResponses[t]=e;for(var r=function(){var t=i.pendingResponses[i.currentResponseNum];delete i.pendingResponses[i.currentResponseNum];for(var e=function(e){t[e]&&q(function(){n.onMessage_(t[e])})},r=0;r<t.length;++r)e(r);if(i.currentResponseNum===i.closeAfterResponse)return i.onClose&&(i.onClose(),i.onClose=null),"break";i.currentResponseNum++},i=this;this.pendingResponses[this.currentResponseNum];){if("break"===r())break}},t}(),He="pLPCommand",Ve="pRTLPCB",Qe=function(){function t(t,e,n,r){this.connId=t,this.repoInfo=e,this.transportSessionId=n,this.lastSessionId=r,this.bytesSent=0,this.bytesReceived=0,this.everConnected_=!1,this.log_=S(t),this.stats_=Ne.getCollection(e),this.urlFn=function(t){return e.connectionURL(V,t)}}return t.prototype.open=function(t,e){var n=this;this.curSegmentNum=0,this.onDisconnect_=e,this.myPacketOrderer=new Be(t),this.isClosed_=!1,this.connectTimeoutTimer_=setTimeout(function(){n.log_("Timed out trying to connect."),n.onClosed_(),n.connectTimeoutTimer_=null},Math.floor(3e4)),function(t){if(a.isNodeSdk()||"complete"===document.readyState)t();else{var e=!1,n=function(){document.body?e||(e=!0,t()):setTimeout(n,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",function(){"complete"===document.readyState&&n()}),window.attachEvent("onload",n))}}(function(){if(!n.isClosed_){n.scriptTagHolder=new ze(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t[0],i=t[1],o=t[2];if(n.incrementIncomingBytes_(t),n.scriptTagHolder)if(n.connectTimeoutTimer_&&(clearTimeout(n.connectTimeoutTimer_),n.connectTimeoutTimer_=null),n.everConnected_=!0,"start"==r)n.id=i,n.password=o;else{if("close"!==r)throw new Error("Unrecognized command received: "+r);i?(n.scriptTagHolder.sendNewPolls=!1,n.myPacketOrderer.closeAfter(i,function(){n.onClosed_()})):n.onClosed_()}},function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t[0],i=t[1];n.incrementIncomingBytes_(t),n.myPacketOrderer.handleResponse(r,i)},function(){n.onClosed_()},n.urlFn);var t={start:"t"};t.ser=Math.floor(1e8*Math.random()),n.scriptTagHolder.uniqueCallbackIdentifier&&(t.cb=n.scriptTagHolder.uniqueCallbackIdentifier),t.v="5",n.transportSessionId&&(t.s=n.transportSessionId),n.lastSessionId&&(t.ls=n.lastSessionId),!a.isNodeSdk()&&"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(t.r="f");var e=n.urlFn(t);n.log_("Connecting via long-poll to "+e),n.scriptTagHolder.addTag(e,function(){})}})},t.prototype.start=function(){this.scriptTagHolder.startLongPoll(this.id,this.password),this.addDisconnectPingFrame(this.id,this.password)},t.forceAllow=function(){t.forceAllow_=!0},t.forceDisallow=function(){t.forceDisallow_=!0},t.isAvailable=function(){return t.forceAllow_||!t.forceDisallow_&&"undefined"!=typeof document&&null!=document.createElement&&!("object"==typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href))&&!("object"==typeof Windows&&"object"==typeof Windows.UI)&&!a.isNodeSdk()},t.prototype.markConnectionHealthy=function(){},t.prototype.shutdown_=function(){this.isClosed_=!0,this.scriptTagHolder&&(this.scriptTagHolder.close(),this.scriptTagHolder=null),this.myDisconnFrame&&(document.body.removeChild(this.myDisconnFrame),this.myDisconnFrame=null),this.connectTimeoutTimer_&&(clearTimeout(this.connectTimeoutTimer_),this.connectTimeoutTimer_=null)},t.prototype.onClosed_=function(){this.isClosed_||(this.log_("Longpoll is closing itself"),this.shutdown_(),this.onDisconnect_&&(this.onDisconnect_(this.everConnected_),this.onDisconnect_=null))},t.prototype.close=function(){this.isClosed_||(this.log_("Longpoll is being closed."),this.shutdown_())},t.prototype.send=function(t){var e=a.stringify(t);this.bytesSent+=e.length,this.stats_.incrementCounter("bytes_sent",e.length);for(var n=a.base64Encode(e),r=D(n,1840),i=0;i<r.length;i++)this.scriptTagHolder.enqueueSegment(this.curSegmentNum,r.length,r[i]),this.curSegmentNum++},t.prototype.addDisconnectPingFrame=function(t,e){if(!a.isNodeSdk()){this.myDisconnFrame=document.createElement("iframe");var n={dframe:"t"};n.id=t,n.pw=e,this.myDisconnFrame.src=this.urlFn(n),this.myDisconnFrame.style.display="none",document.body.appendChild(this.myDisconnFrame)}},t.prototype.incrementIncomingBytes_=function(t){var e=a.stringify(t).length;this.bytesReceived+=e,this.stats_.incrementCounter("bytes_received",e)},t}(),ze=function(){function t(e,n,r,i){if(this.onDisconnect=r,this.urlFn=i,this.outstandingRequests=new te,this.pendingSegs=[],this.currentSerial=Math.floor(1e8*Math.random()),this.sendNewPolls=!0,a.isNodeSdk())this.commandCB=e,this.onMessageCB=n;else{this.uniqueCallbackIdentifier=v(),window[He+this.uniqueCallbackIdentifier]=e,window[Ve+this.uniqueCallbackIdentifier]=n,this.myIFrame=t.createIFrame_();var o="";if(this.myIFrame.src&&"javascript:"===this.myIFrame.src.substr(0,"javascript:".length))o='<script>document.domain="'+document.domain+'";<\/script>';var s="<html><body>"+o+"</body></html>";try{this.myIFrame.doc.open(),this.myIFrame.doc.write(s),this.myIFrame.doc.close()}catch(t){E("frame writing exception"),t.stack&&E(t.stack),E(t)}}}return t.createIFrame_=function(){var t=document.createElement("iframe");if(t.style.display="none",!document.body)throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";document.body.appendChild(t);try{t.contentWindow.document||E("No IE domain setting required")}catch(n){var e=document.domain;t.src="javascript:void((function(){document.open();document.domain='"+e+"';document.close();})())"}return t.contentDocument?t.doc=t.contentDocument:t.contentWindow?t.doc=t.contentWindow.document:t.document&&(t.doc=t.document),t},t.prototype.close=function(){var e=this;if(this.alive=!1,this.myIFrame&&(this.myIFrame.doc.body.innerHTML="",setTimeout(function(){null!==e.myIFrame&&(document.body.removeChild(e.myIFrame),e.myIFrame=null)},Math.floor(0))),a.isNodeSdk()&&this.myID){var n={disconn:"t"};n.id=this.myID,n.pw=this.myPW;var r=this.urlFn(n);t.nodeRestRequest(r)}var i=this.onDisconnect;i&&(this.onDisconnect=null,i())},t.prototype.startLongPoll=function(t,e){for(this.myID=t,this.myPW=e,this.alive=!0;this.newRequest_(););},t.prototype.newRequest_=function(){if(this.alive&&this.sendNewPolls&&this.outstandingRequests.count()<(this.pendingSegs.length>0?2:1)){this.currentSerial++;var t={};t.id=this.myID,t.pw=this.myPW,t.ser=this.currentSerial;for(var e=this.urlFn(t),n="",r=0;this.pendingSegs.length>0;){if(!(this.pendingSegs[0].d.length+30+n.length<=1870))break;var i=this.pendingSegs.shift();n=n+"&seg"+r+"="+i.seg+"&ts"+r+"="+i.ts+"&d"+r+"="+i.d,r++}return e+=n,this.addLongPollTag_(e,this.currentSerial),!0}return!1},t.prototype.enqueueSegment=function(t,e,n){this.pendingSegs.push({seg:t,ts:e,d:n}),this.alive&&this.newRequest_()},t.prototype.addLongPollTag_=function(t,e){var n=this;this.outstandingRequests.add(e,1);var r=function(){n.outstandingRequests.remove(e),n.newRequest_()},i=setTimeout(r,Math.floor(25e3));this.addTag(t,function(){clearTimeout(i),r()})},t.prototype.addTag=function(t,e){var n=this;a.isNodeSdk()?this.doNodeLongPoll(t,e):setTimeout(function(){try{if(!n.sendNewPolls)return;var r=n.myIFrame.doc.createElement("script");r.type="text/javascript",r.async=!0,r.src=t,r.onload=r.onreadystatechange=function(){var t=r.readyState;t&&"loaded"!==t&&"complete"!==t||(r.onload=r.onreadystatechange=null,r.parentNode&&r.parentNode.removeChild(r),e())},r.onerror=function(){E("Long-poll script failed to load: "+t),n.sendNewPolls=!1,n.close()},n.myIFrame.doc.body.appendChild(r)}catch(t){}},Math.floor(1))},t}(),Ye=null;"undefined"!=typeof MozWebSocket?Ye=MozWebSocket:"undefined"!=typeof WebSocket&&(Ye=WebSocket);var Ge=function(){function t(e,n,r,i){this.connId=e,this.keepaliveTimer=null,this.frames=null,this.totalFrames=0,this.bytesSent=0,this.bytesReceived=0,this.log_=S(this.connId),this.stats_=Ne.getCollection(n),this.connURL=t.connectionURL_(n,r,i)}return t.connectionURL_=function(t,e,n){var r={v:"5"};return!a.isNodeSdk()&&"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(r.r="f"),e&&(r.s=e),n&&(r.ls=n),t.connectionURL("websocket",r)},t.prototype.open=function(t,e){var n=this;this.onDisconnect=e,this.onMessage=t,this.log_("Websocket connecting to "+this.connURL),this.everConnected_=!1,p.set("previous_websocket_failure",!0);try{if(a.isNodeSdk()){var i=a.CONSTANTS.NODE_ADMIN?"AdminNode":"Node",o={headers:{"User-Agent":"Firebase/5/"+c.SDK_VERSION+"/"+r.platform+"/"+i}},s=r.env,u=0==this.connURL.indexOf("wss://")?s.HTTPS_PROXY||s.https_proxy:s.HTTP_PROXY||s.http_proxy;u&&(o.proxy={origin:u}),this.mySock=new Ye(this.connURL,[],o)}else this.mySock=new Ye(this.connURL)}catch(t){this.log_("Error instantiating WebSocket.");var l=t.message||t.data;return l&&this.log_(l),void this.onClosed_()}this.mySock.onopen=function(){n.log_("Websocket connected."),n.everConnected_=!0},this.mySock.onclose=function(){n.log_("Websocket connection was disconnected."),n.mySock=null,n.onClosed_()},this.mySock.onmessage=function(t){n.handleIncomingFrame(t)},this.mySock.onerror=function(t){n.log_("WebSocket error.  Closing connection.");var e=t.message||t.data;e&&n.log_(e),n.onClosed_()}},t.prototype.start=function(){},t.forceDisallow=function(){t.forceDisallow_=!0},t.isAvailable=function(){var e=!1;if("undefined"!=typeof navigator&&navigator.userAgent){var n=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);n&&n.length>1&&parseFloat(n[1])<4.4&&(e=!0)}return!e&&null!==Ye&&!t.forceDisallow_},t.previouslyFailed=function(){return p.isInMemoryStorage||!0===p.get("previous_websocket_failure")},t.prototype.markConnectionHealthy=function(){p.remove("previous_websocket_failure")},t.prototype.appendFrame_=function(t){if(this.frames.push(t),this.frames.length==this.totalFrames){var e=this.frames.join("");this.frames=null;var n=a.jsonEval(e);this.onMessage(n)}},t.prototype.handleNewFrameCount_=function(t){this.totalFrames=t,this.frames=[]},t.prototype.extractFrameCount_=function(t){if(a.assert(null===this.frames,"We already have a frame buffer"),t.length<=6){var e=Number(t);if(!isNaN(e))return this.handleNewFrameCount_(e),null}return this.handleNewFrameCount_(1),t},t.prototype.handleIncomingFrame=function(t){if(null!==this.mySock){var e=t.data;if(this.bytesReceived+=e.length,this.stats_.incrementCounter("bytes_received",e.length),this.resetKeepAlive(),null!==this.frames)this.appendFrame_(e);else{var n=this.extractFrameCount_(e);null!==n&&this.appendFrame_(n)}}},t.prototype.send=function(t){this.resetKeepAlive();var e=a.stringify(t);this.bytesSent+=e.length,this.stats_.incrementCounter("bytes_sent",e.length);var n=D(e,16384);n.length>1&&this.sendString_(String(n.length));for(var r=0;r<n.length;r++)this.sendString_(n[r])},t.prototype.shutdown_=function(){this.isClosed_=!0,this.keepaliveTimer&&(clearInterval(this.keepaliveTimer),this.keepaliveTimer=null),this.mySock&&(this.mySock.close(),this.mySock=null)},t.prototype.onClosed_=function(){this.isClosed_||(this.log_("WebSocket is closing itself"),this.shutdown_(),this.onDisconnect&&(this.onDisconnect(this.everConnected_),this.onDisconnect=null))},t.prototype.close=function(){this.isClosed_||(this.log_("WebSocket is being closed"),this.shutdown_())},t.prototype.resetKeepAlive=function(){var t=this;clearInterval(this.keepaliveTimer),this.keepaliveTimer=setInterval(function(){t.mySock&&t.sendString_("0"),t.resetKeepAlive()},Math.floor(45e3))},t.prototype.sendString_=function(t){try{this.mySock.send(t)}catch(t){this.log_("Exception thrown from WebSocket.send():",t.message||t.data,"Closing connection."),setTimeout(this.onClosed_.bind(this),0)}},t.responsesRequiredToBeHealthy=2,t.healthyTimeout=3e4,t}(),Ke=function(){function t(t){this.initTransports_(t)}return Object.defineProperty(t,"ALL_TRANSPORTS",{get:function(){return[Qe,Ge]},enumerable:!0,configurable:!0}),t.prototype.initTransports_=function(e){var n=Ge&&Ge.isAvailable(),r=n&&!Ge.previouslyFailed();if(e.webSocketOnly&&(n||T("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),r=!0),r)this.transports_=[Ge];else{var i=this.transports_=[];F(t.ALL_TRANSPORTS,function(t,e){e&&e.isAvailable()&&i.push(e)})}},t.prototype.initialTransport=function(){if(this.transports_.length>0)return this.transports_[0];throw new Error("No transports available")},t.prototype.upgradeTransport=function(){return this.transports_.length>1?this.transports_[1]:null},t}(),Xe=function(){function t(t,e,n,r,i,o,a){this.id=t,this.repoInfo_=e,this.onMessage_=n,this.onReady_=r,this.onDisconnect_=i,this.onKill_=o,this.lastSessionId=a,this.connectionCount=0,this.pendingDataMessages=[],this.state_=0,this.log_=S("c:"+this.id+":"),this.transportManager_=new Ke(e),this.log_("Connection created"),this.start_()}return t.prototype.start_=function(){var t=this,e=this.transportManager_.initialTransport();this.conn_=new e(this.nextTransportId_(),this.repoInfo_,void 0,this.lastSessionId),this.primaryResponsesRequired_=e.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.conn_),r=this.disconnReceiver_(this.conn_);this.tx_=this.conn_,this.rx_=this.conn_,this.secondaryConn_=null,this.isHealthy_=!1,setTimeout(function(){t.conn_&&t.conn_.open(n,r)},Math.floor(0));var i=e.healthyTimeout||0;i>0&&(this.healthyTimeout_=U(function(){t.healthyTimeout_=null,t.isHealthy_||(t.conn_&&t.conn_.bytesReceived>102400?(t.log_("Connection exceeded healthy timeout but has received "+t.conn_.bytesReceived+" bytes.  Marking connection healthy."),t.isHealthy_=!0,t.conn_.markConnectionHealthy()):t.conn_&&t.conn_.bytesSent>10240?t.log_("Connection exceeded healthy timeout but has sent "+t.conn_.bytesSent+" bytes.  Leaving connection alive."):(t.log_("Closing unhealthy connection after timeout."),t.close()))},Math.floor(i)))},t.prototype.nextTransportId_=function(){return"c:"+this.id+":"+this.connectionCount++},t.prototype.disconnReceiver_=function(t){var e=this;return function(n){t===e.conn_?e.onConnectionLost_(n):t===e.secondaryConn_?(e.log_("Secondary connection lost."),e.onSecondaryConnectionLost_()):e.log_("closing an old connection")}},t.prototype.connReceiver_=function(t){var e=this;return function(n){2!=e.state_&&(t===e.rx_?e.onPrimaryMessageReceived_(n):t===e.secondaryConn_?e.onSecondaryMessageReceived_(n):e.log_("message on old connection"))}},t.prototype.sendRequest=function(t){var e={t:"d",d:t};this.sendData_(e)},t.prototype.tryCleanupConnection=function(){this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_&&(this.log_("cleaning up and promoting a connection: "+this.secondaryConn_.connId),this.conn_=this.secondaryConn_,this.secondaryConn_=null)},t.prototype.onSecondaryControl_=function(t){if("t"in t){var e=t.t;"a"===e?this.upgradeIfSecondaryHealthy_():"r"===e?(this.log_("Got a reset on secondary, closing it"),this.secondaryConn_.close(),this.tx_!==this.secondaryConn_&&this.rx_!==this.secondaryConn_||this.close()):"o"===e&&(this.log_("got pong on secondary."),this.secondaryResponsesRequired_--,this.upgradeIfSecondaryHealthy_())}},t.prototype.onSecondaryMessageReceived_=function(t){var e=N("t",t),n=N("d",t);if("c"==e)this.onSecondaryControl_(n);else{if("d"!=e)throw new Error("Unknown protocol layer: "+e);this.pendingDataMessages.push(n)}},t.prototype.upgradeIfSecondaryHealthy_=function(){this.secondaryResponsesRequired_<=0?(this.log_("Secondary connection is healthy."),this.isHealthy_=!0,this.secondaryConn_.markConnectionHealthy(),this.proceedWithUpgrade_()):(this.log_("sending ping on secondary."),this.secondaryConn_.send({t:"c",d:{t:"p",d:{}}}))},t.prototype.proceedWithUpgrade_=function(){this.secondaryConn_.start(),this.log_("sending client ack on secondary"),this.secondaryConn_.send({t:"c",d:{t:"a",d:{}}}),this.log_("Ending transmission on primary"),this.conn_.send({t:"c",d:{t:"n",d:{}}}),this.tx_=this.secondaryConn_,this.tryCleanupConnection()},t.prototype.onPrimaryMessageReceived_=function(t){var e=N("t",t),n=N("d",t);"c"==e?this.onControl_(n):"d"==e&&this.onDataMessage_(n)},t.prototype.onDataMessage_=function(t){this.onPrimaryResponse_(),this.onMessage_(t)},t.prototype.onPrimaryResponse_=function(){this.isHealthy_||(this.primaryResponsesRequired_--,this.primaryResponsesRequired_<=0&&(this.log_("Primary connection is healthy."),this.isHealthy_=!0,this.conn_.markConnectionHealthy()))},t.prototype.onControl_=function(t){var e=N("t",t);if("d"in t){var n=t.d;if("h"===e)this.onHandshake_(n);else if("n"===e){this.log_("recvd end transmission on primary"),this.rx_=this.secondaryConn_;for(var r=0;r<this.pendingDataMessages.length;++r)this.onDataMessage_(this.pendingDataMessages[r]);this.pendingDataMessages=[],this.tryCleanupConnection()}else"s"===e?this.onConnectionShutdown_(n):"r"===e?this.onReset_(n):"e"===e?C("Server Error: "+n):"o"===e?(this.log_("got pong on primary."),this.onPrimaryResponse_(),this.sendPingOnPrimaryIfNecessary_()):C("Unknown control packet command: "+e)}},t.prototype.onHandshake_=function(t){var e=t.ts,n=t.v,r=t.h;this.sessionId=t.s,this.repoInfo_.updateHost(r),0==this.state_&&(this.conn_.start(),this.onConnectionEstablished_(this.conn_,e),"5"!==n&&T("Protocol version mismatch detected"),this.tryStartUpgrade_())},t.prototype.tryStartUpgrade_=function(){var t=this.transportManager_.upgradeTransport();t&&this.startUpgrade_(t)},t.prototype.startUpgrade_=function(t){var e=this;this.secondaryConn_=new t(this.nextTransportId_(),this.repoInfo_,this.sessionId),this.secondaryResponsesRequired_=t.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.secondaryConn_),r=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(n,r),U(function(){e.secondaryConn_&&(e.log_("Timed out trying to upgrade."),e.secondaryConn_.close())},Math.floor(6e4))},t.prototype.onReset_=function(t){this.log_("Reset packet received.  New host: "+t),this.repoInfo_.updateHost(t),1===this.state_?this.close():(this.closeConnections_(),this.start_())},t.prototype.onConnectionEstablished_=function(t,e){var n=this;this.log_("Realtime connection established."),this.conn_=t,this.state_=1,this.onReady_&&(this.onReady_(e,this.sessionId),this.onReady_=null),0===this.primaryResponsesRequired_?(this.log_("Primary connection is healthy."),this.isHealthy_=!0):U(function(){n.sendPingOnPrimaryIfNecessary_()},Math.floor(5e3))},t.prototype.sendPingOnPrimaryIfNecessary_=function(){this.isHealthy_||1!==this.state_||(this.log_("sending ping on primary."),this.sendData_({t:"c",d:{t:"p",d:{}}}))},t.prototype.onSecondaryConnectionLost_=function(){var t=this.secondaryConn_;this.secondaryConn_=null,this.tx_!==t&&this.rx_!==t||this.close()},t.prototype.onConnectionLost_=function(t){this.conn_=null,t||0!==this.state_?1===this.state_&&this.log_("Realtime connection lost."):(this.log_("Realtime connection failed."),this.repoInfo_.isCacheableHost()&&(p.remove("host:"+this.repoInfo_.host),this.repoInfo_.internalHost=this.repoInfo_.host)),this.close()},t.prototype.onConnectionShutdown_=function(t){this.log_("Connection shutdown command received. Shutting down..."),this.onKill_&&(this.onKill_(t),this.onKill_=null),this.onDisconnect_=null,this.close()},t.prototype.sendData_=function(t){if(1!==this.state_)throw"Connection is not connected";this.tx_.send(t)},t.prototype.close=function(){2!==this.state_&&(this.log_("Closing realtime connection."),this.state_=2,this.closeConnections_(),this.onDisconnect_&&(this.onDisconnect_(),this.onDisconnect_=null))},t.prototype.closeConnections_=function(){this.log_("Shutting down all connections"),this.conn_&&(this.conn_.close(),this.conn_=null),this.secondaryConn_&&(this.secondaryConn_.close(),this.secondaryConn_=null),this.healthyTimeout_&&(clearTimeout(this.healthyTimeout_),this.healthyTimeout_=null)},t}(),$e=function(){function t(){}return t.prototype.put=function(t,e,n,r){},t.prototype.merge=function(t,e,n,r){},t.prototype.refreshAuthToken=function(t){},t.prototype.onDisconnectPut=function(t,e,n){},t.prototype.onDisconnectMerge=function(t,e,n){},t.prototype.onDisconnectCancel=function(t,e){},t.prototype.reportStats=function(t){},t}(),Je=1e3,Ze=3e5,tn=function(t){function e(n,r,i,o,s,u){var c=t.call(this)||this;if(c.repoInfo_=n,c.onDataUpdate_=r,c.onConnectStatus_=i,c.onServerInfoUpdate_=o,c.authTokenProvider_=s,c.authOverride_=u,c.id=e.nextPersistentConnectionId_++,c.log_=S("p:"+c.id+":"),c.interruptReasons_={},c.listens_={},c.outstandingPuts_=[],c.outstandingPutCount_=0,c.onDisconnectRequestQueue_=[],c.connected_=!1,c.reconnectDelay_=Je,c.maxReconnectDelay_=Ze,c.securityDebugCallback_=null,c.lastSessionId=null,c.establishConnectionTimer_=null,c.visible_=!1,c.requestCBHash_={},c.requestNumber_=0,c.realtime_=null,c.authToken_=null,c.forceTokenRefresh_=!1,c.invalidAuthTokenCount_=0,c.firstConnection_=!0,c.lastConnectionAttemptTime_=null,c.lastConnectionEstablishedTime_=null,u&&!a.isNodeSdk())throw new Error("Auth override specified in options, but not supported on non Node.js platforms");return c.scheduleConnect_(0),We.getInstance().on("visible",c.onVisible_,c),-1===n.host.indexOf("fblocal")&&Ue.getInstance().on("online",c.onOnline_,c),c}return u.__extends(e,t),e.prototype.sendRequest=function(t,e,n){var r=++this.requestNumber_,i={r:r,a:t,b:e};this.log_(a.stringify(i)),a.assert(this.connected_,"sendRequest call when we're not connected not allowed."),this.realtime_.sendRequest(i),n&&(this.requestCBHash_[r]=n)},e.prototype.listen=function(t,e,n,r){var i=t.queryIdentifier(),o=t.path.toString();this.log_("Listen called for "+o+" "+i),this.listens_[o]=this.listens_[o]||{},a.assert(t.getQueryParams().isDefault()||!t.getQueryParams().loadsAllData(),"listen() called for non-default but complete query"),a.assert(!this.listens_[o][i],"listen() called twice for same path/queryId.");var s={onComplete:r,hashFn:e,query:t,tag:n};this.listens_[o][i]=s,this.connected_&&this.sendListen_(s)},e.prototype.sendListen_=function(t){var n=this,r=t.query,i=r.path.toString(),o=r.queryIdentifier();this.log_("Listen on "+i+" for "+o);var a={p:i};t.tag&&(a.q=r.queryObject(),a.t=t.tag),a.h=t.hashFn(),this.sendRequest("q",a,function(a){var s=a.d,u=a.s;e.warnOnListenWarnings_(s,r),(n.listens_[i]&&n.listens_[i][o])===t&&(n.log_("listen response",a),"ok"!==u&&n.removeListen_(i,o),t.onComplete&&t.onComplete(u,s))})},e.warnOnListenWarnings_=function(t,e){if(t&&"object"==typeof t&&a.contains(t,"w")){var n=a.safeGet(t,"w");if(Array.isArray(n)&&~n.indexOf("no_index")){var r='".indexOn": "'+e.getQueryParams().getIndex().toString()+'"',i=e.path.toString();T("Using an unspecified index. Your data will be downloaded and filtered on the client. Consider adding "+r+" at "+i+" to your security rules for better performance.")}}},e.prototype.refreshAuthToken=function(t){this.authToken_=t,this.log_("Auth token refreshed"),this.authToken_?this.tryAuth():this.connected_&&this.sendRequest("unauth",{},function(){}),this.reduceReconnectDelayIfAdminCredential_(t)},e.prototype.reduceReconnectDelayIfAdminCredential_=function(t){(t&&40===t.length||a.isAdmin(t))&&(this.log_("Admin auth credential detected.  Reducing max reconnect time."),this.maxReconnectDelay_=3e4)},e.prototype.tryAuth=function(){var t=this;if(this.connected_&&this.authToken_){var e=this.authToken_,n=a.isValidFormat(e)?"auth":"gauth",r={cred:e};null===this.authOverride_?r.noauth=!0:"object"==typeof this.authOverride_&&(r.authvar=this.authOverride_),this.sendRequest(n,r,function(n){var r=n.s,i=n.d||"error";t.authToken_===e&&("ok"===r?t.invalidAuthTokenCount_=0:t.onAuthRevoked_(r,i))})}},e.prototype.unlisten=function(t,e){var n=t.path.toString(),r=t.queryIdentifier();this.log_("Unlisten called for "+n+" "+r),a.assert(t.getQueryParams().isDefault()||!t.getQueryParams().loadsAllData(),"unlisten() called for non-default but complete query"),this.removeListen_(n,r)&&this.connected_&&this.sendUnlisten_(n,r,t.queryObject(),e)},e.prototype.sendUnlisten_=function(t,e,n,r){this.log_("Unlisten on "+t+" for "+e);var i={p:t};r&&(i.q=n,i.t=r),this.sendRequest("n",i)},e.prototype.onDisconnectPut=function(t,e,n){this.connected_?this.sendOnDisconnect_("o",t,e,n):this.onDisconnectRequestQueue_.push({pathString:t,action:"o",data:e,onComplete:n})},e.prototype.onDisconnectMerge=function(t,e,n){this.connected_?this.sendOnDisconnect_("om",t,e,n):this.onDisconnectRequestQueue_.push({pathString:t,action:"om",data:e,onComplete:n})},e.prototype.onDisconnectCancel=function(t,e){this.connected_?this.sendOnDisconnect_("oc",t,null,e):this.onDisconnectRequestQueue_.push({pathString:t,action:"oc",data:null,onComplete:e})},e.prototype.sendOnDisconnect_=function(t,e,n,r){var i={p:e,d:n};this.log_("onDisconnect "+t,i),this.sendRequest(t,i,function(t){r&&setTimeout(function(){r(t.s,t.d)},Math.floor(0))})},e.prototype.put=function(t,e,n,r){this.putInternal("p",t,e,n,r)},e.prototype.merge=function(t,e,n,r){this.putInternal("m",t,e,n,r)},e.prototype.putInternal=function(t,e,n,r,i){var o={p:e,d:n};void 0!==i&&(o.h=i),this.outstandingPuts_.push({action:t,request:o,onComplete:r}),this.outstandingPutCount_++;var a=this.outstandingPuts_.length-1;this.connected_?this.sendPut_(a):this.log_("Buffering put: "+e)},e.prototype.sendPut_=function(t){var e=this,n=this.outstandingPuts_[t].action,r=this.outstandingPuts_[t].request,i=this.outstandingPuts_[t].onComplete;this.outstandingPuts_[t].queued=this.connected_,this.sendRequest(n,r,function(r){e.log_(n+" response",r),delete e.outstandingPuts_[t],e.outstandingPutCount_--,0===e.outstandingPutCount_&&(e.outstandingPuts_=[]),i&&i(r.s,r.d)})},e.prototype.reportStats=function(t){var e=this;if(this.connected_){var n={c:t};this.log_("reportStats",n),this.sendRequest("s",n,function(t){if("ok"!==t.s){var n=t.d;e.log_("reportStats","Error sending stats: "+n)}})}},e.prototype.onDataMessage_=function(t){if("r"in t){this.log_("from server: "+a.stringify(t));var e=t.r,n=this.requestCBHash_[e];n&&(delete this.requestCBHash_[e],n(t.b))}else{if("error"in t)throw"A server-side error has occurred: "+t.error;"a"in t&&this.onDataPush_(t.a,t.b)}},e.prototype.onDataPush_=function(t,e){this.log_("handleServerMessage",t,e),"d"===t?this.onDataUpdate_(e.p,e.d,!1,e.t):"m"===t?this.onDataUpdate_(e.p,e.d,!0,e.t):"c"===t?this.onListenRevoked_(e.p,e.q):"ac"===t?this.onAuthRevoked_(e.s,e.d):"sd"===t?this.onSecurityDebugPacket_(e):C("Unrecognized action received from server: "+a.stringify(t)+"\nAre you using the latest client?")},e.prototype.onReady_=function(t,e){this.log_("connection ready"),this.connected_=!0,this.lastConnectionEstablishedTime_=(new Date).getTime(),this.handleTimestamp_(t),this.lastSessionId=e,this.firstConnection_&&this.sendConnectStats_(),this.restoreState_(),this.firstConnection_=!1,this.onConnectStatus_(!0)},e.prototype.scheduleConnect_=function(t){var e=this;a.assert(!this.realtime_,"Scheduling a connect when we're already connected/ing?"),this.establishConnectionTimer_&&clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=setTimeout(function(){e.establishConnectionTimer_=null,e.establishConnection_()},Math.floor(t))},e.prototype.onVisible_=function(t){t&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_&&(this.log_("Window became visible.  Reducing delay."),this.reconnectDelay_=Je,this.realtime_||this.scheduleConnect_(0)),this.visible_=t},e.prototype.onOnline_=function(t){t?(this.log_("Browser went online."),this.reconnectDelay_=Je,this.realtime_||this.scheduleConnect_(0)):(this.log_("Browser went offline.  Killing connection."),this.realtime_&&this.realtime_.close())},e.prototype.onRealtimeDisconnect_=function(){if(this.log_("data client disconnected"),this.connected_=!1,this.realtime_=null,this.cancelSentTransactions_(),this.requestCBHash_={},this.shouldReconnect_()){if(this.visible_){if(this.lastConnectionEstablishedTime_){(new Date).getTime()-this.lastConnectionEstablishedTime_>3e4&&(this.reconnectDelay_=Je),this.lastConnectionEstablishedTime_=null}}else this.log_("Window isn't visible.  Delaying reconnect."),this.reconnectDelay_=this.maxReconnectDelay_,this.lastConnectionAttemptTime_=(new Date).getTime();var t=(new Date).getTime()-this.lastConnectionAttemptTime_,e=Math.max(0,this.reconnectDelay_-t);e=Math.random()*e,this.log_("Trying to reconnect in "+e+"ms"),this.scheduleConnect_(e),this.reconnectDelay_=Math.min(this.maxReconnectDelay_,1.3*this.reconnectDelay_)}this.onConnectStatus_(!1)},e.prototype.establishConnection_=function(){if(this.shouldReconnect_()){this.log_("Making a connection attempt"),this.lastConnectionAttemptTime_=(new Date).getTime(),this.lastConnectionEstablishedTime_=null;var t=this.onDataMessage_.bind(this),n=this.onReady_.bind(this),r=this.onRealtimeDisconnect_.bind(this),i=this.id+":"+e.nextConnectionId_++,o=this,s=this.lastSessionId,u=!1,c=null,l=function(){c?c.close():(u=!0,r())};this.realtime_={close:l,sendRequest:function(t){a.assert(c,"sendRequest call when we're not connected not allowed."),c.sendRequest(t)}};var h=this.forceTokenRefresh_;this.forceTokenRefresh_=!1,this.authTokenProvider_.getToken(h).then(function(e){u?E("getToken() completed but was canceled"):(E("getToken() completed. Creating connection."),o.authToken_=e&&e.accessToken,c=new Xe(i,o.repoInfo_,t,n,r,function(t){T(t+" ("+o.repoInfo_.toString()+")"),o.interrupt("server_kill")},s))}).then(null,function(t){o.log_("Failed to get token: "+t),u||(a.CONSTANTS.NODE_ADMIN&&T(t),l())})}},e.prototype.interrupt=function(t){E("Interrupting connection for reason: "+t),this.interruptReasons_[t]=!0,this.realtime_?this.realtime_.close():(this.establishConnectionTimer_&&(clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=null),this.connected_&&this.onRealtimeDisconnect_())},e.prototype.resume=function(t){E("Resuming connection for reason: "+t),delete this.interruptReasons_[t],a.isEmpty(this.interruptReasons_)&&(this.reconnectDelay_=Je,this.realtime_||this.scheduleConnect_(0))},e.prototype.handleTimestamp_=function(t){var e=t-(new Date).getTime();this.onServerInfoUpdate_({serverTimeOffset:e})},e.prototype.cancelSentTransactions_=function(){for(var t=0;t<this.outstandingPuts_.length;t++){var e=this.outstandingPuts_[t];e&&"h"in e.request&&e.queued&&(e.onComplete&&e.onComplete("disconnect"),delete this.outstandingPuts_[t],this.outstandingPutCount_--)}0===this.outstandingPutCount_&&(this.outstandingPuts_=[])},e.prototype.onListenRevoked_=function(t,e){var n;n=e?e.map(function(t){return R(t)}).join("$"):"default";var r=this.removeListen_(t,n);r&&r.onComplete&&r.onComplete("permission_denied")},e.prototype.removeListen_=function(t,e){var n,r=new B(t).toString();return void 0!==this.listens_[r]?(n=this.listens_[r][e],delete this.listens_[r][e],0===a.getCount(this.listens_[r])&&delete this.listens_[r]):n=void 0,n},e.prototype.onAuthRevoked_=function(t,e){E("Auth token revoked: "+t+"/"+e),this.authToken_=null,this.forceTokenRefresh_=!0,this.realtime_.close(),"invalid_token"!==t&&"permission_denied"!==t||(this.invalidAuthTokenCount_++,this.invalidAuthTokenCount_>=3&&(this.reconnectDelay_=3e4,this.authTokenProvider_.notifyForInvalidToken()))},e.prototype.onSecurityDebugPacket_=function(t){this.securityDebugCallback_?this.securityDebugCallback_(t):"msg"in t&&console.log("FIREBASE: "+t.msg.replace("\n","\nFIREBASE: "))},e.prototype.restoreState_=function(){var t=this;this.tryAuth(),a.forEach(this.listens_,function(e,n){a.forEach(n,function(e,n){t.sendListen_(n)})});for(var e=0;e<this.outstandingPuts_.length;e++)this.outstandingPuts_[e]&&this.sendPut_(e);for(;this.onDisconnectRequestQueue_.length;){var n=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(n.action,n.pathString,n.data,n.onComplete)}},e.prototype.sendConnectStats_=function(){var t={},e="js";a.CONSTANTS.NODE_ADMIN?e="admin_node":a.CONSTANTS.NODE_CLIENT&&(e="node"),t["sdk."+e+"."+c.SDK_VERSION.replace(/\./g,"-")]=1,a.isMobileCordova()?t["framework.cordova"]=1:a.isReactNative()&&(t["framework.reactnative"]=1),this.reportStats(t)},e.prototype.shouldReconnect_=function(){var t=Ue.getInstance().currentlyOnline();return a.isEmpty(this.interruptReasons_)&&t},e.nextPersistentConnectionId_=0,e.nextConnectionId_=0,e}($e),en=function(t){function e(e,n,r){var i=t.call(this)||this;return i.repoInfo_=e,i.onDataUpdate_=n,i.authTokenProvider_=r,i.log_=S("p:rest:"),i.listens_={},i}return u.__extends(e,t),e.prototype.reportStats=function(t){throw new Error("Method not implemented.")},e.getListenId_=function(t,e){return void 0!==e?"tag$"+e:(a.assert(t.getQueryParams().isDefault(),"should have a tag if it's not a default query."),t.path.toString())},e.prototype.listen=function(t,n,r,i){var o=this,s=t.path.toString();this.log_("Listen called for "+s+" "+t.queryIdentifier());var u=e.getListenId_(t,r),c={};this.listens_[u]=c;var l=t.getQueryParams().toRestQueryStringParameters();this.restRequest_(s+".json",l,function(t,e){var n=e;(404===t&&(n=null,t=null),null===t&&o.onDataUpdate_(s,n,!1,r),a.safeGet(o.listens_,u)===c)&&i(t?401==t?"permission_denied":"rest_error:"+t:"ok",null)})},e.prototype.unlisten=function(t,n){var r=e.getListenId_(t,n);delete this.listens_[r]},e.prototype.refreshAuthToken=function(t){},e.prototype.restRequest_=function(t,e,n){var r=this;void 0===e&&(e={}),e.format="export",this.authTokenProvider_.getToken(!1).then(function(i){var o=i&&i.accessToken;o&&(e.auth=o);var s=(r.repoInfo_.secure?"https://":"http://")+r.repoInfo_.host+t+"?ns="+r.repoInfo_.namespace+a.querystring(e);r.log_("Sending REST request for "+s);var u=new XMLHttpRequest;u.onreadystatechange=function(){if(n&&4===u.readyState){r.log_("REST Response for "+s+" received. status:",u.status,"response:",u.responseText);var t=null;if(u.status>=200&&u.status<300){try{t=a.jsonEval(u.responseText)}catch(t){T("Failed to parse JSON response for "+s+": "+u.responseText)}n(null,t)}else 401!==u.status&&404!==u.status&&T("Got unsuccessful REST response for "+s+" Status: "+u.status),n(u.status);n=null}},u.open("GET",s,!0),u.send()})},e}($e),nn=function(){function t(t,e,n){var r=this;this.repoInfo_=t,this.app=n,this.dataUpdateCount=0,this.statsListener_=null,this.eventQueue_=new Le,this.nextWriteId_=1,this.interceptServerDataCallback_=null,this.onDisconnect_=new ee,this.persistentConnection_=null;var i=new Ie(n);if(this.stats_=Ne.getCollection(t),e||W())this.server_=new en(this.repoInfo_,this.onDataUpdate_.bind(this),i),setTimeout(this.onConnectStatus_.bind(this,!0),0);else{var o=n.options.databaseAuthVariableOverride;if(null!=o){if("object"!=typeof o)throw new Error("Only objects are supported for option databaseAuthVariableOverride");try{a.stringify(o)}catch(t){throw new Error("Invalid authOverride provided: "+t)}}this.persistentConnection_=new tn(this.repoInfo_,this.onDataUpdate_.bind(this),this.onConnectStatus_.bind(this),this.onServerInfoUpdate_.bind(this),i,o),this.server_=this.persistentConnection_}i.addTokenChangeListener(function(t){r.server_.refreshAuthToken(t)}),this.statsReporter_=Ne.getOrCreateReporter(t,function(){return new Me(r.stats_,r.server_)}),this.transactions_init_(),this.infoData_=new Oe,this.infoSyncTree_=new Pe({startListening:function(t,e,n,i){var o=[],a=r.infoData_.getNode(t.path);return a.isEmpty()||(o=r.infoSyncTree_.applyServerOverwrite(t.path,a),setTimeout(function(){i("ok")},0)),o},stopListening:function(){}}),this.updateInfo_("connected",!1),this.serverSyncTree_=new Pe({startListening:function(t,e,n,i){return r.server_.listen(t,n,e,function(e,n){var o=i(e,n);r.eventQueue_.raiseEventsForChangedPath(t.path,o)}),[]},stopListening:function(t,e){r.server_.unlisten(t,e)}})}return t.prototype.toString=function(){return(this.repoInfo_.secure?"https://":"http://")+this.repoInfo_.host},t.prototype.name=function(){return this.repoInfo_.namespace},t.prototype.serverTime=function(){var t=this.infoData_.getNode(new B(".info/serverTimeOffset")).val()||0;return(new Date).getTime()+t},t.prototype.generateServerValues=function(){return(t=(t={timestamp:this.serverTime()})||{}).timestamp=t.timestamp||(new Date).getTime(),t;var t},t.prototype.onDataUpdate_=function(t,e,n,r){this.dataUpdateCount++;var i=new B(t);e=this.interceptServerDataCallback_?this.interceptServerDataCallback_(t,e):e;var o=[];if(r)if(n){var s=a.map(e,function(t){return Ht(t)});o=this.serverSyncTree_.applyTaggedQueryMerge(i,s,r)}else{var u=Ht(e);o=this.serverSyncTree_.applyTaggedQueryOverwrite(i,u,r)}else if(n){var c=a.map(e,function(t){return Ht(t)});o=this.serverSyncTree_.applyServerMerge(i,c)}else{var l=Ht(e);o=this.serverSyncTree_.applyServerOverwrite(i,l)}var h=i;o.length>0&&(h=this.rerunTransactions_(i)),this.eventQueue_.raiseEventsForChangedPath(h,o)},t.prototype.interceptServerData_=function(t){this.interceptServerDataCallback_=t},t.prototype.onConnectStatus_=function(t){this.updateInfo_("connected",t),!1===t&&this.runOnDisconnectEvents_()},t.prototype.onServerInfoUpdate_=function(t){var e=this;F(t,function(t,n){e.updateInfo_(n,t)})},t.prototype.updateInfo_=function(t,e){var n=new B("/.info/"+t),r=Ht(e);this.infoData_.updateSnapshot(n,r);var i=this.infoSyncTree_.applyServerOverwrite(n,r);this.eventQueue_.raiseEventsForChangedPath(n,i)},t.prototype.getNextWriteId_=function(){return this.nextWriteId_++},t.prototype.setWithPriority=function(t,e,n,r){var i=this;this.log_("set",{path:t.toString(),value:e,priority:n});var o=this.generateServerValues(),a=Ht(e,n),s=re(a,o),u=this.getNextWriteId_(),c=this.serverSyncTree_.applyUserOverwrite(t,s,u,!0);this.eventQueue_.queueEvents(c),this.server_.put(t.toString(),a.val(!0),function(e,n){var o="ok"===e;o||T("set at "+t+" failed: "+e);var a=i.serverSyncTree_.ackUserWrite(u,!o);i.eventQueue_.raiseEventsForChangedPath(t,a),i.callOnCompleteCallback(r,e,n)});var l=this.abortTransactions_(t);this.rerunTransactions_(l),this.eventQueue_.raiseEventsForChangedPath(l,[])},t.prototype.update=function(t,e,n){var r=this;this.log_("update",{path:t.toString(),value:e});var i=!0,o=this.generateServerValues(),s={};if(a.forEach(e,function(t,e){i=!1;var n=Ht(e);s[t]=re(n,o)}),i)E("update() called with empty data.  Don't do anything."),this.callOnCompleteCallback(n,"ok");else{var u=this.getNextWriteId_(),c=this.serverSyncTree_.applyUserMerge(t,s,u);this.eventQueue_.queueEvents(c),this.server_.merge(t.toString(),e,function(e,i){var o="ok"===e;o||T("update at "+t+" failed: "+e);var a=r.serverSyncTree_.ackUserWrite(u,!o),s=a.length>0?r.rerunTransactions_(t):t;r.eventQueue_.raiseEventsForChangedPath(s,a),r.callOnCompleteCallback(n,e,i)}),a.forEach(e,function(e){var n=r.abortTransactions_(t.child(e));r.rerunTransactions_(n)}),this.eventQueue_.raiseEventsForChangedPath(t,[])}},t.prototype.runOnDisconnectEvents_=function(){var t=this;this.log_("onDisconnectEvents");var e=this.generateServerValues(),n=function(t,e){var n=new ee;return t.forEachTree(new B(""),function(t,r){n.remember(t,re(r,e))}),n}(this.onDisconnect_,e),r=[];n.forEachTree(B.Empty,function(e,n){r=r.concat(t.serverSyncTree_.applyServerOverwrite(e,n));var i=t.abortTransactions_(e);t.rerunTransactions_(i)}),this.onDisconnect_=new ee,this.eventQueue_.raiseEventsForChangedPath(B.Empty,r)},t.prototype.onDisconnectCancel=function(t,e){var n=this;this.server_.onDisconnectCancel(t.toString(),function(r,i){"ok"===r&&n.onDisconnect_.forget(t),n.callOnCompleteCallback(e,r,i)})},t.prototype.onDisconnectSet=function(t,e,n){var r=this,i=Ht(e);this.server_.onDisconnectPut(t.toString(),i.val(!0),function(e,o){"ok"===e&&r.onDisconnect_.remember(t,i),r.callOnCompleteCallback(n,e,o)})},t.prototype.onDisconnectSetWithPriority=function(t,e,n,r){var i=this,o=Ht(e,n);this.server_.onDisconnectPut(t.toString(),o.val(!0),function(e,n){"ok"===e&&i.onDisconnect_.remember(t,o),i.callOnCompleteCallback(r,e,n)})},t.prototype.onDisconnectUpdate=function(t,e,n){var r=this;if(a.isEmpty(e))return E("onDisconnect().update() called with empty data.  Don't do anything."),void this.callOnCompleteCallback(n,"ok");this.server_.onDisconnectMerge(t.toString(),e,function(i,o){"ok"===i&&a.forEach(e,function(e,n){var i=Ht(n);r.onDisconnect_.remember(t.child(e),i)}),r.callOnCompleteCallback(n,i,o)})},t.prototype.addEventCallbackForQuery=function(t,e){var n;n=".info"===t.path.getFront()?this.infoSyncTree_.addEventRegistration(t,e):this.serverSyncTree_.addEventRegistration(t,e),this.eventQueue_.raiseEventsAtPath(t.path,n)},t.prototype.removeEventCallbackForQuery=function(t,e){var n;n=".info"===t.path.getFront()?this.infoSyncTree_.removeEventRegistration(t,e):this.serverSyncTree_.removeEventRegistration(t,e),this.eventQueue_.raiseEventsAtPath(t.path,n)},t.prototype.interrupt=function(){this.persistentConnection_&&this.persistentConnection_.interrupt("repo_interrupt")},t.prototype.resume=function(){this.persistentConnection_&&this.persistentConnection_.resume("repo_interrupt")},t.prototype.stats=function(t){if(void 0===t&&(t=!1),"undefined"!=typeof console){var e;t?(this.statsListener_||(this.statsListener_=new Re(this.stats_)),e=this.statsListener_.get()):e=this.stats_.get();var n=Object.keys(e).reduce(function(t,e){return Math.max(e.length,t)},0);a.forEach(e,function(t,e){for(var r=t.length;r<n+2;r++)t+=" ";console.log(t+e)})}},t.prototype.statsIncrementCounter=function(t){this.stats_.incrementCounter(t),this.statsReporter_.includeStat(t)},t.prototype.log_=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="";this.persistentConnection_&&(n=this.persistentConnection_.id+":"),E.apply(void 0,[n].concat(t))},t.prototype.callOnCompleteCallback=function(t,e,n){t&&q(function(){if("ok"==e)t(null);else{var r=(e||"error").toUpperCase(),i=r;n&&(i+=": "+n);var o=new Error(i);o.code=r,t(o)}})},Object.defineProperty(t.prototype,"database",{get:function(){return this.__database||(this.__database=new pn(this))},enumerable:!0,configurable:!0}),t}(),rn=function(){function t(e){this.indexedFilter_=new ve(e.getIndex()),this.index_=e.getIndex(),this.startPost_=t.getStartPost_(e),this.endPost_=t.getEndPost_(e)}return t.prototype.getStartPost=function(){return this.startPost_},t.prototype.getEndPost=function(){return this.endPost_},t.prototype.matches=function(t){return this.index_.compare(this.getStartPost(),t)<=0&&this.index_.compare(t,this.getEndPost())<=0},t.prototype.updateChild=function(t,e,n,r,i,o){return this.matches(new vt(e,n))||(n=Wt.EMPTY_NODE),this.indexedFilter_.updateChild(t,e,n,r,i,o)},t.prototype.updateFullNode=function(t,e,n){e.isLeafNode()&&(e=Wt.EMPTY_NODE);var r=e.withIndex(this.index_);r=r.updatePriority(Wt.EMPTY_NODE);var i=this;return e.forEachChild(Pt,function(t,e){i.matches(new vt(t,e))||(r=r.updateImmediateChild(t,Wt.EMPTY_NODE))}),this.indexedFilter_.updateFullNode(t,r,n)},t.prototype.updatePriority=function(t,e){return t},t.prototype.filtersNodes=function(){return!0},t.prototype.getIndexedFilter=function(){return this.indexedFilter_},t.prototype.getIndex=function(){return this.index_},t.getStartPost_=function(t){if(t.hasStart()){var e=t.getIndexStartName();return t.getIndex().makePost(t.getIndexStartValue(),e)}return t.getIndex().minPost()},t.getEndPost_=function(t){if(t.hasEnd()){var e=t.getIndexEndName();return t.getIndex().makePost(t.getIndexEndValue(),e)}return t.getIndex().maxPost()},t}(),on=function(){function t(t){this.rangedFilter_=new rn(t),this.index_=t.getIndex(),this.limit_=t.getLimit(),this.reverse_=!t.isViewFromLeft()}return t.prototype.updateChild=function(t,e,n,r,i,o){return this.rangedFilter_.matches(new vt(e,n))||(n=Wt.EMPTY_NODE),t.getImmediateChild(e).equals(n)?t:t.numChildren()<this.limit_?this.rangedFilter_.getIndexedFilter().updateChild(t,e,n,r,i,o):this.fullLimitUpdateChild_(t,e,n,i,o)},t.prototype.updateFullNode=function(t,e,n){var r;if(e.isLeafNode()||e.isEmpty())r=Wt.EMPTY_NODE.withIndex(this.index_);else if(2*this.limit_<e.numChildren()&&e.isIndexed(this.index_)){r=Wt.EMPTY_NODE.withIndex(this.index_);var i=void 0;i=this.reverse_?e.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_):e.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);for(var o=0;i.hasNext()&&o<this.limit_;){var a=i.getNext();if(!(this.reverse_?this.index_.compare(this.rangedFilter_.getStartPost(),a)<=0:this.index_.compare(a,this.rangedFilter_.getEndPost())<=0))break;r=r.updateImmediateChild(a.name,a.node),o++}}else{r=(r=e.withIndex(this.index_)).updatePriority(Wt.EMPTY_NODE);var s=void 0,u=void 0,c=void 0;i=void 0;if(this.reverse_){i=r.getReverseIterator(this.index_),s=this.rangedFilter_.getEndPost(),u=this.rangedFilter_.getStartPost();var l=this.index_.getCompare();c=function(t,e){return l(e,t)}}else i=r.getIterator(this.index_),s=this.rangedFilter_.getStartPost(),u=this.rangedFilter_.getEndPost(),c=this.index_.getCompare();o=0;for(var h=!1;i.hasNext();){a=i.getNext();!h&&c(s,a)<=0&&(h=!0),h&&o<this.limit_&&c(a,u)<=0?o++:r=r.updateImmediateChild(a.name,Wt.EMPTY_NODE)}}return this.rangedFilter_.getIndexedFilter().updateFullNode(t,r,n)},t.prototype.updatePriority=function(t,e){return t},t.prototype.filtersNodes=function(){return!0},t.prototype.getIndexedFilter=function(){return this.rangedFilter_.getIndexedFilter()},t.prototype.getIndex=function(){return this.index_},t.prototype.fullLimitUpdateChild_=function(t,e,n,r,i){var o;if(this.reverse_){var s=this.index_.getCompare();o=function(t,e){return s(e,t)}}else o=this.index_.getCompare();var u=t;a.assert(u.numChildren()==this.limit_,"");var c=new vt(e,n),l=this.reverse_?u.getFirstChild(this.index_):u.getLastChild(this.index_),h=this.rangedFilter_.matches(c);if(u.hasChild(e)){for(var f=u.getImmediateChild(e),p=r.getChildAfterChild(this.index_,l,this.reverse_);null!=p&&(p.name==e||u.hasChild(p.name));)p=r.getChildAfterChild(this.index_,p,this.reverse_);var d=null==p?1:o(p,c);if(h&&!n.isEmpty()&&d>=0)return null!=i&&i.trackChildChange(ye.childChangedChange(e,n,f)),u.updateImmediateChild(e,n);null!=i&&i.trackChildChange(ye.childRemovedChange(e,f));var y=u.updateImmediateChild(e,Wt.EMPTY_NODE);return null!=p&&this.rangedFilter_.matches(p)?(null!=i&&i.trackChildChange(ye.childAddedChange(p.name,p.node)),y.updateImmediateChild(p.name,p.node)):y}return n.isEmpty()?t:h&&o(l,c)>=0?(null!=i&&(i.trackChildChange(ye.childRemovedChange(l.name,l.node)),i.trackChildChange(ye.childAddedChange(e,n))),u.updateImmediateChild(e,n).updateImmediateChild(l.name,Wt.EMPTY_NODE)):t},t}(),an=function(){function t(){this.limitSet_=!1,this.startSet_=!1,this.startNameSet_=!1,this.endSet_=!1,this.endNameSet_=!1,this.limit_=0,this.viewFrom_="",this.indexStartValue_=null,this.indexStartName_="",this.indexEndValue_=null,this.indexEndName_="",this.index_=Pt}return t.prototype.hasStart=function(){return this.startSet_},t.prototype.isViewFromLeft=function(){return""===this.viewFrom_?this.startSet_:this.viewFrom_===t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT},t.prototype.getIndexStartValue=function(){return a.assert(this.startSet_,"Only valid if start has been set"),this.indexStartValue_},t.prototype.getIndexStartName=function(){return a.assert(this.startSet_,"Only valid if start has been set"),this.startNameSet_?this.indexStartName_:P},t.prototype.hasEnd=function(){return this.endSet_},t.prototype.getIndexEndValue=function(){return a.assert(this.endSet_,"Only valid if end has been set"),this.indexEndValue_},t.prototype.getIndexEndName=function(){return a.assert(this.endSet_,"Only valid if end has been set"),this.endNameSet_?this.indexEndName_:O},t.prototype.hasLimit=function(){return this.limitSet_},t.prototype.hasAnchoredLimit=function(){return this.limitSet_&&""!==this.viewFrom_},t.prototype.getLimit=function(){return a.assert(this.limitSet_,"Only valid if limit has been set"),this.limit_},t.prototype.getIndex=function(){return this.index_},t.prototype.copy_=function(){var e=new t;return e.limitSet_=this.limitSet_,e.limit_=this.limit_,e.startSet_=this.startSet_,e.indexStartValue_=this.indexStartValue_,e.startNameSet_=this.startNameSet_,e.indexStartName_=this.indexStartName_,e.endSet_=this.endSet_,e.indexEndValue_=this.indexEndValue_,e.endNameSet_=this.endNameSet_,e.indexEndName_=this.indexEndName_,e.index_=this.index_,e.viewFrom_=this.viewFrom_,e},t.prototype.limit=function(t){var e=this.copy_();return e.limitSet_=!0,e.limit_=t,e.viewFrom_="",e},t.prototype.limitToFirst=function(e){var n=this.copy_();return n.limitSet_=!0,n.limit_=e,n.viewFrom_=t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT,n},t.prototype.limitToLast=function(e){var n=this.copy_();return n.limitSet_=!0,n.limit_=e,n.viewFrom_=t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT,n},t.prototype.startAt=function(t,e){var n=this.copy_();return n.startSet_=!0,void 0===t&&(t=null),n.indexStartValue_=t,null!=e?(n.startNameSet_=!0,n.indexStartName_=e):(n.startNameSet_=!1,n.indexStartName_=""),n},t.prototype.endAt=function(t,e){var n=this.copy_();return n.endSet_=!0,void 0===t&&(t=null),n.indexEndValue_=t,void 0!==e?(n.endNameSet_=!0,n.indexEndName_=e):(n.endNameSet_=!1,n.indexEndName_=""),n},t.prototype.orderBy=function(t){var e=this.copy_();return e.index_=t,e},t.prototype.getQueryObject=function(){var e=t.WIRE_PROTOCOL_CONSTANTS_,n={};if(this.startSet_&&(n[e.INDEX_START_VALUE]=this.indexStartValue_,this.startNameSet_&&(n[e.INDEX_START_NAME]=this.indexStartName_)),this.endSet_&&(n[e.INDEX_END_VALUE]=this.indexEndValue_,this.endNameSet_&&(n[e.INDEX_END_NAME]=this.indexEndName_)),this.limitSet_){n[e.LIMIT]=this.limit_;var r=this.viewFrom_;""===r&&(r=this.isViewFromLeft()?e.VIEW_FROM_LEFT:e.VIEW_FROM_RIGHT),n[e.VIEW_FROM]=r}return this.index_!==Pt&&(n[e.INDEX]=this.index_.toString()),n},t.prototype.loadsAllData=function(){return!(this.startSet_||this.endSet_||this.limitSet_)},t.prototype.isDefault=function(){return this.loadsAllData()&&this.index_==Pt},t.prototype.getNodeFilter=function(){return this.loadsAllData()?new ve(this.getIndex()):this.hasLimit()?new on(this):new rn(this)},t.prototype.toRestQueryStringParameters=function(){var e,n=t.REST_QUERY_CONSTANTS_,r={};return this.isDefault()?r:(this.index_===Pt?e=n.PRIORITY_INDEX:this.index_===zt?e=n.VALUE_INDEX:this.index_===_t?e=n.KEY_INDEX:(a.assert(this.index_ instanceof Yt,"Unrecognized index type!"),e=this.index_.toString()),r[n.ORDER_BY]=a.stringify(e),this.startSet_&&(r[n.START_AT]=a.stringify(this.indexStartValue_),this.startNameSet_&&(r[n.START_AT]+=","+a.stringify(this.indexStartName_))),this.endSet_&&(r[n.END_AT]=a.stringify(this.indexEndValue_),this.endNameSet_&&(r[n.END_AT]+=","+a.stringify(this.indexEndName_))),this.limitSet_&&(this.isViewFromLeft()?r[n.LIMIT_TO_FIRST]=this.limit_:r[n.LIMIT_TO_LAST]=this.limit_),r)},t.WIRE_PROTOCOL_CONSTANTS_={INDEX_START_VALUE:"sp",INDEX_START_NAME:"sn",INDEX_END_VALUE:"ep",INDEX_END_NAME:"en",LIMIT:"l",VIEW_FROM:"vf",VIEW_FROM_LEFT:"l",VIEW_FROM_RIGHT:"r",INDEX:"i"},t.REST_QUERY_CONSTANTS_={ORDER_BY:"orderBy",PRIORITY_INDEX:"$priority",VALUE_INDEX:"$value",KEY_INDEX:"$key",START_AT:"startAt",END_AT:"endAt",LIMIT_TO_FIRST:"limitToFirst",LIMIT_TO_LAST:"limitToLast"},t.DEFAULT=new t,t}(),sn=function(t){function e(e,n){if(!(e instanceof nn))throw new Error("new Reference() no longer supported - use app.database().");return t.call(this,e,n,an.DEFAULT,!1)||this}return u.__extends(e,t),e.prototype.getKey=function(){return a.validateArgCount("Reference.key",0,0,arguments.length),this.path.isEmpty()?null:this.path.getBack()},e.prototype.child=function(t){return a.validateArgCount("Reference.child",1,1,arguments.length),"number"==typeof t?t=String(t):t instanceof B||(null===this.path.getFront()?function(t,e,n,r){n&&(n=n.replace(/^\/*\.info(\/|$)/,"/")),lt(t,e,n,r)}("Reference.child",1,t,!1):lt("Reference.child",1,t,!1)),new e(this.repo,this.path.child(t))},e.prototype.getParent=function(){a.validateArgCount("Reference.parent",0,0,arguments.length);var t=this.path.parent();return null===t?null:new e(this.repo,t)},e.prototype.getRoot=function(){a.validateArgCount("Reference.root",0,0,arguments.length);for(var t=this;null!==t.getParent();)t=t.getParent();return t},e.prototype.databaseProp=function(){return this.repo.database},e.prototype.set=function(t,e){a.validateArgCount("Reference.set",1,2,arguments.length),ht("Reference.set",this.path),it("Reference.set",1,t,this.path,!1),a.validateCallback("Reference.set",2,e,!0);var n=new a.Deferred;return this.repo.setWithPriority(this.path,t,null,n.wrapCallback(e)),n.promise},e.prototype.update=function(t,e){if(a.validateArgCount("Reference.update",1,2,arguments.length),ht("Reference.update",this.path),Array.isArray(t)){for(var n={},r=0;r<t.length;++r)n[""+r]=t[r];t=n,T("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}at("Reference.update",1,t,this.path,!1),a.validateCallback("Reference.update",2,e,!0);var i=new a.Deferred;return this.repo.update(this.path,t,i.wrapCallback(e)),i.promise},e.prototype.setWithPriority=function(t,e,n){if(a.validateArgCount("Reference.setWithPriority",2,3,arguments.length),ht("Reference.setWithPriority",this.path),it("Reference.setWithPriority",1,t,this.path,!1),st("Reference.setWithPriority",2,e,!1),a.validateCallback("Reference.setWithPriority",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.setWithPriority failed: "+this.getKey()+" is a read-only object.";var r=new a.Deferred;return this.repo.setWithPriority(this.path,t,e,r.wrapCallback(n)),r.promise},e.prototype.remove=function(t){return a.validateArgCount("Reference.remove",0,1,arguments.length),ht("Reference.remove",this.path),a.validateCallback("Reference.remove",1,t,!0),this.set(null,t)},e.prototype.transaction=function(t,e,n){if(a.validateArgCount("Reference.transaction",1,3,arguments.length),ht("Reference.transaction",this.path),a.validateCallback("Reference.transaction",1,t,!1),a.validateCallback("Reference.transaction",2,e,!0),function(t,e,n,r){if((!r||void 0!==n)&&"boolean"!=typeof n)throw new Error(a.errorPrefix(t,e,r)+"must be a boolean.")}("Reference.transaction",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.transaction failed: "+this.getKey()+" is a read-only object.";void 0===n&&(n=!0);var r=new a.Deferred;"function"==typeof e&&r.promise.catch(function(){});return this.repo.startTransaction(this.path,t,function(t,n,i){t?r.reject(t):r.resolve(new dt(n,i)),"function"==typeof e&&e(t,n,i)},n),r.promise},e.prototype.setPriority=function(t,e){a.validateArgCount("Reference.setPriority",1,2,arguments.length),ht("Reference.setPriority",this.path),st("Reference.setPriority",1,t,!1),a.validateCallback("Reference.setPriority",2,e,!0);var n=new a.Deferred;return this.repo.setWithPriority(this.path.child(".priority"),t,null,n.wrapCallback(e)),n.promise},e.prototype.push=function(t,e){a.validateArgCount("Reference.push",0,2,arguments.length),ht("Reference.push",this.path),it("Reference.push",1,t,this.path,!0),a.validateCallback("Reference.push",2,e,!0);var n,r=this.repo.serverTime(),i=yt(r),o=this.child(i),s=this.child(i);return n=null!=t?o.set(t,e).then(function(){return s}):Promise.resolve(s),o.then=n.then.bind(n),o.catch=n.then.bind(n,void 0),"function"==typeof e&&n.catch(function(){}),o},e.prototype.onDisconnect=function(){return ht("Reference.onDisconnect",this.path),new pt(this.repo,this.path)},Object.defineProperty(e.prototype,"database",{get:function(){return this.databaseProp()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"key",{get:function(){return this.getKey()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"parent",{get:function(){return this.getParent()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"root",{get:function(){return this.getRoot()},enumerable:!0,configurable:!0}),e}(Zt);Zt.__referenceConstructor=sn,Ce.__referenceConstructor=sn;var un,cn=function(){return function(){this.children={},this.childCount=0,this.value=null}}(),ln=function(){function t(t,e,n){void 0===t&&(t=""),void 0===e&&(e=null),void 0===n&&(n=new cn),this.name_=t,this.parent_=e,this.node_=n}return t.prototype.subTree=function(e){for(var n,r=e instanceof B?e:new B(e),i=this;null!==(n=r.getFront());){i=new t(n,i,a.safeGet(i.node_.children,n)||new cn),r=r.popFront()}return i},t.prototype.getValue=function(){return this.node_.value},t.prototype.setValue=function(t){a.assert(void 0!==t,"Cannot set value to undefined"),this.node_.value=t,this.updateParents_()},t.prototype.clear=function(){this.node_.value=null,this.node_.children={},this.node_.childCount=0,this.updateParents_()},t.prototype.hasChildren=function(){return this.node_.childCount>0},t.prototype.isEmpty=function(){return null===this.getValue()&&!this.hasChildren()},t.prototype.forEachChild=function(e){var n=this;a.forEach(this.node_.children,function(r,i){e(new t(r,n,i))})},t.prototype.forEachDescendant=function(t,e,n){e&&!n&&t(this),this.forEachChild(function(e){e.forEachDescendant(t,!0,n)}),e&&n&&t(this)},t.prototype.forEachAncestor=function(t,e){for(var n=e?this:this.parent();null!==n;){if(t(n))return!0;n=n.parent()}return!1},t.prototype.forEachImmediateDescendantWithValue=function(t){this.forEachChild(function(e){null!==e.getValue()?t(e):e.forEachImmediateDescendantWithValue(t)})},t.prototype.path=function(){return new B(null===this.parent_?this.name_:this.parent_.path()+"/"+this.name_)},t.prototype.name=function(){return this.name_},t.prototype.parent=function(){return this.parent_},t.prototype.updateParents_=function(){null!==this.parent_&&this.parent_.updateChild_(this.name_,this)},t.prototype.updateChild_=function(t,e){var n=e.isEmpty(),r=a.contains(this.node_.children,t);n&&r?(delete this.node_.children[t],this.node_.childCount--,this.updateParents_()):n||r||(this.node_.children[t]=e.node_,this.node_.childCount++,this.updateParents_())},t}();!function(t){t[t.RUN=0]="RUN",t[t.SENT=1]="SENT",t[t.COMPLETED=2]="COMPLETED",t[t.SENT_NEEDS_ABORT=3]="SENT_NEEDS_ABORT",t[t.NEEDS_ABORT=4]="NEEDS_ABORT"}(un||(un={})),nn.MAX_TRANSACTION_RETRIES_=25,nn.prototype.transactions_init_=function(){this.transactionQueueTree_=new ln},nn.prototype.startTransaction=function(t,e,n,r){this.log_("transaction on "+t);var i=function(){},o=new sn(this,t);o.on("value",i);var s={path:t,update:e,onComplete:n,status:null,order:v(),applyLocally:r,retryCount:0,unwatcher:function(){o.off("value",i)},abortReason:null,currentWriteId:null,currentInputSnapshot:null,currentOutputSnapshotRaw:null,currentOutputSnapshotResolved:null},u=this.getLatestState_(t);s.currentInputSnapshot=u;var c=s.update(u.val());if(void 0===c){if(s.unwatcher(),s.currentOutputSnapshotRaw=null,s.currentOutputSnapshotResolved=null,s.onComplete){var l=new Gt(s.currentInputSnapshot,new sn(this,s.path),Pt);s.onComplete(null,!1,l)}}else{ot("transaction failed: Data returned ",c,s.path),s.status=un.RUN;var h=this.transactionQueueTree_.subTree(t),f=h.getValue()||[];f.push(s),h.setValue(f);var p=void 0;if("object"==typeof c&&null!==c&&a.contains(c,".priority"))p=a.safeGet(c,".priority"),a.assert(rt(p),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.");else p=(this.serverSyncTree_.calcCompleteEventCache(t)||Wt.EMPTY_NODE).getPriority().val();p=p;var d=this.generateServerValues(),y=Ht(c,p),g=re(y,d);s.currentOutputSnapshotRaw=y,s.currentOutputSnapshotResolved=g,s.currentWriteId=this.getNextWriteId_();var m=this.serverSyncTree_.applyUserOverwrite(t,g,s.currentWriteId,s.applyLocally);this.eventQueue_.raiseEventsForChangedPath(t,m),this.sendReadyTransactions_()}},nn.prototype.getLatestState_=function(t,e){return this.serverSyncTree_.calcCompleteEventCache(t,e)||Wt.EMPTY_NODE},nn.prototype.sendReadyTransactions_=function(t){var e=this;if(void 0===t&&(t=this.transactionQueueTree_),t||this.pruneCompletedTransactionsBelowNode_(t),null!==t.getValue()){var n=this.buildTransactionQueue_(t);a.assert(n.length>0,"Sending zero length transaction queue"),n.every(function(t){return t.status===un.RUN})&&this.sendTransactionQueue_(t.path(),n)}else t.hasChildren()&&t.forEachChild(function(t){e.sendReadyTransactions_(t)})},nn.prototype.sendTransactionQueue_=function(t,e){for(var n=this,r=e.map(function(t){return t.currentWriteId}),i=this.getLatestState_(t,r),o=i,s=i.hash(),u=0;u<e.length;u++){var c=e[u];a.assert(c.status===un.RUN,"tryToSendTransactionQueue_: items in queue should all be run."),c.status=un.SENT,c.retryCount++;var l=B.relativePath(t,c.path);o=o.updateChild(l,c.currentOutputSnapshotRaw)}var h=o.val(!0),f=t;this.server_.put(f.toString(),h,function(r){n.log_("transaction put response",{path:f.toString(),status:r});var i=[];if("ok"===r){for(var o=[],a=0;a<e.length;a++){if(e[a].status=un.COMPLETED,i=i.concat(n.serverSyncTree_.ackUserWrite(e[a].currentWriteId)),e[a].onComplete){var s=e[a].currentOutputSnapshotResolved,u=new sn(n,e[a].path),c=new Gt(s,u,Pt);o.push(e[a].onComplete.bind(null,null,!0,c))}e[a].unwatcher()}n.pruneCompletedTransactionsBelowNode_(n.transactionQueueTree_.subTree(t)),n.sendReadyTransactions_(),n.eventQueue_.raiseEventsForChangedPath(t,i);for(a=0;a<o.length;a++)q(o[a])}else{if("datastale"===r)for(a=0;a<e.length;a++)e[a].status===un.SENT_NEEDS_ABORT?e[a].status=un.NEEDS_ABORT:e[a].status=un.RUN;else{T("transaction at "+f.toString()+" failed: "+r);for(a=0;a<e.length;a++)e[a].status=un.NEEDS_ABORT,e[a].abortReason=r}n.rerunTransactions_(t)}},s)},nn.prototype.rerunTransactions_=function(t){var e=this.getAncestorTransactionNode_(t),n=e.path(),r=this.buildTransactionQueue_(e);return this.rerunTransactionQueue_(r,n),n},nn.prototype.rerunTransactionQueue_=function(t,e){if(0!==t.length){for(var n,r=[],i=[],o=t.filter(function(t){return t.status===un.RUN}).map(function(t){return t.currentWriteId}),s=0;s<t.length;s++){var u=t[s],c=B.relativePath(e,u.path),l=!1,h=void 0;if(a.assert(null!==c,"rerunTransactionsUnderNode_: relativePath should not be null."),u.status===un.NEEDS_ABORT)l=!0,h=u.abortReason,i=i.concat(this.serverSyncTree_.ackUserWrite(u.currentWriteId,!0));else if(u.status===un.RUN)if(u.retryCount>=nn.MAX_TRANSACTION_RETRIES_)l=!0,h="maxretry",i=i.concat(this.serverSyncTree_.ackUserWrite(u.currentWriteId,!0));else{var f=this.getLatestState_(u.path,o);u.currentInputSnapshot=f;var p=t[s].update(f.val());if(void 0!==p){ot("transaction failed: Data returned ",p,u.path);var d=Ht(p);"object"==typeof p&&null!=p&&a.contains(p,".priority")||(d=d.updatePriority(f.getPriority()));var y=u.currentWriteId,v=this.generateServerValues(),g=re(d,v);u.currentOutputSnapshotRaw=d,u.currentOutputSnapshotResolved=g,u.currentWriteId=this.getNextWriteId_(),o.splice(o.indexOf(y),1),i=(i=i.concat(this.serverSyncTree_.applyUserOverwrite(u.path,g,u.currentWriteId,u.applyLocally))).concat(this.serverSyncTree_.ackUserWrite(y,!0))}else l=!0,h="nodata",i=i.concat(this.serverSyncTree_.ackUserWrite(u.currentWriteId,!0))}if(this.eventQueue_.raiseEventsForChangedPath(e,i),i=[],l&&(t[s].status=un.COMPLETED,n=t[s].unwatcher,setTimeout(n,Math.floor(0)),t[s].onComplete))if("nodata"===h){var m=new sn(this,t[s].path),_=t[s].currentInputSnapshot,b=new Gt(_,m,Pt);r.push(t[s].onComplete.bind(null,null,!1,b))}else r.push(t[s].onComplete.bind(null,new Error(h),!1,null))}this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);for(s=0;s<r.length;s++)q(r[s]);this.sendReadyTransactions_()}},nn.prototype.getAncestorTransactionNode_=function(t){for(var e,n=this.transactionQueueTree_;null!==(e=t.getFront())&&null===n.getValue();)n=n.subTree(e),t=t.popFront();return n},nn.prototype.buildTransactionQueue_=function(t){var e=[];return this.aggregateTransactionQueuesForNode_(t,e),e.sort(function(t,e){return t.order-e.order}),e},nn.prototype.aggregateTransactionQueuesForNode_=function(t,e){var n=this,r=t.getValue();if(null!==r)for(var i=0;i<r.length;i++)e.push(r[i]);t.forEachChild(function(t){n.aggregateTransactionQueuesForNode_(t,e)})},nn.prototype.pruneCompletedTransactionsBelowNode_=function(t){var e=this,n=t.getValue();if(n){for(var r=0,i=0;i<n.length;i++)n[i].status!==un.COMPLETED&&(n[r]=n[i],r++);n.length=r,t.setValue(n.length>0?n:null)}t.forEachChild(function(t){e.pruneCompletedTransactionsBelowNode_(t)})},nn.prototype.abortTransactions_=function(t){var e=this,n=this.getAncestorTransactionNode_(t).path(),r=this.transactionQueueTree_.subTree(t);return r.forEachAncestor(function(t){e.abortTransactionsOnNode_(t)}),this.abortTransactionsOnNode_(r),r.forEachDescendant(function(t){e.abortTransactionsOnNode_(t)}),n},nn.prototype.abortTransactionsOnNode_=function(t){var e=t.getValue();if(null!==e){for(var n=[],r=[],i=-1,o=0;o<e.length;o++)if(e[o].status===un.SENT_NEEDS_ABORT);else if(e[o].status===un.SENT)a.assert(i===o-1,"All SENT items should be at beginning of queue."),i=o,e[o].status=un.SENT_NEEDS_ABORT,e[o].abortReason="set";else if(a.assert(e[o].status===un.RUN,"Unexpected transaction status in abort"),e[o].unwatcher(),r=r.concat(this.serverSyncTree_.ackUserWrite(e[o].currentWriteId,!0)),e[o].onComplete){n.push(e[o].onComplete.bind(null,new Error("set"),!1,null))}-1===i?t.setValue(null):e.length=i+1,this.eventQueue_.raiseEventsForChangedPath(t.path(),r);for(o=0;o<n.length;o++)q(n[o])}};var hn,fn=function(){function t(){this.repos_={},this.useRestClient_=!1}return t.getInstance=function(){return hn||(hn=new t),hn},t.prototype.interrupt=function(){for(var t in this.repos_)for(var e in this.repos_[t])this.repos_[t][e].interrupt()},t.prototype.resume=function(){for(var t in this.repos_)for(var e in this.repos_[t])this.repos_[t][e].resume()},t.prototype.databaseFromApp=function(t,e){var n=e||t.options.databaseURL;void 0===n&&x("Can't determine Firebase Database URL.  Be sure to include databaseURL option when calling firebase.initializeApp().");var r=$(n),i=r.repoInfo;return ft("Invalid Firebase Database URL",1,r),r.path.isEmpty()||x("Database URL must point to the root of a Firebase Database (not including a child path)."),this.createRepo(i,t).database},t.prototype.deleteRepo=function(t){var e=a.safeGet(this.repos_,t.app.name);e&&a.safeGet(e,t.repoInfo_.toURLString())===t||x("Database "+t.app.name+"("+t.repoInfo_+") has already been deleted."),t.interrupt(),delete e[t.repoInfo_.toURLString()]},t.prototype.createRepo=function(t,e){var n=a.safeGet(this.repos_,e.name);n||(n={},this.repos_[e.name]=n);var r=a.safeGet(n,t.toURLString());return r&&x("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call."),r=new nn(t,this.useRestClient_,e),n[t.toURLString()]=r,r},t.prototype.forceRestClient=function(t){this.useRestClient_=t},t}(),pn=function(){function t(t){this.repo_=t,t instanceof nn||x("Don't call new Database() directly - please use firebase.database()."),this.root_=new sn(t,B.Empty),this.INTERNAL=new dn(this)}return Object.defineProperty(t.prototype,"app",{get:function(){return this.repo_.app},enumerable:!0,configurable:!0}),t.prototype.ref=function(t){return this.checkDeleted_("ref"),a.validateArgCount("database.ref",0,1,arguments.length),t instanceof sn?this.refFromURL(t.toString()):void 0!==t?this.root_.child(t):this.root_},t.prototype.refFromURL=function(t){var e="database.refFromURL";this.checkDeleted_(e),a.validateArgCount(e,1,1,arguments.length);var n=$(t);ft(e,1,n);var r=n.repoInfo;return r.host!==this.repo_.repoInfo_.host&&x(e+": Host name does not match the current database: (found "+r.host+" but expected "+this.repo_.repoInfo_.host+")"),this.ref(n.path.toString())},t.prototype.checkDeleted_=function(t){null===this.repo_&&x("Cannot call "+t+" on a deleted database.")},t.prototype.goOffline=function(){a.validateArgCount("database.goOffline",0,0,arguments.length),this.checkDeleted_("goOffline"),this.repo_.interrupt()},t.prototype.goOnline=function(){a.validateArgCount("database.goOnline",0,0,arguments.length),this.checkDeleted_("goOnline"),this.repo_.resume()},t.ServerValue={TIMESTAMP:{".sv":"timestamp"}},t}(),dn=function(){function t(t){this.database=t}return t.prototype.delete=function(){return u.__awaiter(this,void 0,void 0,function(){return u.__generator(this,function(t){return this.database.checkDeleted_("delete"),fn.getInstance().deleteRepo(this.database.repo_),this.database.repo_=null,this.database.root_=null,this.database.INTERNAL=null,this.database=null,[2]})})},t}(),yn=Object.freeze({forceLongPolling:function(){Ge.forceDisallow(),Qe.forceAllow()},forceWebSockets:function(){Qe.forceDisallow()},isWebSocketsAvailable:function(){return Ge.isAvailable()},setSecurityDebugCallback:function(t,e){t.repo.persistentConnection_.securityDebugCallback_=e},stats:function(t,e){t.repo.stats(e)},statsIncrementCounter:function(t,e){t.repo.statsIncrementCounter(e)},dataUpdateCount:function(t){return t.repo.dataUpdateCount},interceptServerData:function(t,e){return t.repo.interceptServerData_(e)}}),vn=tn;tn.prototype.simpleListen=function(t,e){this.sendRequest("q",{p:t},e)},tn.prototype.echo=function(t,e){this.sendRequest("echo",{d:t},e)};var gn=Xe,mn=Q,_n=Object.freeze({DataConnection:vn,RealTimeConnection:gn,hijackHash:function(t){var e=tn.prototype.put;return tn.prototype.put=function(n,r,i,o){void 0!==o&&(o=t()),e.call(this,n,r,i,o)},function(){tn.prototype.put=e}},ConnectionTarget:mn,queryIdentifier:function(t){return t.queryIdentifier()},listens:function(t){return t.repo.persistentConnection_.listens_},forceRestClient:function(t){fn.getInstance().forceRestClient(t)}}),bn=pn.ServerValue;function wn(e){var n=e.INTERNAL.registerService("database",function(t,e,n){return fn.getInstance().databaseFromApp(t,n)},{Reference:sn,Query:Zt,Database:pn,enableLogging:w,INTERNAL:yn,ServerValue:bn,TEST_ACCESS:_n},null,!0);a.isNodeSdk()&&(t.exports=n)}wn(c),e.registerDatabase=wn,e.Database=pn,e.Query=Zt,e.Reference=sn,e.enableLogging=w,e.ServerValue=bn,e.DataSnapshot=Gt,e.OnDisconnect=pt}).call(this,n(135))},function(t,e,n){"use strict";n.r(e),n.d(e,"setLogLevel",function(){return u}),n.d(e,"Logger",function(){return s}),n.d(e,"LogLevel",function(){return r});var r,i=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(r||(r={}));var o=r.INFO,a=function(t,e){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];if(!(e<t.logLevel)){var o=(new Date).toISOString();switch(e){case r.DEBUG:case r.VERBOSE:console.log.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;case r.INFO:console.info.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;case r.WARN:console.warn.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;case r.ERROR:console.error.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;default:throw new Error("Attempted to log a message with an invalid logType (value: "+e+")")}}},s=function(){function t(t){this.name=t,this._logLevel=o,this._logHandler=a,i.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in r))throw new TypeError("Invalid value assigned to `logLevel`");this._logLevel=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!0,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.DEBUG].concat(t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.VERBOSE].concat(t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.INFO].concat(t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.WARN].concat(t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.ERROR].concat(t))},t}();function u(t){i.forEach(function(e){e.logLevel=t})}},function(t,e,n){"use strict";n.r(e),n.d(e,"__extends",function(){return i}),n.d(e,"__assign",function(){return o}),n.d(e,"__rest",function(){return a}),n.d(e,"__decorate",function(){return s}),n.d(e,"__param",function(){return u}),n.d(e,"__metadata",function(){return c}),n.d(e,"__awaiter",function(){return l}),n.d(e,"__generator",function(){return h}),n.d(e,"__exportStar",function(){return f}),n.d(e,"__values",function(){return p}),n.d(e,"__read",function(){return d}),n.d(e,"__spread",function(){return y}),n.d(e,"__await",function(){return v}),n.d(e,"__asyncGenerator",function(){return g}),n.d(e,"__asyncDelegator",function(){return m}),n.d(e,"__asyncValues",function(){return _}),n.d(e,"__makeTemplateObject",function(){return b}),n.d(e,"__importStar",function(){return w}),n.d(e,"__importDefault",function(){return E});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t};function a(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&(n[r[i]]=t[r[i]])}return n}function s(t,e,n,r){var i,o=arguments.length,a=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(o<3?i(a):o>3?i(e,n,a):i(e,n))||a);return o>3&&a&&Object.defineProperty(e,n,a),a}function u(t,e){return function(n,r){e(n,r,t)}}function c(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function l(t,e,n,r){return new(n||(n=Promise))(function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(a,s)}u((r=r.apply(t,e||[])).next())})}function h(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=r[2&o[0]?"return":o[0]?"throw":"next"])&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[0,i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function f(t,e){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}function p(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}function d(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function y(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(d(arguments[e]));return t}function v(t){return this instanceof v?(this.v=t,this):new v(t)}function g(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){i[t]&&(r[t]=function(e){return new Promise(function(n,r){o.push([t,e,n,r])>1||s(t,e)})})}function s(t,e){try{(n=i[t](e)).value instanceof v?Promise.resolve(n.value.v).then(u,c):l(o[0][2],n)}catch(t){l(o[0][3],t)}var n}function u(t){s("next",t)}function c(t){s("throw",t)}function l(t,e){t(e),o.shift(),o.length&&s(o[0][0],o[0][1])}}function m(t){var e,n;return e={},r("next"),r("throw",function(t){throw t}),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,i){t[r]&&(e[r]=function(e){return(n=!n)?{value:v(t[r](e)),done:"return"===r}:i?i(e):e})}}function _(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e=t[Symbol.asyncIterator];return e?e.call(t):p(t)}function b(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function w(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}function E(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";n.r(e);n(44),n(355);var r=["Hey kid, use your brain to win the battle!","Get it together and let's start... finally!","Prepare to the battle. And don't cry..."],i=["Nice shot!","Great, keep it up!","Wow!"],o=["Hmm, try again...","You missed!","Pull yourself together!"],a=["ugly","hungry","ridiculous","angry","terrible","furious","silent"],s=["Minotaur"],u=["Tommy","Molly","Jack","Peter","Jeff","Ronnie","Jordan","Aaron","Jason","Tony","Bob"],c=["+","-","*"],l=49,h=50,f=51,p=52,d=53,y=54,v=16,g=27;function m(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _(t,e,n){return e&&m(t.prototype,e),n&&m(t,n),t}var b=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.localPlayerName=""}return _(t,null,[{key:"draw",value:function(){document.querySelector(".container").insertAdjacentHTML("afterbegin",'\n<section id="choosePlayerName" class="choose-player-name">\n  <form class="choose-name-form">\n  <h1>Hey kid, choose your magic name!</h1>\n  <label>magic name:<input type="text" class="player-name" required="" maxlength="15" pattern="[a-zA-Z0-9]+"></label>\n  <input type="submit" class="submit-button" value="->"></form>\n  <p class="only-english">(only english letters allowed)</p>\n  <input type="button" class="close" value="x">\n</section>\n'),document.querySelector(".choose-player-name .close").addEventListener("click",function(){t.empty()}),document.addEventListener("keydown",function(e){var n=document.querySelector(".choose-player-name .close");e.keyCode===g&&n&&t.empty()})}},{key:"empty",value:function(){document.querySelector("#choosePlayerName").remove()}}]),_(t,null,[{key:"getNewPlayerName",value:function(){return t.draw(),document.querySelector('input[type="text"]').focus(),new Promise(function(e){document.querySelector("#choosePlayerName .choose-name-form").addEventListener("submit",function(n){n.preventDefault();var r=document.querySelector(".choose-player-name .player-name").value;t.empty(),sessionStorage.setItem("playerName",r),e(r)})})}}]),t}(),w=n(138),E=n.n(w),S=n(139),C=n.n(S),x=n(140),T=n.n(x),k=n(141),P=n.n(k),O=n(142),I=n.n(O);function A(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var N=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,r=[{key:"draw",value:function(){document.querySelector(".container").insertAdjacentHTML("afterbegin",'\n<section class="landing-page">\n  <header class="header">\n  <h1 class="game-name">8 beasts Game</h1>\n  <div class="header-content">\n    <div class="header-descriptopn">\n      <p class="game-description">Hey kid, Do you feel that you have enough knowledge to clash with the dangerous monster and win the battle? If so, what are you waiting for? Let\'s get started!</p>\n      <input type="button" class="play-button" value="play ->">\n    </div>\n    <div class="header-img">\n      <img class="lp-wizzard" src="" alt="wizzard">\n    </div>\n  </div>\n  </header>\n  <section class="gameplay">\n    <h2>Gameplay</h2>\n    <div class="gameplay-content">\n      <img class="gameplay-screenshot screenshot1" src="" alt="gameplay screenshot 1">\n      <img class="gameplay-screenshot screenshot2" src="" alt="gameplay screenshot 2">\n      <img class="gameplay-screenshot screenshot3" src="" alt="gameplay screenshot 3">\n      <img class="gameplay-screenshot screenshot4" src="" alt="gameplay screenshot 4">\n    </div>\n  </section>\n  <section class="contributors">\n    <h2>Contributors</h2>\n    <div class="contributors-content">\n      <p class="contributors-description developer">The game was developed by <a href="https://github.com/uniorunr">uniorunr</a></p>\n      <p class="contributors-description music">main music theme: john maus - believer</p>\n      <p class="contributors-description design">character design: Calciumtrice</p>    \n    </div>\n  </section>\n</section>\n'),document.querySelector(".lp-wizzard").setAttribute("src",E.a),document.querySelector(".gameplay-screenshot.screenshot1").setAttribute("src",C.a),document.querySelector(".gameplay-screenshot.screenshot2").setAttribute("src",T.a),document.querySelector(".gameplay-screenshot.screenshot3").setAttribute("src",P.a),document.querySelector(".gameplay-screenshot.screenshot4").setAttribute("src",I.a)}},{key:"empty",value:function(){document.querySelector(".landing-page").remove()}}],(n=null)&&A(e.prototype,n),r&&A(e,r),t}(),R=n(143),D=n.n(R),F=n(144),M=n.n(F),L=n(70),j=n.n(L),q=n(145),W=n.n(q),U=n(146),B=n.n(U);function H(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function V(t){return(V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Q(t,e){return!e||"object"!==V(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function z(t){return(z=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Y(t,e){return(Y=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function G(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function K(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function X(t,e,n){return e&&K(t.prototype,e),n&&K(t,n),t}var $=function(){function t(){G(this,t)}return X(t,null,[{key:"draw",value:function(){var t=document.createElement("div");t.setAttribute("id","battleScreen"),t.setAttribute("class","battle-content"),document.querySelector(".container").appendChild(t);var e=document.createElement("canvas");e.setAttribute("id","canvas"),document.querySelector(".battle-content").appendChild(e)}},{key:"empty",value:function(){document.querySelector("#canvas").remove()}}]),t}(),J=function(){function t(e,n,r,i,o,a,s,u,c){G(this,t),this.name=e,this.health=n,this.spriteWidth=r,this.spriteHeight=i,this.spriteRows=o,this.spriteCols=a,this.curFrame=s,this.frames=u,this.sprite=new Image,this.sprite.src=c}return X(t,[{key:"frameWidth",value:function(){return this.spriteWidth/this.spriteCols}},{key:"frameHeight",value:function(){return this.spriteHeight/this.spriteRows}}]),t}(),Z=function(t){function e(t,n,r,i,o,a,s,u,c,l,h,f,p,d,y){var v;return G(this,e),(v=Q(this,z(e).call(this,t,n,r,i,o,a,s,u,c))).srcX=l,v.srcY=h,v.fps=f,v.curAction=p,v.position=d,v.dPos=y,v.canvas=document.getElementById("canvas"),v.ctx=v.canvas.getContext("2d"),v}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Y(t,e)}(e,J),X(e,[{key:"updateFrame",value:function(){this.ctx.clearRect(this.canvas.width*this.position-this.frameWidth()/2,this.canvas.height/2-this.frameHeight()*this.dPos,this.frameWidth(),this.frameHeight()),"death"===this.curAction&&this.curFrame===this.frames-1?this.curFrame=this.frames-1:this.curFrame=(this.curFrame+=1)%this.frames,this.srcX=this.curFrame*this.frameWidth()}},{key:"draw",value:function(){this.updateFrame(),this.ctx.drawImage(this.sprite,this.srcX,this.srcY,this.frameWidth(),this.frameHeight(),this.canvas.width*this.position-this.frameWidth()/2,this.canvas.height/2-this.frameHeight()*this.dPos,this.frameWidth(),this.frameHeight()),this.curFrame===this.frames-1&&"idle"!==this.curAction&&"death"!==this.curAction&&(this.srcY=0)}},{key:"heal",value:function(){this.curFrame=0,this.srcY=this.frameHeight(),this.curAction="heal"}},{key:"walk",value:function(){this.curFrame=0,this.srcY=2*this.frameHeight(),this.curAction="walk"}},{key:"attack",value:function(){this.curFrame=0,this.srcY=3*this.frameHeight(),this.curAction="attack"}},{key:"death",value:function(){this.curFrame=0,this.srcY=4*this.frameHeight(),this.curAction="death"}},{key:"damage",value:function(){this.health>0&&(this.health-=20,this.health<0&&(this.health=0))}},{key:"recovery",value:function(){this.health<100&&(this.health+=10,this.health>100&&(this.health=100))}}]),e}(),tt=function(){function t(e,n,r,i,o){G(this,t),this.name=e,this.health=n,this.clearArea=r,this.rectangleArea=i,this.healthArea=i.slice(),this.textArea=o,this.canvas=document.getElementById("canvas"),this.ctx=this.canvas.getContext("2d")}return X(t,[{key:"updateFrame",value:function(){var t;(t=this.ctx).clearRect.apply(t,H(this.clearArea))}},{key:"draw",value:function(){var t,e,n;this.updateFrame(),this.ctx.beginPath(),this.ctx.strokeStyle="#72707d",(t=this.ctx).rect.apply(t,H(this.rectangleArea)),(e=this.ctx).fillRect.apply(e,H(this.healthArea)),this.ctx.lineWidth=4,this.ctx.stroke(),this.ctx.closePath(),this.ctx.font="0.8em Emulogic, Pixelettes, sans-serif",this.ctx.fillStyle="#72707d",(n=this.ctx).fillText.apply(n,[this.name].concat(H(this.textArea)))}},{key:"damage",value:function(){this.health>0&&(this.health-=20,this.health<0&&(this.health=0),this.healthArea[2]=this.rectangleArea[2]*this.health/100)}},{key:"recovery",value:function(){this.health<100&&(this.health+=10,this.health>100&&(this.health=100),this.healthArea[2]=this.rectangleArea[2]*this.health/100)}}]),t}(),et=function(){function t(e,n,r){G(this,t),this.score=e,this.clearArea=n,this.textArea=r,this.canvas=document.getElementById("canvas"),this.ctx=this.canvas.getContext("2d")}return X(t,[{key:"updateFrame",value:function(){var t;(t=this.ctx).clearRect.apply(t,H(this.clearArea))}},{key:"draw",value:function(){var t;this.updateFrame(),this.ctx.font="0.95em Emulogic, Pixelettes, sans-serif",this.ctx.fillStyle="#72707d",(t=this.ctx).fillText.apply(t,["Score: ".concat(this.score)].concat(H(this.textArea)))}}]),t}(),nt=function(){function t(e,n,r,i,o){G(this,t),this.generic=e,this.winTips=n,this.loseTips=r,this.clearArea=i,this.textArea=o,this.currTip=this.generic[Math.floor(Math.random()*this.generic.length)],this.canvas=document.getElementById("canvas"),this.ctx=this.canvas.getContext("2d")}return X(t,[{key:"updateFrame",value:function(){var t;(t=this.ctx).clearRect.apply(t,H(this.clearArea))}},{key:"draw",value:function(){var t;this.updateFrame(),this.ctx.font="0.8em Emulogic, Pixelettes, sans-serif",this.ctx.fillStyle="#72707d",(t=this.ctx).fillText.apply(t,[this.currTip].concat(H(this.textArea)))}}]),t}(),rt=function(){function t(e,n,r,i,o,a,s,u,c,l,h,f,p){G(this,t),this.spriteWidth=e,this.spriteHeight=n,this.spriteRows=r,this.spriteCols=i,this.curFrame=o,this.frames=a,this.sprite=new Image,this.sprite.src=s,this.srcX=u,this.srcY=c,this.fps=l,this.position=h,this.dPos=f,this.yPosition=p,this.canvas=document.getElementById("canvas"),this.ctx=this.canvas.getContext("2d")}return X(t,[{key:"frameWidth",value:function(){return this.spriteWidth/this.spriteCols}},{key:"frameHeight",value:function(){return this.spriteHeight/this.spriteRows}},{key:"updateFrame",value:function(){this.ctx.clearRect(this.canvas.width*this.position-this.frameWidth()/this.yPosition,this.canvas.width-this.canvas.width*this.dPos,this.frameWidth(),this.frameHeight()),this.curFrame=(this.curFrame+=1)%this.frames,this.srcX=this.curFrame*this.frameWidth()}},{key:"draw",value:function(){this.updateFrame(),this.ctx.drawImage(this.sprite,this.srcX,this.srcY,this.frameWidth(),this.frameHeight(),this.canvas.width*this.position-this.frameWidth()/this.yPosition,this.canvas.width-this.canvas.width*this.dPos,this.frameWidth(),this.frameHeight())}}]),t}(),it=function(t){return new Promise(function(e){setTimeout(function(){e()},t)})},ot=function(t,e,n){var r=function(t){return t[Math.floor(Math.random()*t.length)]};return"".concat(r(t)," ").concat(r(e)," ").concat(r(n))},at=function(t){for(var e,n,r=t,i=t.length;0!==i;)n=Math.floor(Math.random()*i),e=r[i-=1],r[i]=r[n],r[n]=e;return r},st=n(147),ut=n.n(st),ct=n(148),lt=n.n(ct),ht=n(149),ft=n.n(ht),pt=n(150),dt=n.n(pt),yt=n(151),vt=n.n(yt),gt=n(152),mt=n.n(gt);function _t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var bt=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,r=[{key:"draw",value:function(){sessionStorage.setItem("sound",!1),document.querySelector(".container").insertAdjacentHTML("afterbegin",'\n<input type="button" class="sound-button" value="Sound On">\n'),t.mainTheme()}},{key:"mainTheme",value:function(){var e=new Audio(ut.a);e.volume=.05,e.addEventListener("ended",function(){e.currentTime=0,e.play()},!1),document.querySelector(".sound-button").addEventListener("click",function(n){e.paused?(t.play(e),n.target.value="sound off",sessionStorage.setItem("sound",!0)):(t.pause(e),n.target.value="sound on",sessionStorage.setItem("sound",!1))})}},{key:"wizzardAttack",value:function(){var e=new Audio(lt.a);e.volume=.5,"true"===sessionStorage.getItem("sound")&&t.play(e)}},{key:"wizzardHeal",value:function(){var e=new Audio(ft.a);e.volume=.25,"true"===sessionStorage.getItem("sound")&&t.play(e)}},{key:"monsterAttack",value:function(){var e=new Audio(dt.a);e.volume=.25,"true"===sessionStorage.getItem("sound")&&t.play(e)}},{key:"monsterDeath",value:function(){var e=new Audio(vt.a);e.volume=.9,"true"===sessionStorage.getItem("sound")&&t.play(e)}},{key:"wizzardDeath",value:function(){var e=new Audio(mt.a);e.volume=.9,"true"===sessionStorage.getItem("sound")&&t.play(e)}},{key:"play",value:function(t){t.play()}},{key:"pause",value:function(t){t.pause()}}],(n=null)&&_t(e.prototype,n),r&&_t(e,r),t}();function wt(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}function Et(t){return function(){var e=this,n=arguments;return new Promise(function(r,i){var o=t.apply(e,n);function a(t){wt(o,r,i,a,s,"next",t)}function s(t){wt(o,r,i,a,s,"throw",t)}a(void 0)})}}function St(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ct(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function xt(t,e,n){return e&&Ct(t.prototype,e),n&&Ct(t,n),t}var Tt={},kt=function(){function t(){St(this,t)}return xt(t,null,[{key:"win",value:function(){var t=Et(regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:t.t0=e,t.next="attack"===t.t0?3:"heal"===t.t0?18:32;break;case 3:return t.next=5,it(1e3);case 5:return Tt.hero.attack(),t.next=8,it(1e3);case 8:return bt.wizzardAttack(),t.next=11,it(500);case 11:return Tt.monsterHealth.damage(),Tt.monster.damage(),0!==Tt.monster.health?Tt.monster.heal():(Tt.monster.death(),bt.monsterDeath()),Tt.tips.currTip=Tt.tips.winTips[Math.floor(Math.random()*Tt.tips.winTips.length)],t.next=17,it(2e3);case 17:return t.abrupt("break",33);case 18:return t.next=20,it(1e3);case 20:return Tt.hero.heal(),t.next=23,it(1e3);case 23:return bt.wizzardHeal(),t.next=26,it(500);case 26:return Tt.heroHealth.recovery(),Tt.hero.recovery(),Tt.tips.currTip=Tt.tips.winTips[Math.floor(Math.random()*Tt.tips.winTips.length)],t.next=31,it(2e3);case 31:return t.abrupt("break",33);case 32:throw new TypeError("Something went wrong, sorry kid!");case 33:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}()},{key:"lose",value:function(){var t=Et(regeneratorRuntime.mark(function t(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,it(1e3);case 2:return Tt.monster.attack(),t.next=5,it(1500);case 5:return bt.monsterAttack(),t.next=8,it(500);case 8:return Tt.heroHealth.damage(),Tt.hero.damage(),0===Tt.hero.health?(Tt.hero.death(),bt.wizzardDeath()):Tt.hero.walk(),Tt.tips.currTip=Tt.tips.loseTips[Math.floor(Math.random()*Tt.tips.loseTips.length)],t.next=14,it(2e3);case 14:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"focusOnImput",value:function(){var t=document.querySelector('input[type="text"]');document.addEventListener("keydown",function(e){e.keyCode===v&&t.focus()})}}]),t}(),Pt=function(){function t(){St(this,t)}return xt(t,null,[{key:"load",value:function(t,e){var n=document.querySelector("#canvas");n||N.empty(),n&&$.empty(),$.draw();var a=document.getElementById("canvas");a.width=10*((window.innerWidth/10).toFixed(0)-3),a.height=10*((window.innerHeight/10).toFixed(0)-3);var s=new Z(t,100,1280,1280,10,10,0,10,D.a,0,0,6,"idle",.185,.5),u=new tt(t,s.health,[0,0,340,70],[40,60,300,10],[40,45]);Tt.hero=s,Tt.heroHealth=u;var c=new Z(e,100,1920,960,5,10,0,10,M.a,0,0,6,"idle",.825,2/3),l=new tt(e,c.health,[a.width-340,0,a.width,70],[a.width-340,60,300,10],[a.width-340,45]);Tt.monster=c,Tt.monsterHealth=l;var h=new nt(r,i,o,[40,a.height-80,a.width,60],[40,a.height-40]);Tt.tips=h;var f=0;Tt.score&&Tt.monster.health&&(f=Tt.score.score);var p=new et(f,[a.width/2-70,30,150,30],[a.width/2-70,45]);Tt.score=p;var d=new rt(240,80,1,3,0,3,j.a,0,0,3,.1,.91,3),y=new rt(240,80,1,3,0,3,j.a,0,0,3,.5,.91,3),v=new rt(240,80,1,3,0,3,j.a,0,0,3,.9,.91,3),g=new rt(80,80,1,1,0,1,W.a,0,0,3,.135,.655,1.45),m=new rt(80,80,1,1,0,1,B.a,0,0,3,.075,.65,1.4);setInterval(c.draw.bind(c),1e3/c.fps),setInterval(s.draw.bind(s),1e3/s.fps),setInterval(u.draw.bind(u),20),setInterval(l.draw.bind(l),20),setInterval(h.draw.bind(h),20),setInterval(p.draw.bind(p),20),setInterval(d.draw.bind(d),1e3/d.fps),setInterval(y.draw.bind(y),1e3/y.fps),setInterval(v.draw.bind(v),1e3/v.fps),setInterval(g.draw.bind(g),20),setInterval(m.draw.bind(m),20)}}]),t}();function Ot(t){return(Ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function It(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}function At(t){return function(){var e=this,n=arguments;return new Promise(function(r,i){var o=t.apply(e,n);function a(t){It(o,r,i,a,s,"next",t)}function s(t){It(o,r,i,a,s,"throw",t)}a(void 0)})}}function Nt(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Rt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Dt(t,e){return!e||"object"!==Ot(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Ft(t){return(Ft=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Mt(t,e){return(Mt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Lt=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),Dt(this,Ft(e).apply(this,arguments))}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Mt(t,e)}(e,kt),n=e,i=[{key:"draw",value:function(){document.querySelector(".container").insertAdjacentHTML("afterbegin",'\n<section id="taskSimpleMath" class="tasks-dialog simple-math">\n  <form class="tasks-dialog-form">\n  <h1>Solve this simple task</h1>\n  <div class="task-simple-math-wrapper">\n    <label class="expression">\n      <p class="simple-math-oper operand1"></p>\n      <p class="simple-math-oper operator"></p>\n      <p class="simple-math-oper operand2"></p>\n      <p class="simple-math-oper equals">=</p>\n      <input type="text" class="tasks-dialog-answer" required="" maxlength="15" pattern="[0-9]+">\n    </label>\n    <input type="submit" class="submit-button" value="->">\n  </div>\n  </form>\n</section>\n');var t=Nt(function(){var t=[],e=c[Math.floor(3*Math.random())];return"+"===e||"-"===e?t.push(Math.floor(50*Math.random())+1,Math.floor(50*Math.random())+1):"*"===e&&t.push(Math.floor(10*Math.random())+1,Math.floor(10*Math.random())+1),t.sort(function(t,e){return e-t}),t.push(e),t}(),3),e=t[0],n=t[1],r=t[2];document.querySelector("#taskSimpleMath .operand1").innerHTML=e,document.querySelector("#taskSimpleMath .operand2").innerHTML=n,document.querySelector("#taskSimpleMath .operator").innerHTML=r}},{key:"empty",value:function(){document.querySelector("#taskSimpleMath").remove()}},{key:"getAnswer",value:function(){e.draw(),e.focusOnImput();var t=document.querySelector("#taskSimpleMath .tasks-dialog-answer");t.focus();var n=document.querySelector("#taskSimpleMath .submit-button"),r=function(t,e,n){var r=null;return"+"===n?r=t+e:"-"===n?r=t-e:"*"===n&&(r=t*e),r}(+document.querySelector("#taskSimpleMath .operand1").innerHTML,+document.querySelector("#taskSimpleMath .operand2").innerHTML,document.querySelector("#taskSimpleMath .operator").innerHTML);return new Promise(function(i){n.addEventListener("click",function(){var n=At(regeneratorRuntime.mark(function n(o){var a;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(o.preventDefault(),+(a=+t.value)!==r){n.next=9;break}return e.empty(),n.next=6,e.win("attack");case 6:i(a),n.next=13;break;case 9:return e.empty(),n.next=12,e.lose();case 12:i(a);case 13:case"end":return n.stop()}},n,this)}));return function(t){return n.apply(this,arguments)}}()),n.addEventListener("mousedown",At(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:+ +t.value!==r&&t.classList.add("wrong-input");case 2:case"end":return e.stop()}},e,this)}))),n.addEventListener("mouseup",At(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:+ +t.value!==r&&t.classList.remove("wrong-input");case 2:case"end":return e.stop()}},e,this)})))})}}],(r=null)&&Rt(n.prototype,r),i&&Rt(n,i),e}(),jt=n(28);function qt(t){return(qt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Wt(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}function Ut(t){return function(){var e=this,n=arguments;return new Promise(function(r,i){var o=t.apply(e,n);function a(t){Wt(o,r,i,a,s,"next",t)}function s(t){Wt(o,r,i,a,s,"throw",t)}a(void 0)})}}function Bt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ht(t,e){return!e||"object"!==qt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Vt(t){return(Vt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Qt(t,e){return(Qt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var zt=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),Ht(this,Vt(e).apply(this,arguments))}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Qt(t,e)}(e,kt),n=e,i=[{key:"draw",value:function(){document.querySelector(".container").insertAdjacentHTML("afterbegin",'\n<section id="taskTranslation" class="tasks-dialog translation">\n  <form class="tasks-dialog-form">\n  <h1>Translate this word to win this clash</h1>\n  <div class="word-to-translate"><span class="word"></span></div>\n  <div class="task-translation-wrapper">\n    <input type="text" class="tasks-dialog-answer" required="" maxlength="15">\n    <input type="submit" class="submit-button" value="->">\n  </div>\n  </form>\n</section>\n');var t=JSON.parse(JSON.stringify(jt)),e=Math.floor(Math.random()*t.englishWords.length);document.querySelector("#taskTranslation .word-to-translate .word").innerHTML=t.englishWords[e].word,document.querySelector("#taskTranslation .word-to-translate .word").setAttribute("data-id",e)}},{key:"empty",value:function(){document.querySelector("#taskTranslation").remove()}},{key:"getAnswer",value:function(){e.draw(),e.focusOnImput();var t=document.querySelector("#taskTranslation .tasks-dialog-answer");t.focus();var n=document.querySelector("#taskTranslation .submit-button"),r=+document.querySelector("#taskTranslation .word-to-translate .word").getAttribute("data-id"),i=JSON.parse(JSON.stringify(jt)).englishWords[r].translation;return i.map(function(t){return t.toLowerCase()}),new Promise(function(r){n.addEventListener("click",function(){var n=Ut(regeneratorRuntime.mark(function n(o){var a;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(o.preventDefault(),a=t.value.toLowerCase(),!i.includes(a)){n.next=9;break}return e.empty(),n.next=6,e.win("attack");case 6:r(a),n.next=13;break;case 9:return e.empty(),n.next=12,e.lose();case 12:r(a);case 13:case"end":return n.stop()}},n,this)}));return function(t){return n.apply(this,arguments)}}()),n.addEventListener("mousedown",Ut(regeneratorRuntime.mark(function e(){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:n=t.value.toLowerCase(),i.includes(n)||t.classList.add("wrong-input");case 2:case"end":return e.stop()}},e,this)}))),n.addEventListener("mouseup",Ut(regeneratorRuntime.mark(function e(){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:n=t.value.toLowerCase(),i.includes(n)||t.classList.remove("wrong-input");case 2:case"end":return e.stop()}},e,this)})))})}}],(r=null)&&Bt(n.prototype,r),i&&Bt(n,i),e}();function Yt(t){return(Yt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Gt(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}function Kt(t){return function(){var e=this,n=arguments;return new Promise(function(r,i){var o=t.apply(e,n);function a(t){Gt(o,r,i,a,s,"next",t)}function s(t){Gt(o,r,i,a,s,"throw",t)}a(void 0)})}}function Xt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function $t(t,e){return!e||"object"!==Yt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Jt(t){return(Jt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Zt(t,e){return(Zt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var te=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),$t(this,Jt(e).apply(this,arguments))}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Zt(t,e)}(e,kt),n=e,i=[{key:"draw",value:function(){document.querySelector(".container").insertAdjacentHTML("afterbegin",'\n<section id="taskAudition" class="tasks-dialog audition">\n  <form class="tasks-dialog-form">\n  <h1>Listen to the word and type it in the box below</h1>\n  <div class="task-audition-wrapper">\n    <input type="button" class="play-button" value="play word">\n    <div class="answer-block">\n      <input type="text" class="tasks-dialog-answer" required="" maxlength="15">\n      <input type="submit" class="submit-button" value="->">\n    </div>\n  </div>\n  </form>\n</section>\n');var t=JSON.parse(JSON.stringify(jt)),e=Math.floor(Math.random()*t.englishWords.length);document.querySelector("#taskAudition .play-button").setAttribute("data-id",e)}},{key:"empty",value:function(){document.querySelector("#taskAudition").remove()}},{key:"getAnswer",value:function(){e.draw(),e.focusOnImput();var t=document.querySelector("#taskAudition .tasks-dialog-answer");t.focus();var n=document.querySelector("#taskAudition .submit-button"),r=+document.querySelector("#taskAudition .play-button").getAttribute("data-id"),i=document.querySelector("#taskAudition .play-button"),o=window.speechSynthesis,a=JSON.parse(JSON.stringify(jt)).englishWords[r].word.toLowerCase();return new Promise(function(r){i.addEventListener("click",function(){var t=Kt(regeneratorRuntime.mark(function t(e){var n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:e.preventDefault(),(n=new SpeechSynthesisUtterance(a)).voice=o.getVoices().find(function(t){return"en-US"===t.lang}),n.rate=.6,o.speak(n);case 5:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}()),n.addEventListener("click",function(){var n=Kt(regeneratorRuntime.mark(function n(i){var o;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(i.preventDefault(),o=t.value.toLowerCase(),a!==o){n.next=9;break}return e.empty(),n.next=6,e.win("heal");case 6:r(o),n.next=13;break;case 9:return e.empty(),n.next=12,e.lose();case 12:r(o);case 13:case"end":return n.stop()}},n,this)}));return function(t){return n.apply(this,arguments)}}()),n.addEventListener("mousedown",Kt(regeneratorRuntime.mark(function e(){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:n=t.value.toLowerCase(),a!==n&&t.classList.add("wrong-input");case 2:case"end":return e.stop()}},e,this)}))),n.addEventListener("mouseup",Kt(regeneratorRuntime.mark(function e(){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:n=t.value.toLowerCase(),a!==n&&t.classList.remove("wrong-input");case 2:case"end":return e.stop()}},e,this)})))})}}],(r=null)&&Xt(n.prototype,r),i&&Xt(n,i),e}(),ee=n(153),ne=n.n(ee);function re(t){return(re="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ie(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function oe(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}function ae(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function se(t,e){return!e||"object"!==re(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function ue(t){return(ue=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ce(t,e){return(ce=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var le=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),se(this,ue(e).apply(this,arguments))}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ce(t,e)}(e,kt),n=e,i=[{key:"addDragAndDrop",value:function(){var t=document.querySelector(".letterList");ne.a.create(t,{animation:150})}},{key:"listItems",value:function(t){var e=document.createElement("ul");e.className="letterList";var n=t.split("");at(n).forEach(function(t,n){var r=document.createElement("li");r.className="letterListItem letterListItem-item".concat(n+1),r.innerHTML=t,e.appendChild(r)});var r=document.querySelector(".task-drag-drop-wrapper");r.insertBefore(e,r.firstChild)}},{key:"draw",value:function(){document.querySelector(".container").insertAdjacentHTML("afterbegin",'\n<section id="taskDragAndDrop" class="tasks-dialog drag-drop">\n  <form class="tasks-dialog-form">\n  <h1>Reorder the letters to get a word</h1>\n  <div class="task-drag-drop-wrapper">\n    <div class="answer-block">\n      <input type="submit" class="submit-button" value="Submit">\n    </div>\n  </div>\n  </form>\n</section>\n');var t=JSON.parse(JSON.stringify(jt)).englishWords.filter(function(t){return t.word.length<5}),n=t[Math.floor(Math.random()*t.length)].word;return e.listItems(n.toLowerCase()),e.addDragAndDrop(),n}},{key:"empty",value:function(){document.querySelector("#taskDragAndDrop").remove()}},{key:"getAnswer",value:function(){var t=e.draw().toLowerCase(),n=document.querySelector("#taskDragAndDrop .submit-button");return new Promise(function(r){n.addEventListener("click",function(){var n,i=(n=regeneratorRuntime.mark(function n(i){var o,a,s,u;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(i.preventDefault(),o=document.querySelector(".letterList"),a=ie(o.childNodes),s=[],a.forEach(function(t){s.push(t.innerHTML)}),(u=s.join(""))!==t){n.next=13;break}return e.empty(),n.next=10,e.win("attack");case 10:r(u),n.next=17;break;case 13:return e.empty(),n.next=16,e.lose();case 16:r(u);case 17:case"end":return n.stop()}},n,this)}),function(){var t=this,e=arguments;return new Promise(function(r,i){var o=n.apply(t,e);function a(t){oe(o,r,i,a,s,"next",t)}function s(t){oe(o,r,i,a,s,"throw",t)}a(void 0)})});return function(t){return i.apply(this,arguments)}}())})}}],(r=null)&&ae(n.prototype,r),i&&ae(n,i),e}();function he(t){return(he="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function fe(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}function pe(t){return function(){var e=this,n=arguments;return new Promise(function(r,i){var o=t.apply(e,n);function a(t){fe(o,r,i,a,s,"next",t)}function s(t){fe(o,r,i,a,s,"throw",t)}a(void 0)})}}function de(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ye(t,e){return!e||"object"!==he(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function ve(t){return(ve=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ge(t,e){return(ge=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var me=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),ye(this,ve(e).apply(this,arguments))}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ge(t,e)}(e,kt),n=e,i=[{key:"draw",value:function(){document.querySelector(".container").insertAdjacentHTML("afterbegin",'\n<section id="taskSequence" class="tasks-dialog sequence">\n  <form class="tasks-dialog-form">\n  <h1>continue the sequence, little hero</h1>\n  <div class="task-sequence-wrapper">\n    <ul class="sequence-block">\n      <li class="sequence-item item1"></li>\n      <li class="sequence-item item2"></li>\n      <li class="sequence-item item3"></li>\n      <li class="sequence-item item4">?</li>\n    </ul>\n    <div class="answer-block">\n      <input type="text" class="tasks-dialog-answer" required="" maxlength="15">\n      <input type="submit" class="submit-button" value="->">\n    </div>\n  </div>\n  </form>\n</section>\n')}},{key:"empty",value:function(){document.querySelector("#taskSequence").remove()}},{key:"fillSequence",value:function(){var t=Math.floor(70*Math.random()),e=Math.floor(25*Math.random()),n=t;return document.querySelector(".tasks-dialog .item1").innerHTML=t,n+=e,document.querySelector(".tasks-dialog .item2").innerHTML=n,n+=e,document.querySelector(".tasks-dialog .item3").innerHTML=n,n+=e}},{key:"getAnswer",value:function(){e.draw(),e.focusOnImput();var t=document.querySelector("#taskSequence .tasks-dialog-answer");t.focus();var n=document.querySelector("#taskSequence .submit-button"),r=e.fillSequence();return new Promise(function(i){n.addEventListener("click",function(){var n=pe(regeneratorRuntime.mark(function n(o){var a;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(o.preventDefault(),+(a=+t.value)!==r){n.next=9;break}return e.empty(),n.next=6,e.win("heal");case 6:i(a),n.next=13;break;case 9:return e.empty(),n.next=12,e.lose();case 12:i(a);case 13:case"end":return n.stop()}},n,this)}));return function(t){return n.apply(this,arguments)}}()),n.addEventListener("mousedown",pe(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:+ +t.value!==r&&t.classList.add("wrong-input");case 2:case"end":return e.stop()}},e,this)}))),n.addEventListener("mouseup",pe(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:+ +t.value!==r&&t.classList.remove("wrong-input");case 2:case"end":return e.stop()}},e,this)})))})}}],(r=null)&&de(n.prototype,r),i&&de(n,i),e}();function _e(t){return(_e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function be(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}function we(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ee(t,e){return!e||"object"!==_e(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Se(t){return(Se=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ce(t,e){return(Ce=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var xe=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),Ee(this,Se(e).apply(this,arguments))}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ce(t,e)}(e,kt),n=e,i=[{key:"draw",value:function(){document.querySelector(".container").insertAdjacentHTML("afterbegin",'\n<section id="taskFindExtra" class="tasks-dialog find-extra">\n  <form class="tasks-dialog-form">\n  <h1>Please Find the extra word!</h1>\n  <div class="task-find-extra-wrapper">\n    <div class="find-extra-block">\n      <div class="row row1">\n        <input type="button" class="find-extra-item item1" value="">\n        <input type="button" class="find-extra-item item2" value="">\n      </div>\n      <div class="row row2">\n        <input type="button" class="find-extra-item item3" value="">\n        <input type="button" class="find-extra-item item4" value="">\n      </div>\n    </div>\n  </div>\n  </form>\n</section>\n')}},{key:"empty",value:function(){document.querySelector("#taskFindExtra").remove()}},{key:"fillItems",value:function(){var t=JSON.parse(JSON.stringify(jt)),e=t.types[Math.floor(Math.random()*t.types.length)],n=[],r=[];t.englishWords.forEach(function(t){t.type===e&&n.push(t.word)}),t.englishWords.forEach(function(t){t.type!==e&&r.push(t.word)});var i=n.slice(),o=[];o.push(r[Math.floor(Math.random()*r.length)]);for(var a=0;a<3;a+=1){var s=i[Math.floor(Math.random()*i.length)];o.push(s),i.splice(i.indexOf(s),1)}var u=o[0];return at(o).forEach(function(t,e){document.querySelector("#taskFindExtra .item".concat(e+1)).value=t}),u}},{key:"getAnswer",value:function(){e.draw();var t=e.fillItems();return new Promise(function(n){document.querySelectorAll("#taskFindExtra .find-extra-item").forEach(function(r){r.addEventListener("click",function(){var i,o=(i=regeneratorRuntime.mark(function i(o){var a;return regeneratorRuntime.wrap(function(i){for(;;)switch(i.prev=i.next){case 0:if(o.preventDefault(),(a=r.value)!==t){i.next=9;break}return e.empty(),i.next=6,e.win("heal");case 6:n(a),i.next=13;break;case 9:return e.empty(),i.next=12,e.lose();case 12:n(a);case 13:case"end":return i.stop()}},i,this)}),function(){var t=this,e=arguments;return new Promise(function(n,r){var o=i.apply(t,e);function a(t){be(o,n,r,a,s,"next",t)}function s(t){be(o,n,r,a,s,"throw",t)}a(void 0)})});return function(t){return o.apply(this,arguments)}}())})})}}],(r=null)&&we(n.prototype,r),i&&we(n,i),e}();function Te(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}var ke=function(){var t,e=(t=regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:t.t0=e.toLowerCase(),t.next="1. simple math spell"===t.t0?3:"5. magic translation"===t.t0?6:"2. powerful ear"===t.t0?9:"3. right order attack"===t.t0?12:"6. fairy sequence"===t.t0?15:"4. find the extra"===t.t0?18:21;break;case 3:return t.next=5,Lt.getAnswer();case 5:return t.abrupt("break",22);case 6:return t.next=8,zt.getAnswer();case 8:return t.abrupt("break",22);case 9:return t.next=11,te.getAnswer();case 11:return t.abrupt("break",22);case 12:return t.next=14,le.getAnswer();case 14:return t.abrupt("break",22);case 15:return t.next=17,me.getAnswer();case 17:return t.abrupt("break",22);case 18:return t.next=20,xe.getAnswer();case 20:return t.abrupt("break",22);case 21:throw new TypeError("Something went wrong, sorry kid!");case 22:case"end":return t.stop()}},t,this)}),function(){var e=this,n=arguments;return new Promise(function(r,i){var o=t.apply(e,n);function a(t){Te(o,r,i,a,s,"next",t)}function s(t){Te(o,r,i,a,s,"throw",t)}a(void 0)})});return function(t){return e.apply(this,arguments)}}(),Pe=n(71);n(380);function Oe(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}function Ie(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Ae=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,n=null,r=[{key:"init",value:function(){var t={apiKey:"AIzaSyDxkDtS7k8aVpROUB2NM3XbSEV-uVhSNnM",authDomain:"beasts-cc3e7.firebaseapp.com",databaseURL:"https://beasts-cc3e7.firebaseio.com",projectId:"beasts-cc3e7",storageBucket:"beasts-cc3e7.appspot.com",messagingSenderId:"263177959706"};Pe.initializeApp(t)}},{key:"setUser",value:function(t,e){var n=Pe.database().ref(),r={};r["/users/".concat(t)]=e,n.update(r)}},{key:"getData",value:function(){var t,e=(t=regeneratorRuntime.mark(function t(){var e;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e=Pe.database().ref("users"),t.abrupt("return",e.once("value").then(function(t){return t.val()}));case 2:case"end":return t.stop()}},t,this)}),function(){var e=this,n=arguments;return new Promise(function(r,i){var o=t.apply(e,n);function a(t){Oe(o,r,i,a,s,"next",t)}function s(t){Oe(o,r,i,a,s,"throw",t)}a(void 0)})});return function(){return e.apply(this,arguments)}}()}],n&&Ie(e.prototype,n),r&&Ie(e,r),t}();function Ne(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Re(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}function De(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Fe=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,n=null,r=[{key:"getDBData",value:function(){var t,e=(t=regeneratorRuntime.mark(function t(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",Ae.getData());case 1:case"end":return t.stop()}},t,this)}),function(){var e=this,n=arguments;return new Promise(function(r,i){var o=t.apply(e,n);function a(t){Re(o,r,i,a,s,"next",t)}function s(t){Re(o,r,i,a,s,"throw",t)}a(void 0)})});return function(){return e.apply(this,arguments)}}()},{key:"draw",value:function(e){document.querySelector(".container").insertAdjacentHTML("afterbegin",'\n<section id="scoreTable" class="score-section">\n  <h1>Score</h1>\n  <table class="score-table">\n  <tr class="score-table-header">\n    <th>Username</th>\n    <th>Score</th> \n  </tr>\n</table>\n<input type="button" class="close" value="x">\n</section>\n');var n=Object.keys(e),r=Object.values(e),i=[];n.forEach(function(t,e){i.push([t,r[e]])}),i.sort(function(t,e){return e[1]-t[1]});var o=document.querySelector("#scoreTable .score-table");i.forEach(function(t){var e=Ne(t,2),n=e[0],r=e[1],i=document.createElement("tr"),a=document.createElement("td"),s=document.createElement("td");a.innerHTML=n,s.innerHTML=r,i.appendChild(a),i.appendChild(s),o.appendChild(i)}),document.querySelector(".score-section .close").addEventListener("click",function(){t.empty(),window.location.reload()}),document.addEventListener("keydown",function(e){var n=document.querySelector(".score-section .close");e.keyCode===g&&n&&(t.empty(),window.location.reload())})}},{key:"empty",value:function(){document.querySelector("#scoreTable").remove()}}],n&&De(e.prototype,n),r&&De(e,r),t}();function Me(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}function Le(t){return function(){var e=this,n=arguments;return new Promise(function(r,i){var o=t.apply(e,n);function a(t){Me(o,r,i,a,s,"next",t)}function s(t){Me(o,r,i,a,s,"throw",t)}a(void 0)})}}function je(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var qe=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,n=null,r=[{key:"start",value:function(){var e=Le(regeneratorRuntime.mark(function e(n,r){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return Pt.load(n,r),e.next=3,it(1500);case 3:t.getSpell();case 4:case"end":return e.stop()}},e,this)}));return function(t,n){return e.apply(this,arguments)}}()},{key:"draw",value:function(){document.querySelector(".container").insertAdjacentHTML("afterbegin",'\n<section id="magicSpell" class="magic-spell-dialog">\n  <form class="magic-spell-form">\n  <h1>choose the spell and let\'s go!</h1>\n  <div class="magic-spells">\n    <div class="spells attack-spells">\n      <p class="spell-type">Attack spell</p>\n      <input type="button" class="spell-button attack0" value="1. simple math spell">\n      <input type="button" class="spell-button attack1" value="3. right order attack">\n      <input type="button" class="spell-button attack2" value="5. magic translation">\n    </div>\n    <div class="spells heal-spells">\n      <p class="spell-type">Heal potion</p>\n      <input type="button" class="spell-button heal0" value="2. powerful ear">\n      <input type="button" class="spell-button heal1" value="4. find the extra">\n      <input type="button" class="spell-button heal2" value="6. fairy sequence">\n    </div>\n  </div>\n  </form>\n</section>\n')}},{key:"empty",value:function(){document.querySelector("#magicSpell").remove()}},{key:"getSpell",value:function(){t.draw(),t.keybordControl();var e=sessionStorage.getItem("playerName");return new Promise(function(n){document.querySelectorAll("#magicSpell .spell-button").forEach(function(r){r.addEventListener("click",function(){var i=Le(regeneratorRuntime.mark(function i(o){var c;return regeneratorRuntime.wrap(function(i){for(;;)switch(i.prev=i.next){case 0:return o.preventDefault(),c=r.value,t.empty(),i.next=5,ke(c);case 5:if(!Tt.monster.health||!Tt.hero.health){i.next=10;break}return i.next=8,t.getSpell();case 8:i.next=32;break;case 10:if(Tt.monster.health){i.next=22;break}return Tt.score.score+=1,i.next=14,it(2e3);case 14:return i.next=16,Pt.load(e,ot(a,s,u));case 16:return i.next=18,it(1500);case 18:return i.next=20,t.getSpell();case 20:i.next=32;break;case 22:if(Tt.hero.health){i.next=32;break}if(!Tt.score.score){i.next=26;break}return i.next=26,Ae.setUser(e,Tt.score.score);case 26:return i.t0=Fe,i.next=29,Fe.getDBData();case 29:return i.t1=i.sent,i.next=32,i.t0.draw.call(i.t0,i.t1);case 32:n(c);case 33:case"end":return i.stop()}},i,this)}));return function(t){return i.apply(this,arguments)}}())})})}},{key:"keybordControl",value:function(){document.addEventListener("keydown",function(t){if(document.querySelector(".spell-button"))switch(t.keyCode){case l:document.querySelector(".spell-button.attack0").focus();break;case h:document.querySelector(".spell-button.heal0").focus();break;case f:document.querySelector(".spell-button.attack1").focus();break;case p:document.querySelector(".spell-button.heal1").focus();break;case d:document.querySelector(".spell-button.attack2").focus();break;case y:document.querySelector(".spell-button.heal2").focus()}})}}],n&&je(e.prototype,n),r&&je(e,r),t}();function We(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Ue=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,r=[{key:"draw",value:function(){document.querySelector(".container").insertAdjacentHTML("afterbegin",'\n<input type="button" class="game-info-button" value="How to Play">\n'),document.querySelector(".game-info-button").addEventListener("click",function(){document.querySelector("#gameInfoPopUp")||t.drawInfoPopUp()})}},{key:"empty",value:function(){document.querySelector(".game-info-button").remove()}},{key:"drawInfoPopUp",value:function(){document.querySelector(".container").insertAdjacentHTML("afterbegin",'\n<section id="gameInfoPopUp" class="game-info-popup">\n  <h1>How To Play (with help of keyboard)</h1>\n  <ol class="game-info-list">\n    <li>use 1-6 keys to select the spell</li>  \n    <li>then use enter key to apply the spell</li>\n    <li>in the spell dialog press enter to submit the answer</li>\n    <li>use shift to focus on input</li>\n    <li>use esc to close the dialog</li>\n    <li>you can use the tab key to move between buttons</li>\n  </ol>\n  <input type="button" class="close" value="x">\n</section>\n'),document.querySelector("#gameInfoPopUp .close").addEventListener("click",function(){t.emptyInfoPopUp()}),document.addEventListener("keydown",function(e){var n=document.querySelector("#gameInfoPopUp .close");e.keyCode===g&&n&&t.emptyInfoPopUp()})}},{key:"emptyInfoPopUp",value:function(){document.querySelector("#gameInfoPopUp").remove()}}],(n=null)&&We(e.prototype,n),r&&We(e,r),t}();function Be(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}var He,Ve;Ae.init(),N.draw(),bt.draw(),Ue.draw(),document.querySelector(".container .play-button").addEventListener("click",(He=regeneratorRuntime.mark(function t(e){var n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e.preventDefault(),t.next=3,b.getNewPlayerName();case 3:return n=t.sent,t.next=6,qe.start(n,ot(a,s,u));case 6:case"end":return t.stop()}},t,this)}),Ve=function(){var t=this,e=arguments;return new Promise(function(n,r){var i=He.apply(t,e);function o(t){Be(i,n,r,o,a,"next",t)}function a(t){Be(i,n,r,o,a,"throw",t)}o(void 0)})},function(t){return Ve.apply(this,arguments)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,